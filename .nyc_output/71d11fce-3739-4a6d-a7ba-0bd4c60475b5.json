{"/Users/fegicochen/Courses/CPSC 310/C1/project_team085/src/controller/IInsightFacade.ts":{"path":"/Users/fegicochen/Courses/CPSC 310/C1/project_team085/src/controller/IInsightFacade.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":113}},"2":{"start":{"line":5,"column":0},"end":{"line":8,"column":89}},"3":{"start":{"line":6,"column":4},"end":{"line":6,"column":48}},"4":{"start":{"line":7,"column":4},"end":{"line":7,"column":42}},"5":{"start":{"line":11,"column":8},"end":{"line":11,"column":23}},"6":{"start":{"line":12,"column":8},"end":{"line":12,"column":52}},"7":{"start":{"line":15,"column":0},"end":{"line":15,"column":36}},"8":{"start":{"line":18,"column":8},"end":{"line":18,"column":23}},"9":{"start":{"line":19,"column":8},"end":{"line":19,"column":53}},"10":{"start":{"line":22,"column":0},"end":{"line":22,"column":38}},"11":{"start":{"line":25,"column":8},"end":{"line":25,"column":23}},"12":{"start":{"line":26,"column":8},"end":{"line":26,"column":59}},"13":{"start":{"line":29,"column":0},"end":{"line":29,"column":50}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":5,"column":1},"end":{"line":5,"column":2}},"loc":{"start":{"line":5,"column":31},"end":{"line":8,"column":1}},"line":5},"1":{"name":"(anonymous_1)","decl":{"start":{"line":10,"column":4},"end":{"line":10,"column":5}},"loc":{"start":{"line":10,"column":25},"end":{"line":13,"column":5}},"line":10},"2":{"name":"(anonymous_2)","decl":{"start":{"line":17,"column":4},"end":{"line":17,"column":5}},"loc":{"start":{"line":17,"column":25},"end":{"line":20,"column":5}},"line":17},"3":{"name":"(anonymous_3)","decl":{"start":{"line":24,"column":4},"end":{"line":24,"column":5}},"loc":{"start":{"line":24,"column":25},"end":{"line":27,"column":5}},"line":24}},"branchMap":{"0":{"loc":{"start":{"line":8,"column":24},"end":{"line":8,"column":87}},"type":"binary-expr","locations":[{"start":{"line":8,"column":24},"end":{"line":8,"column":50}},{"start":{"line":8,"column":55},"end":{"line":8,"column":86}}],"line":8}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":109738,"6":109738,"7":1,"8":1,"9":1,"10":1,"11":3,"12":3,"13":1},"f":{"0":1,"1":109738,"2":1,"3":3},"b":{"0":[1,1]},"inputSourceMap":{"version":3,"file":"/Users/fegicochen/Courses/CPSC 310/C1/project_team085/src/controller/IInsightFacade.ts","sources":["/Users/fegicochen/Courses/CPSC 310/C1/project_team085/src/controller/IInsightFacade.ts"],"names":[],"mappings":";;;AAMA,IAAY,kBAGX;AAHD,WAAY,kBAAkB;IAC7B,2CAAqB,CAAA;IACrB,qCAAe,CAAA;AAChB,CAAC,EAHW,kBAAkB,GAAlB,0BAAkB,KAAlB,0BAAkB,QAG7B;AAUD,MAAa,YAAa,SAAQ,KAAK;IACtC,YAAY,OAAgB;QAC3B,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,KAAK,CAAC,iBAAiB,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;IAC7C,CAAC;CACD;AALD,oCAKC;AAED,MAAa,aAAc,SAAQ,KAAK;IACvC,YAAY,OAAgB;QAC3B,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,KAAK,CAAC,iBAAiB,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;IAC9C,CAAC;CACD;AALD,sCAKC;AAED,MAAa,mBAAoB,SAAQ,KAAK;IAC7C,YAAY,OAAgB;QAC3B,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,KAAK,CAAC,iBAAiB,CAAC,IAAI,EAAE,mBAAmB,CAAC,CAAC;IACpD,CAAC;CACD;AALD,kDAKC","sourcesContent":["/*\n * This is the primary high-level API for the project. In this folder there should be:\n * A class called InsightFacade, this should be in a file called InsightFacade.ts.\n * You should not change this interface at all or the test suite will not work.\n */\n\nexport enum InsightDatasetKind {\n\tSections = \"sections\",\n\tRooms = \"rooms\",\n}\n\nexport interface InsightDataset {\n\tid: string;\n\tkind: InsightDatasetKind;\n\tnumRows: number;\n}\n\nexport type InsightResult = Record<string, string | number>;\n\nexport class InsightError extends Error {\n\tconstructor(message?: string) {\n\t\tsuper(message);\n\t\tError.captureStackTrace(this, InsightError);\n\t}\n}\n\nexport class NotFoundError extends Error {\n\tconstructor(message?: string) {\n\t\tsuper(message);\n\t\tError.captureStackTrace(this, NotFoundError);\n\t}\n}\n\nexport class ResultTooLargeError extends Error {\n\tconstructor(message?: string) {\n\t\tsuper(message);\n\t\tError.captureStackTrace(this, ResultTooLargeError);\n\t}\n}\n\nexport interface IInsightFacade {\n\t/**\n\t * Add a dataset to insightUBC.\n\t *\n\t * @param id  The id of the dataset being added. Follows the format /^[^_]+$/\n\t * @param content  The base64 content of the dataset. This content should be in the form of a serialized zip file.\n\t * @param kind  The kind of the dataset\n\t *\n\t * @return Promise <string[]>\n\t *\n\t * The promise should fulfill on a successful add, reject for any failures.\n\t * The promise should fulfill with a string array,\n\t * containing the ids of all currently added datasets upon a successful add.\n\t * The promise should reject with an InsightError describing the error.\n\t *\n\t * An id is invalid if it contains an underscore, or is only whitespace characters.\n\t * If id is the same as the id of an already added dataset, the dataset should be rejected and not saved.\n\t *\n\t * After receiving the dataset, it should be processed into a data structure of\n\t * your design. The processed data structure should be persisted to disk; your\n\t * system should be able to load this persisted value into memory for answering\n\t * queries.\n\t *\n\t * Ultimately, a dataset must be added or loaded from disk before queries can\n\t * be successfully answered.\n\t */\n\taddDataset(id: string, content: string, kind: InsightDatasetKind): Promise<string[]>;\n\n\t/**\n\t * Remove a dataset from insightUBC.\n\t *\n\t * @param id  The id of the dataset to remove. Follows the format /^[^_]+$/\n\t *\n\t * @return Promise <string>\n\t *\n\t * The promise should fulfill upon a successful removal, reject on any error.\n\t * Attempting to remove a dataset that hasn't been added yet counts as an error.\n\t *\n\t * An id is invalid if it contains an underscore, or is only whitespace characters.\n\t *\n\t * The promise should fulfill the id of the dataset that was removed.\n\t * The promise should reject with a NotFoundError (if a valid id was not yet added)\n\t * or an InsightError (invalid id or any other source of failure) describing the error.\n\t *\n\t * This will delete both disk and memory caches for the dataset for the id meaning\n\t * that subsequent queries for that id should fail unless a new addDataset happens first.\n\t */\n\tremoveDataset(id: string): Promise<string>;\n\n\t/**\n\t * Perform a query on insightUBC.\n\t *\n\t * @param query  The query to be performed.\n\t *\n\t * If a query is incorrectly formatted, references a dataset not added (in memory or on disk),\n\t * or references multiple datasets, it should be rejected.\n\t *\n\t * @return Promise <InsightResult[]>\n\t *\n\t * The promise should fulfill with an array of results.\n\t * The promise should reject with a ResultTooLargeError (if the query returns too many results)\n\t * or an InsightError (for any other source of failure) describing the error.\n\t */\n\tperformQuery(query: unknown): Promise<InsightResult[]>;\n\n\t/**\n\t * List all currently added datasets, their types, and number of rows.\n\t *\n\t * @return Promise <InsightDataset[]>\n\t * The promise should fulfill an array of currently added InsightDatasets, and will only fulfill.\n\t */\n\tlistDatasets(): Promise<InsightDataset[]>;\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"d0dced8471f30e6fc175ecfbe2af877f35daa9a0","contentHash":"3405cee3e86702967f227690b413136132f5522cb24903468b8a7cc5f7178d71"},"/Users/fegicochen/Courses/CPSC 310/C1/project_team085/src/controller/InsightFacade.ts":{"path":"/Users/fegicochen/Courses/CPSC 310/C1/project_team085/src/controller/InsightFacade.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":18},"end":{"line":6,"column":38}},"4":{"start":{"line":7,"column":25},"end":{"line":7,"column":52}},"5":{"start":{"line":8,"column":22},"end":{"line":8,"column":46}},"6":{"start":{"line":9,"column":25},"end":{"line":9,"column":69}},"7":{"start":{"line":10,"column":35},"end":{"line":10,"column":89}},"8":{"start":{"line":11,"column":32},"end":{"line":11,"column":66}},"9":{"start":{"line":15,"column":8},"end":{"line":15,"column":51}},"10":{"start":{"line":18,"column":8},"end":{"line":20,"column":9}},"11":{"start":{"line":19,"column":12},"end":{"line":19,"column":87}},"12":{"start":{"line":21,"column":8},"end":{"line":23,"column":9}},"13":{"start":{"line":21,"column":71},"end":{"line":21,"column":88}},"14":{"start":{"line":22,"column":12},"end":{"line":22,"column":75}},"15":{"start":{"line":24,"column":8},"end":{"line":33,"column":9}},"16":{"start":{"line":25,"column":34},"end":{"line":25,"column":100}},"17":{"start":{"line":26,"column":28},"end":{"line":26,"column":114}},"18":{"start":{"line":27,"column":12},"end":{"line":27,"column":56}},"19":{"start":{"line":30,"column":31},"end":{"line":30,"column":105}},"20":{"start":{"line":31,"column":28},"end":{"line":31,"column":108}},"21":{"start":{"line":32,"column":12},"end":{"line":32,"column":53}},"22":{"start":{"line":34,"column":8},"end":{"line":34,"column":36}},"23":{"start":{"line":35,"column":8},"end":{"line":35,"column":79}},"24":{"start":{"line":38,"column":8},"end":{"line":40,"column":9}},"25":{"start":{"line":39,"column":12},"end":{"line":39,"column":73}},"26":{"start":{"line":41,"column":28},"end":{"line":41,"column":30}},"27":{"start":{"line":42,"column":25},"end":{"line":42,"column":27}},"28":{"start":{"line":43,"column":25},"end":{"line":43,"column":54}},"29":{"start":{"line":44,"column":8},"end":{"line":48,"column":11}},"30":{"start":{"line":45,"column":12},"end":{"line":47,"column":13}},"31":{"start":{"line":46,"column":16},"end":{"line":46,"column":42}},"32":{"start":{"line":49,"column":8},"end":{"line":53,"column":11}},"33":{"start":{"line":50,"column":12},"end":{"line":52,"column":13}},"34":{"start":{"line":51,"column":16},"end":{"line":51,"column":39}},"35":{"start":{"line":54,"column":8},"end":{"line":56,"column":9}},"36":{"start":{"line":55,"column":12},"end":{"line":55,"column":94}},"37":{"start":{"line":57,"column":8},"end":{"line":57,"column":80}},"38":{"start":{"line":58,"column":8},"end":{"line":58,"column":36}},"39":{"start":{"line":59,"column":8},"end":{"line":59,"column":18}},"40":{"start":{"line":62,"column":25},"end":{"line":62,"column":54}},"41":{"start":{"line":63,"column":19},"end":{"line":63,"column":64}},"42":{"start":{"line":63,"column":55},"end":{"line":63,"column":63}},"43":{"start":{"line":64,"column":25},"end":{"line":64,"column":53}},"44":{"start":{"line":65,"column":8},"end":{"line":65,"column":24}},"45":{"start":{"line":68,"column":8},"end":{"line":72,"column":12}},"46":{"start":{"line":68,"column":103},"end":{"line":72,"column":9}},"47":{"start":{"line":75,"column":0},"end":{"line":75,"column":32}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":14,"column":4},"end":{"line":14,"column":5}},"loc":{"start":{"line":14,"column":18},"end":{"line":16,"column":5}},"line":14},"2":{"name":"(anonymous_2)","decl":{"start":{"line":17,"column":4},"end":{"line":17,"column":5}},"loc":{"start":{"line":17,"column":40},"end":{"line":36,"column":5}},"line":17},"3":{"name":"(anonymous_3)","decl":{"start":{"line":21,"column":58},"end":{"line":21,"column":59}},"loc":{"start":{"line":21,"column":71},"end":{"line":21,"column":88}},"line":21},"4":{"name":"(anonymous_4)","decl":{"start":{"line":37,"column":4},"end":{"line":37,"column":5}},"loc":{"start":{"line":37,"column":28},"end":{"line":60,"column":5}},"line":37},"5":{"name":"(anonymous_5)","decl":{"start":{"line":44,"column":34},"end":{"line":44,"column":35}},"loc":{"start":{"line":44,"column":47},"end":{"line":48,"column":9}},"line":44},"6":{"name":"(anonymous_6)","decl":{"start":{"line":49,"column":31},"end":{"line":49,"column":32}},"loc":{"start":{"line":49,"column":44},"end":{"line":53,"column":9}},"line":49},"7":{"name":"(anonymous_7)","decl":{"start":{"line":61,"column":4},"end":{"line":61,"column":5}},"loc":{"start":{"line":61,"column":30},"end":{"line":66,"column":5}},"line":61},"8":{"name":"(anonymous_8)","decl":{"start":{"line":63,"column":49},"end":{"line":63,"column":50}},"loc":{"start":{"line":63,"column":55},"end":{"line":63,"column":63}},"line":63},"9":{"name":"(anonymous_9)","decl":{"start":{"line":67,"column":4},"end":{"line":67,"column":5}},"loc":{"start":{"line":67,"column":25},"end":{"line":73,"column":5}},"line":67},"10":{"name":"(anonymous_10)","decl":{"start":{"line":68,"column":89},"end":{"line":68,"column":90}},"loc":{"start":{"line":68,"column":103},"end":{"line":72,"column":9}},"line":68}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":18,"column":8},"end":{"line":20,"column":9}},"type":"if","locations":[{"start":{"line":18,"column":8},"end":{"line":20,"column":9}},{"start":{"line":18,"column":8},"end":{"line":20,"column":9}}],"line":18},"4":{"loc":{"start":{"line":21,"column":8},"end":{"line":23,"column":9}},"type":"if","locations":[{"start":{"line":21,"column":8},"end":{"line":23,"column":9}},{"start":{"line":21,"column":8},"end":{"line":23,"column":9}}],"line":21},"5":{"loc":{"start":{"line":24,"column":8},"end":{"line":33,"column":9}},"type":"if","locations":[{"start":{"line":24,"column":8},"end":{"line":33,"column":9}},{"start":{"line":24,"column":8},"end":{"line":33,"column":9}}],"line":24},"6":{"loc":{"start":{"line":38,"column":8},"end":{"line":40,"column":9}},"type":"if","locations":[{"start":{"line":38,"column":8},"end":{"line":40,"column":9}},{"start":{"line":38,"column":8},"end":{"line":40,"column":9}}],"line":38},"7":{"loc":{"start":{"line":45,"column":12},"end":{"line":47,"column":13}},"type":"if","locations":[{"start":{"line":45,"column":12},"end":{"line":47,"column":13}},{"start":{"line":45,"column":12},"end":{"line":47,"column":13}}],"line":45},"8":{"loc":{"start":{"line":50,"column":12},"end":{"line":52,"column":13}},"type":"if","locations":[{"start":{"line":50,"column":12},"end":{"line":52,"column":13}},{"start":{"line":50,"column":12},"end":{"line":52,"column":13}}],"line":50},"9":{"loc":{"start":{"line":54,"column":8},"end":{"line":56,"column":9}},"type":"if","locations":[{"start":{"line":54,"column":8},"end":{"line":56,"column":9}},{"start":{"line":54,"column":8},"end":{"line":56,"column":9}}],"line":54}},"s":{"0":1,"1":2,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":32,"10":42,"11":4,"12":38,"13":11,"14":2,"15":36,"16":33,"17":24,"18":24,"19":3,"20":3,"21":3,"22":27,"23":27,"24":5,"25":2,"26":3,"27":3,"28":3,"29":3,"30":4,"31":2,"32":3,"33":0,"34":0,"35":3,"36":1,"37":2,"38":2,"39":2,"40":85,"41":85,"42":68,"43":85,"44":36,"45":15,"46":14,"47":1},"f":{"0":2,"1":32,"2":42,"3":11,"4":5,"5":4,"6":0,"7":85,"8":68,"9":15,"10":14},"b":{"0":[1,1,1],"1":[2,0],"2":[2,2],"3":[4,38],"4":[2,36],"5":[33,3],"6":[2,3],"7":[2,2],"8":[0,0],"9":[1,2]},"inputSourceMap":{"version":3,"file":"/Users/fegicochen/Courses/CPSC 310/C1/project_team085/src/controller/InsightFacade.ts","sources":["/Users/fegicochen/Courses/CPSC 310/C1/project_team085/src/controller/InsightFacade.ts"],"names":[],"mappings":"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","sourcesContent":["import { SectionsDataset, DatasetUtils, RoomsDataset } from \"./Dataset\";\nimport {\n\tIInsightFacade,\n\tInsightDataset,\n\tInsightDatasetKind,\n\tInsightError,\n\tInsightResult,\n\tNotFoundError,\n} from \"./IInsightFacade\";\nimport { QueryEngine } from \"./QueryEngine\";\nimport PersistantData from \"./PersistantData\";\nimport SectionsDatasetProcessor from \"./SectionsDatasetProcessor\";\nimport { RoomsDatasetProcessor } from \"./RoomsDatasetProcessor\";\n\n/**\n * This is the main programmatic entry point for the project.\n * Method documentation is in IInsightFacade\n *\n */\nexport default class InsightFacade implements IInsightFacade {\n\tprivate data: PersistantData;\n\n\tconstructor() {\n\t\tthis.data = new PersistantData();\n\t}\n\n\tpublic async addDataset(id: string, content: string, kind: InsightDatasetKind): Promise<string[]> {\n\t\t// Check id valid\n\t\tif (!DatasetUtils.isValidIdString(id)) {\n\t\t\tthrow new InsightError(\"Invalid dataset ID: \" + id + \".\");\n\t\t}\n\n\t\t// Check for duplicate ID\n\t\tif ((await this.data.getDatasets()).sections.find((dataset) => dataset.id === id)) {\n\t\t\tthrow new InsightError(\"Duplicate ID: \" + id);\n\t\t}\n\n\t\t// Check kind\n\t\tif (kind === InsightDatasetKind.Sections) {\n\t\t\tconst validSections = await SectionsDatasetProcessor.getValidSections(content);\n\t\t\tconst dataset: SectionsDataset = { id: id, members: validSections, type: InsightDatasetKind.Sections };\n\t\t\tawait this.data.addSectionsDataset(dataset);\n\t\t} else {\n\t\t\tconst validRooms = await RoomsDatasetProcessor.getValidRooms(content);\n\t\t\tconst dataset: RoomsDataset = { id: id, members: validRooms, type: InsightDatasetKind.Rooms };\n\t\t\tawait this.data.addRoomsDataset(dataset);\n\t\t}\n\n\t\t// Save to disc\n\t\tawait this.data.writeData();\n\n\t\t// Return list of valid datasets\n\t\treturn DatasetUtils.getAllIDs(await this.data.getDatasets());\n\t}\n\n\tpublic async removeDataset(id: string): Promise<string> {\n\t\tif (!DatasetUtils.isValidIdString(id)) {\n\t\t\tthrow new InsightError(\"Invalid id: \" + id);\n\t\t}\n\t\tconst newSections: SectionsDataset[] = [];\n\t\tconst newRooms: RoomsDataset[] = [];\n\t\tconst datasets = await this.data.getDatasets();\n\t\tdatasets.sections.forEach((dataset) => {\n\t\t\tif (dataset.id !== id) {\n\t\t\t\tnewSections.push(dataset);\n\t\t\t}\n\t\t});\n\t\tdatasets.rooms.forEach((dataset) => {\n\t\t\tif (dataset.id !== id) {\n\t\t\t\tnewRooms.push(dataset);\n\t\t\t}\n\t\t});\n\t\tif ((await this.data.getDatasets()).sections.length === newSections.length) {\n\t\t\tthrow new NotFoundError(\"Dataset with id \" + id + \" not found.\");\n\t\t}\n\t\tawait this.data.setDatasets({ sections: newSections, rooms: newRooms });\n\n\t\t// Save to disc\n\t\tawait this.data.writeData();\n\n\t\treturn id;\n\t}\n\n\tpublic async performQuery(query: unknown): Promise<InsightResult[]> {\n\t\tconst datasets = await this.data.getDatasets();\n\t\tconst qe = new QueryEngine(() => datasets);\n\t\tconst sections = await qe.processQuery(query);\n\t\treturn sections;\n\t}\n\n\tpublic async listDatasets(): Promise<InsightDataset[]> {\n\t\treturn DatasetUtils.combineDatasets(await this.data.getDatasets()).map((dataset) => ({\n\t\t\tid: dataset.id,\n\t\t\tkind: dataset.type,\n\t\t\tnumRows: dataset.members.length,\n\t\t}));\n\t}\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"8cc88d3b6d08d8a99e3c1cf694c86c7cf4f31c41","contentHash":"13087eb41024ace75e3d5524e08a34aaf22ff9b6c757d4989bb075ea606d1abf"},"/Users/fegicochen/Courses/CPSC 310/C1/project_team085/src/controller/Dataset.ts":{"path":"/Users/fegicochen/Courses/CPSC 310/C1/project_team085/src/controller/Dataset.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":0},"end":{"line":6,"column":126}},"4":{"start":{"line":7,"column":16},"end":{"line":7,"column":49}},"5":{"start":{"line":8,"column":25},"end":{"line":8,"column":52}},"6":{"start":{"line":9,"column":0},"end":{"line":9,"column":26}},"7":{"start":{"line":11,"column":0},"end":{"line":33,"column":62}},"8":{"start":{"line":12,"column":4},"end":{"line":12,"column":31}},"9":{"start":{"line":13,"column":4},"end":{"line":13,"column":27}},"10":{"start":{"line":14,"column":4},"end":{"line":14,"column":33}},"11":{"start":{"line":15,"column":4},"end":{"line":15,"column":43}},"12":{"start":{"line":16,"column":4},"end":{"line":16,"column":31}},"13":{"start":{"line":17,"column":4},"end":{"line":17,"column":31}},"14":{"start":{"line":18,"column":4},"end":{"line":18,"column":29}},"15":{"start":{"line":19,"column":4},"end":{"line":19,"column":31}},"16":{"start":{"line":20,"column":4},"end":{"line":20,"column":31}},"17":{"start":{"line":21,"column":4},"end":{"line":21,"column":33}},"18":{"start":{"line":22,"column":4},"end":{"line":22,"column":29}},"19":{"start":{"line":23,"column":4},"end":{"line":23,"column":29}},"20":{"start":{"line":24,"column":4},"end":{"line":24,"column":33}},"21":{"start":{"line":25,"column":4},"end":{"line":25,"column":39}},"22":{"start":{"line":26,"column":4},"end":{"line":26,"column":41}},"23":{"start":{"line":27,"column":4},"end":{"line":27,"column":35}},"24":{"start":{"line":28,"column":4},"end":{"line":28,"column":31}},"25":{"start":{"line":29,"column":4},"end":{"line":29,"column":37}},"26":{"start":{"line":30,"column":4},"end":{"line":30,"column":31}},"27":{"start":{"line":31,"column":4},"end":{"line":31,"column":41}},"28":{"start":{"line":32,"column":4},"end":{"line":32,"column":31}},"29":{"start":{"line":34,"column":0},"end":{"line":43,"column":2}},"30":{"start":{"line":44,"column":0},"end":{"line":57,"column":2}},"31":{"start":{"line":58,"column":0},"end":{"line":94,"column":2}},"32":{"start":{"line":97,"column":28},"end":{"line":97,"column":94}},"33":{"start":{"line":98,"column":8},"end":{"line":98,"column":40}},"34":{"start":{"line":101,"column":25},"end":{"line":101,"column":35}},"35":{"start":{"line":102,"column":8},"end":{"line":107,"column":9}},"36":{"start":{"line":103,"column":12},"end":{"line":103,"column":40}},"37":{"start":{"line":105,"column":13},"end":{"line":107,"column":9}},"38":{"start":{"line":106,"column":12},"end":{"line":106,"column":37}},"39":{"start":{"line":108,"column":8},"end":{"line":108,"column":25}},"40":{"start":{"line":111,"column":8},"end":{"line":111,"column":65}},"41":{"start":{"line":114,"column":32},"end":{"line":114,"column":46}},"42":{"start":{"line":115,"column":30},"end":{"line":115,"column":31}},"43":{"start":{"line":116,"column":8},"end":{"line":118,"column":9}},"44":{"start":{"line":117,"column":12},"end":{"line":117,"column":29}},"45":{"start":{"line":119,"column":21},"end":{"line":119,"column":39}},"46":{"start":{"line":120,"column":23},"end":{"line":120,"column":41}},"47":{"start":{"line":121,"column":8},"end":{"line":123,"column":9}},"48":{"start":{"line":122,"column":12},"end":{"line":122,"column":29}},"49":{"start":{"line":124,"column":8},"end":{"line":127,"column":10}},"50":{"start":{"line":130,"column":32},"end":{"line":130,"column":46}},"51":{"start":{"line":131,"column":30},"end":{"line":131,"column":31}},"52":{"start":{"line":132,"column":8},"end":{"line":134,"column":9}},"53":{"start":{"line":133,"column":12},"end":{"line":133,"column":29}},"54":{"start":{"line":135,"column":21},"end":{"line":135,"column":39}},"55":{"start":{"line":136,"column":23},"end":{"line":136,"column":41}},"56":{"start":{"line":137,"column":8},"end":{"line":139,"column":9}},"57":{"start":{"line":138,"column":12},"end":{"line":138,"column":29}},"58":{"start":{"line":140,"column":8},"end":{"line":143,"column":10}},"59":{"start":{"line":146,"column":8},"end":{"line":146,"column":123}},"60":{"start":{"line":149,"column":26},"end":{"line":149,"column":45}},"61":{"start":{"line":150,"column":8},"end":{"line":155,"column":9}},"62":{"start":{"line":151,"column":12},"end":{"line":151,"column":29}},"63":{"start":{"line":154,"column":12},"end":{"line":154,"column":39}},"64":{"start":{"line":158,"column":8},"end":{"line":160,"column":9}},"65":{"start":{"line":159,"column":12},"end":{"line":159,"column":25}},"66":{"start":{"line":161,"column":8},"end":{"line":161,"column":108}},"67":{"start":{"line":161,"column":43},"end":{"line":161,"column":92}},"68":{"start":{"line":164,"column":8},"end":{"line":166,"column":9}},"69":{"start":{"line":165,"column":12},"end":{"line":165,"column":25}},"70":{"start":{"line":167,"column":8},"end":{"line":167,"column":108}},"71":{"start":{"line":167,"column":43},"end":{"line":167,"column":92}},"72":{"start":{"line":170,"column":26},"end":{"line":170,"column":35}},"73":{"start":{"line":171,"column":8},"end":{"line":178,"column":11}},"74":{"start":{"line":172,"column":12},"end":{"line":177,"column":13}},"75":{"start":{"line":172,"column":63},"end":{"line":172,"column":80}},"76":{"start":{"line":173,"column":16},"end":{"line":173,"column":35}},"77":{"start":{"line":176,"column":16},"end":{"line":176,"column":88}},"78":{"start":{"line":179,"column":26},"end":{"line":179,"column":28}},"79":{"start":{"line":180,"column":8},"end":{"line":184,"column":11}},"80":{"start":{"line":181,"column":12},"end":{"line":183,"column":13}},"81":{"start":{"line":182,"column":16},"end":{"line":182,"column":60}},"82":{"start":{"line":185,"column":8},"end":{"line":187,"column":9}},"83":{"start":{"line":186,"column":12},"end":{"line":186,"column":108}},"84":{"start":{"line":188,"column":28},"end":{"line":188,"column":37}},"85":{"start":{"line":189,"column":8},"end":{"line":194,"column":11}},"86":{"start":{"line":190,"column":26},"end":{"line":190,"column":40}},"87":{"start":{"line":191,"column":12},"end":{"line":193,"column":13}},"88":{"start":{"line":192,"column":16},"end":{"line":192,"column":50}},"89":{"start":{"line":195,"column":8},"end":{"line":195,"column":27}},"90":{"start":{"line":198,"column":28},"end":{"line":198,"column":37}},"91":{"start":{"line":199,"column":8},"end":{"line":204,"column":11}},"92":{"start":{"line":200,"column":37},"end":{"line":200,"column":67}},"93":{"start":{"line":200,"column":54},"end":{"line":200,"column":66}},"94":{"start":{"line":201,"column":12},"end":{"line":203,"column":13}},"95":{"start":{"line":202,"column":16},"end":{"line":202,"column":44}},"96":{"start":{"line":205,"column":8},"end":{"line":210,"column":11}},"97":{"start":{"line":206,"column":45},"end":{"line":206,"column":48}},"98":{"start":{"line":207,"column":12},"end":{"line":209,"column":13}},"99":{"start":{"line":208,"column":16},"end":{"line":208,"column":85}},"100":{"start":{"line":211,"column":8},"end":{"line":211,"column":27}},"101":{"start":{"line":214,"column":8},"end":{"line":216,"column":9}},"102":{"start":{"line":215,"column":12},"end":{"line":215,"column":133}},"103":{"start":{"line":217,"column":8},"end":{"line":217,"column":19}},"104":{"start":{"line":220,"column":8},"end":{"line":222,"column":9}},"105":{"start":{"line":221,"column":12},"end":{"line":221,"column":133}},"106":{"start":{"line":223,"column":8},"end":{"line":223,"column":19}},"107":{"start":{"line":226,"column":8},"end":{"line":228,"column":9}},"108":{"start":{"line":227,"column":12},"end":{"line":227,"column":133}},"109":{"start":{"line":229,"column":8},"end":{"line":229,"column":19}},"110":{"start":{"line":232,"column":8},"end":{"line":234,"column":9}},"111":{"start":{"line":233,"column":12},"end":{"line":233,"column":141}},"112":{"start":{"line":235,"column":8},"end":{"line":235,"column":19}},"113":{"start":{"line":239,"column":8},"end":{"line":244,"column":9}},"114":{"start":{"line":240,"column":12},"end":{"line":240,"column":88}},"115":{"start":{"line":243,"column":12},"end":{"line":243,"column":82}},"116":{"start":{"line":245,"column":8},"end":{"line":245,"column":24}},"117":{"start":{"line":248,"column":8},"end":{"line":248,"column":63}},"118":{"start":{"line":248,"column":57},"end":{"line":248,"column":61}},"119":{"start":{"line":251,"column":8},"end":{"line":251,"column":56}},"120":{"start":{"line":254,"column":0},"end":{"line":254,"column":36}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":11,"column":1},"end":{"line":11,"column":2}},"loc":{"start":{"line":11,"column":22},"end":{"line":33,"column":1}},"line":11},"2":{"name":"(anonymous_2)","decl":{"start":{"line":96,"column":4},"end":{"line":96,"column":5}},"loc":{"start":{"line":96,"column":33},"end":{"line":99,"column":5}},"line":96},"3":{"name":"(anonymous_3)","decl":{"start":{"line":100,"column":4},"end":{"line":100,"column":5}},"loc":{"start":{"line":100,"column":45},"end":{"line":109,"column":5}},"line":100},"4":{"name":"(anonymous_4)","decl":{"start":{"line":110,"column":4},"end":{"line":110,"column":5}},"loc":{"start":{"line":110,"column":37},"end":{"line":112,"column":5}},"line":110},"5":{"name":"(anonymous_5)","decl":{"start":{"line":113,"column":4},"end":{"line":113,"column":5}},"loc":{"start":{"line":113,"column":26},"end":{"line":128,"column":5}},"line":113},"6":{"name":"(anonymous_6)","decl":{"start":{"line":129,"column":4},"end":{"line":129,"column":5}},"loc":{"start":{"line":129,"column":26},"end":{"line":144,"column":5}},"line":129},"7":{"name":"(anonymous_7)","decl":{"start":{"line":145,"column":4},"end":{"line":145,"column":5}},"loc":{"start":{"line":145,"column":29},"end":{"line":147,"column":5}},"line":145},"8":{"name":"(anonymous_8)","decl":{"start":{"line":148,"column":4},"end":{"line":148,"column":5}},"loc":{"start":{"line":148,"column":29},"end":{"line":156,"column":5}},"line":148},"9":{"name":"(anonymous_9)","decl":{"start":{"line":157,"column":4},"end":{"line":157,"column":5}},"loc":{"start":{"line":157,"column":23},"end":{"line":162,"column":5}},"line":157},"10":{"name":"(anonymous_10)","decl":{"start":{"line":161,"column":36},"end":{"line":161,"column":37}},"loc":{"start":{"line":161,"column":43},"end":{"line":161,"column":92}},"line":161},"11":{"name":"(anonymous_11)","decl":{"start":{"line":163,"column":4},"end":{"line":163,"column":5}},"loc":{"start":{"line":163,"column":23},"end":{"line":168,"column":5}},"line":163},"12":{"name":"(anonymous_12)","decl":{"start":{"line":167,"column":36},"end":{"line":167,"column":37}},"loc":{"start":{"line":167,"column":43},"end":{"line":167,"column":92}},"line":167},"13":{"name":"(anonymous_13)","decl":{"start":{"line":169,"column":4},"end":{"line":169,"column":5}},"loc":{"start":{"line":169,"column":39},"end":{"line":196,"column":5}},"line":169},"14":{"name":"(anonymous_14)","decl":{"start":{"line":171,"column":33},"end":{"line":171,"column":34}},"loc":{"start":{"line":171,"column":42},"end":{"line":178,"column":9}},"line":171},"15":{"name":"(anonymous_15)","decl":{"start":{"line":172,"column":26},"end":{"line":172,"column":27}},"loc":{"start":{"line":172,"column":63},"end":{"line":172,"column":80}},"line":172},"16":{"name":"(anonymous_16)","decl":{"start":{"line":180,"column":21},"end":{"line":180,"column":22}},"loc":{"start":{"line":180,"column":57},"end":{"line":184,"column":9}},"line":180},"17":{"name":"(anonymous_17)","decl":{"start":{"line":189,"column":21},"end":{"line":189,"column":22}},"loc":{"start":{"line":189,"column":58},"end":{"line":194,"column":9}},"line":189},"18":{"name":"(anonymous_18)","decl":{"start":{"line":197,"column":4},"end":{"line":197,"column":5}},"loc":{"start":{"line":197,"column":37},"end":{"line":212,"column":5}},"line":197},"19":{"name":"(anonymous_19)","decl":{"start":{"line":199,"column":36},"end":{"line":199,"column":37}},"loc":{"start":{"line":199,"column":54},"end":{"line":204,"column":9}},"line":199},"20":{"name":"(anonymous_20)","decl":{"start":{"line":200,"column":47},"end":{"line":200,"column":48}},"loc":{"start":{"line":200,"column":54},"end":{"line":200,"column":66}},"line":200},"21":{"name":"(anonymous_21)","decl":{"start":{"line":205,"column":21},"end":{"line":205,"column":22}},"loc":{"start":{"line":205,"column":30},"end":{"line":210,"column":9}},"line":205},"22":{"name":"(anonymous_22)","decl":{"start":{"line":213,"column":4},"end":{"line":213,"column":5}},"loc":{"start":{"line":213,"column":39},"end":{"line":218,"column":5}},"line":213},"23":{"name":"(anonymous_23)","decl":{"start":{"line":219,"column":4},"end":{"line":219,"column":5}},"loc":{"start":{"line":219,"column":39},"end":{"line":224,"column":5}},"line":219},"24":{"name":"(anonymous_24)","decl":{"start":{"line":225,"column":4},"end":{"line":225,"column":5}},"loc":{"start":{"line":225,"column":38},"end":{"line":230,"column":5}},"line":225},"25":{"name":"(anonymous_25)","decl":{"start":{"line":231,"column":4},"end":{"line":231,"column":5}},"loc":{"start":{"line":231,"column":39},"end":{"line":236,"column":5}},"line":231},"26":{"name":"(anonymous_26)","decl":{"start":{"line":237,"column":4},"end":{"line":237,"column":5}},"loc":{"start":{"line":237,"column":45},"end":{"line":246,"column":5}},"line":237},"27":{"name":"(anonymous_27)","decl":{"start":{"line":247,"column":4},"end":{"line":247,"column":5}},"loc":{"start":{"line":247,"column":31},"end":{"line":249,"column":5}},"line":247},"28":{"name":"(anonymous_28)","decl":{"start":{"line":248,"column":50},"end":{"line":248,"column":51}},"loc":{"start":{"line":248,"column":57},"end":{"line":248,"column":61}},"line":248},"29":{"name":"(anonymous_29)","decl":{"start":{"line":250,"column":4},"end":{"line":250,"column":5}},"loc":{"start":{"line":250,"column":37},"end":{"line":252,"column":5}},"line":250}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":33,"column":15},"end":{"line":33,"column":60}},"type":"binary-expr","locations":[{"start":{"line":33,"column":15},"end":{"line":33,"column":32}},{"start":{"line":33,"column":37},"end":{"line":33,"column":59}}],"line":33},"4":{"loc":{"start":{"line":102,"column":8},"end":{"line":107,"column":9}},"type":"if","locations":[{"start":{"line":102,"column":8},"end":{"line":107,"column":9}},{"start":{"line":102,"column":8},"end":{"line":107,"column":9}}],"line":102},"5":{"loc":{"start":{"line":105,"column":13},"end":{"line":107,"column":9}},"type":"if","locations":[{"start":{"line":105,"column":13},"end":{"line":107,"column":9}},{"start":{"line":105,"column":13},"end":{"line":107,"column":9}}],"line":105},"6":{"loc":{"start":{"line":111,"column":15},"end":{"line":111,"column":64}},"type":"binary-expr","locations":[{"start":{"line":111,"column":15},"end":{"line":111,"column":37}},{"start":{"line":111,"column":41},"end":{"line":111,"column":64}}],"line":111},"7":{"loc":{"start":{"line":116,"column":8},"end":{"line":118,"column":9}},"type":"if","locations":[{"start":{"line":116,"column":8},"end":{"line":118,"column":9}},{"start":{"line":116,"column":8},"end":{"line":118,"column":9}}],"line":116},"8":{"loc":{"start":{"line":121,"column":8},"end":{"line":123,"column":9}},"type":"if","locations":[{"start":{"line":121,"column":8},"end":{"line":123,"column":9}},{"start":{"line":121,"column":8},"end":{"line":123,"column":9}}],"line":121},"9":{"loc":{"start":{"line":121,"column":12},"end":{"line":121,"column":72}},"type":"binary-expr","locations":[{"start":{"line":121,"column":12},"end":{"line":121,"column":35}},{"start":{"line":121,"column":39},"end":{"line":121,"column":72}}],"line":121},"10":{"loc":{"start":{"line":132,"column":8},"end":{"line":134,"column":9}},"type":"if","locations":[{"start":{"line":132,"column":8},"end":{"line":134,"column":9}},{"start":{"line":132,"column":8},"end":{"line":134,"column":9}}],"line":132},"11":{"loc":{"start":{"line":137,"column":8},"end":{"line":139,"column":9}},"type":"if","locations":[{"start":{"line":137,"column":8},"end":{"line":139,"column":9}},{"start":{"line":137,"column":8},"end":{"line":139,"column":9}}],"line":137},"12":{"loc":{"start":{"line":137,"column":12},"end":{"line":137,"column":72}},"type":"binary-expr","locations":[{"start":{"line":137,"column":12},"end":{"line":137,"column":35}},{"start":{"line":137,"column":39},"end":{"line":137,"column":72}}],"line":137},"13":{"loc":{"start":{"line":146,"column":15},"end":{"line":146,"column":122}},"type":"binary-expr","locations":[{"start":{"line":146,"column":15},"end":{"line":146,"column":68}},{"start":{"line":146,"column":72},"end":{"line":146,"column":122}}],"line":146},"14":{"loc":{"start":{"line":150,"column":8},"end":{"line":155,"column":9}},"type":"if","locations":[{"start":{"line":150,"column":8},"end":{"line":155,"column":9}},{"start":{"line":150,"column":8},"end":{"line":155,"column":9}}],"line":150},"15":{"loc":{"start":{"line":158,"column":8},"end":{"line":160,"column":9}},"type":"if","locations":[{"start":{"line":158,"column":8},"end":{"line":160,"column":9}},{"start":{"line":158,"column":8},"end":{"line":160,"column":9}}],"line":158},"16":{"loc":{"start":{"line":161,"column":50},"end":{"line":161,"column":91}},"type":"cond-expr","locations":[{"start":{"line":161,"column":76},"end":{"line":161,"column":79}},{"start":{"line":161,"column":82},"end":{"line":161,"column":91}}],"line":161},"17":{"loc":{"start":{"line":164,"column":8},"end":{"line":166,"column":9}},"type":"if","locations":[{"start":{"line":164,"column":8},"end":{"line":166,"column":9}},{"start":{"line":164,"column":8},"end":{"line":166,"column":9}}],"line":164},"18":{"loc":{"start":{"line":167,"column":50},"end":{"line":167,"column":91}},"type":"cond-expr","locations":[{"start":{"line":167,"column":76},"end":{"line":167,"column":79}},{"start":{"line":167,"column":82},"end":{"line":167,"column":91}}],"line":167},"19":{"loc":{"start":{"line":172,"column":12},"end":{"line":177,"column":13}},"type":"if","locations":[{"start":{"line":172,"column":12},"end":{"line":177,"column":13}},{"start":{"line":172,"column":12},"end":{"line":177,"column":13}}],"line":172},"20":{"loc":{"start":{"line":181,"column":12},"end":{"line":183,"column":13}},"type":"if","locations":[{"start":{"line":181,"column":12},"end":{"line":183,"column":13}},{"start":{"line":181,"column":12},"end":{"line":183,"column":13}}],"line":181},"21":{"loc":{"start":{"line":181,"column":16},"end":{"line":181,"column":62}},"type":"binary-expr","locations":[{"start":{"line":181,"column":16},"end":{"line":181,"column":33}},{"start":{"line":181,"column":37},"end":{"line":181,"column":62}}],"line":181},"22":{"loc":{"start":{"line":185,"column":8},"end":{"line":187,"column":9}},"type":"if","locations":[{"start":{"line":185,"column":8},"end":{"line":187,"column":9}},{"start":{"line":185,"column":8},"end":{"line":187,"column":9}}],"line":185},"23":{"loc":{"start":{"line":191,"column":12},"end":{"line":193,"column":13}},"type":"if","locations":[{"start":{"line":191,"column":12},"end":{"line":193,"column":13}},{"start":{"line":191,"column":12},"end":{"line":193,"column":13}}],"line":191},"24":{"loc":{"start":{"line":191,"column":16},"end":{"line":191,"column":63}},"type":"binary-expr","locations":[{"start":{"line":191,"column":16},"end":{"line":191,"column":40}},{"start":{"line":191,"column":44},"end":{"line":191,"column":63}}],"line":191},"25":{"loc":{"start":{"line":201,"column":12},"end":{"line":203,"column":13}},"type":"if","locations":[{"start":{"line":201,"column":12},"end":{"line":203,"column":13}},{"start":{"line":201,"column":12},"end":{"line":203,"column":13}}],"line":201},"26":{"loc":{"start":{"line":207,"column":12},"end":{"line":209,"column":13}},"type":"if","locations":[{"start":{"line":207,"column":12},"end":{"line":209,"column":13}},{"start":{"line":207,"column":12},"end":{"line":209,"column":13}}],"line":207},"27":{"loc":{"start":{"line":207,"column":16},"end":{"line":207,"column":58}},"type":"binary-expr","locations":[{"start":{"line":207,"column":16},"end":{"line":207,"column":27}},{"start":{"line":207,"column":31},"end":{"line":207,"column":58}}],"line":207},"28":{"loc":{"start":{"line":214,"column":8},"end":{"line":216,"column":9}},"type":"if","locations":[{"start":{"line":214,"column":8},"end":{"line":216,"column":9}},{"start":{"line":214,"column":8},"end":{"line":216,"column":9}}],"line":214},"29":{"loc":{"start":{"line":220,"column":8},"end":{"line":222,"column":9}},"type":"if","locations":[{"start":{"line":220,"column":8},"end":{"line":222,"column":9}},{"start":{"line":220,"column":8},"end":{"line":222,"column":9}}],"line":220},"30":{"loc":{"start":{"line":226,"column":8},"end":{"line":228,"column":9}},"type":"if","locations":[{"start":{"line":226,"column":8},"end":{"line":228,"column":9}},{"start":{"line":226,"column":8},"end":{"line":228,"column":9}}],"line":226},"31":{"loc":{"start":{"line":232,"column":8},"end":{"line":234,"column":9}},"type":"if","locations":[{"start":{"line":232,"column":8},"end":{"line":234,"column":9}},{"start":{"line":232,"column":8},"end":{"line":234,"column":9}}],"line":232},"32":{"loc":{"start":{"line":232,"column":12},"end":{"line":232,"column":94}},"type":"binary-expr","locations":[{"start":{"line":232,"column":12},"end":{"line":232,"column":35}},{"start":{"line":232,"column":39},"end":{"line":232,"column":57}},{"start":{"line":232,"column":61},"end":{"line":232,"column":73}},{"start":{"line":232,"column":77},"end":{"line":232,"column":94}}],"line":232}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":0,"33":0,"34":68,"35":68,"36":66,"37":2,"38":2,"39":0,"40":47,"41":555,"42":555,"43":555,"44":4,"45":551,"46":551,"47":551,"48":250,"49":301,"50":254,"51":254,"52":254,"53":4,"54":250,"55":250,"56":250,"57":3,"58":247,"59":801,"60":555,"61":555,"62":301,"63":254,"64":675031,"65":0,"66":675031,"67":3712510,"68":337502,"69":0,"70":337502,"71":1012459,"72":422,"73":422,"74":563,"75":1509,"76":560,"77":3,"78":419,"79":419,"80":2220,"81":6,"82":419,"83":5,"84":414,"85":414,"86":2206,"87":2206,"88":556,"89":414,"90":73491,"91":73491,"92":2441638,"93":23026063,"94":2441638,"95":748387,"96":73491,"97":748381,"98":748381,"99":2,"100":73489,"101":405016,"102":42102,"103":362914,"104":379939,"105":67489,"106":312450,"107":6156,"108":2,"109":6154,"110":74144,"111":3,"112":74141,"113":36,"114":36,"115":3,"116":33,"117":27,"118":36,"119":42,"120":1},"f":{"0":1,"1":1,"2":0,"3":68,"4":47,"5":555,"6":254,"7":801,"8":555,"9":675031,"10":3712510,"11":337502,"12":1012459,"13":422,"14":563,"15":1509,"16":2220,"17":2206,"18":73491,"19":2441638,"20":23026063,"21":748381,"22":405016,"23":379939,"24":6156,"25":74144,"26":36,"27":27,"28":36,"29":42},"b":{"0":[1,1,1],"1":[0,1],"2":[1,1],"3":[1,1],"4":[66,2],"5":[2,0],"6":[47,44],"7":[4,551],"8":[250,301],"9":[551,549],"10":[4,250],"11":[3,247],"12":[250,248],"13":[801,18],"14":[301,254],"15":[0,675031],"16":[3711840,670],"17":[0,337502],"18":[1012320,139],"19":[560,3],"20":[6,2214],"21":[2220,241],"22":[5,414],"23":[556,1650],"24":[2206,556],"25":[748387,1693251],"26":[2,748379],"27":[748381,680893],"28":[42102,362914],"29":[67489,312450],"30":[2,6154],"31":[3,74141],"32":[74144,74142,74141,74141]},"inputSourceMap":{"version":3,"file":"/Users/fegicochen/Courses/CPSC 310/C1/project_team085/src/controller/Dataset.ts","sources":["/Users/fegicochen/Courses/CPSC 310/C1/project_team085/src/controller/Dataset.ts"],"names":[],"mappings":"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","sourcesContent":["import JSZip from \"jszip\";\nimport { InsightDatasetKind, InsightError } from \"./IInsightFacade\";\n\nexport const maxResults = 5000;\n\nexport enum DatasetId {\n\tUuid = \"uuid\",\n\tId = \"id\",\n\tTitle = \"title\",\n\tInstructor = \"instructor\",\n\tDept = \"dept\",\n\tYear = \"year\",\n\tAvg = \"avg\",\n\tPass = \"pass\",\n\tFail = \"fail\",\n\tAudit = \"audit\",\n\tLat = \"lat\",\n\tLon = \"lon\",\n\tSeats = \"seats\",\n\tFullname = \"fullname\",\n\tShortname = \"shortname\",\n\tNumber = \"number\",\n\tName = \"name\",\n\tAddress = \"address\",\n\tType = \"type\",\n\tFurniture = \"furniture\",\n\tHref = \"href\",\n}\n\nexport interface Section {\n\tuuid: string;\n\tid: string;\n\ttitle: string;\n\tinstructor: string;\n\tdept: string;\n\tyear: number;\n\tavg: number;\n\tpass: number;\n\tfail: number;\n\taudit: number;\n}\nexport type SectionWithDynamicKeys = Section & Record<string, any>;\n\nexport interface Room {\n\tfullname: string;\n\tshortname: string;\n\tnumber: string;\n\tname: string;\n\taddress: string;\n\tlat: number;\n\tlon: number;\n\tseats: number;\n\ttype: string;\n\tfurniture: string;\n\thref: string;\n}\n\nexport interface Dataset<T> {\n\tid: string;\n\tmembers: T[];\n\ttype: InsightDatasetKind;\n}\n\nexport type SectionsDataset = Dataset<Section>;\nexport type RoomsDataset = Dataset<Room>;\n\nexport interface DatasetList {\n\tsections: SectionsDataset[];\n\trooms: RoomsDataset[];\n}\n\nexport type DatasetsProvider = () => DatasetList;\n\nexport const MFields = [\n\tDatasetId.Avg,\n\tDatasetId.Pass,\n\tDatasetId.Fail,\n\tDatasetId.Audit,\n\tDatasetId.Year,\n\tDatasetId.Lat,\n\tDatasetId.Lon,\n\tDatasetId.Seats,\n];\nexport const SFields = [\n\tDatasetId.Dept,\n\tDatasetId.Id,\n\tDatasetId.Instructor,\n\tDatasetId.Title,\n\tDatasetId.Uuid,\n\tDatasetId.Fullname,\n\tDatasetId.Shortname,\n\tDatasetId.Number,\n\tDatasetId.Name,\n\tDatasetId.Address,\n\tDatasetId.Type,\n\tDatasetId.Furniture,\n];\n\nexport interface InsightFacadeKey {\n\tkind: string;\n\tfield: DatasetId;\n}\n\nexport const Keywords = {\n\tBody: \"WHERE\",\n\tOptions: \"OPTIONS\",\n\tTransformations: \"TRANSFORMATIONS\",\n\tFilter: {\n\t\tLogic: {\n\t\t\tAnd: \"AND\",\n\t\t\tOr: \"OR\",\n\t\t},\n\t\tMComparator: {\n\t\t\tLessThan: \"LT\",\n\t\t\tGreaterThan: \"GT\",\n\t\t\tEqual: \"EQ\",\n\t\t},\n\t\tSComparator: {\n\t\t\tIs: \"IS\",\n\t\t},\n\t\tNegation: {\n\t\t\tNot: \"NOT\",\n\t\t},\n\t},\n\tDirection: {\n\t\tUp: \"UP\",\n\t\tDown: \"DOWN\",\n\t},\n\tApplyToken: {\n\t\tMax: \"MAX\",\n\t\tMin: \"MIN\",\n\t\tAvg: \"AVG\",\n\t\tCount: \"COUNT\",\n\t\tSum: \"SUM\",\n\t},\n\tColumns: \"COLUMNS\",\n\tOrder: \"ORDER\",\n\tGroup: \"GROUP\",\n\tApply: \"APPLY\",\n};\n\nexport type ApplyRule = Record<string, Record<string, string>>;\n\nexport interface Transformations {\n\tGROUP: string[];\n\tAPPLY: ApplyRule[];\n}\n\nexport interface OptionsState {\n\torder?: {\n\t\tdir: \"UP\" | \"DOWN\";\n\t\tkeys: string[];\n\t};\n\tcolumns: InsightFacadeKey[];\n\tdatasetKind: string;\n}\n\nexport class DatasetUtils {\n\t/**\n\t *\n\t * @param base64 the base64 (maybe) string to validate\n\t * @returns whether it is base64 formatted or not\n\t */\n\tpublic static isValidBase64(base64: string): boolean {\n\t\t// Referenced from: https://stackoverflow.com/questions/7860392/determine-if-string-is-in-base64-using-javascript\n\t\t// Used the regular expression provided.\n\t\tconst base64regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;\n\t\treturn base64regex.test(base64);\n\t}\n\n\t/**\n\t *\n\t * @param provider datasets provider\n\t * @param id id to search for\n\t * @returns undefined if not found, else the dataset with the given id\n\t */\n\tpublic static findDatasetByKind(\n\t\tprovider: DatasetsProvider,\n\t\tkind: string\n\t): SectionsDataset | RoomsDataset | undefined {\n\t\tconst datasets = provider();\n\t\tif (kind === InsightDatasetKind.Sections) {\n\t\t\t// Assuming only one Sections dataset exists\n\t\t\treturn datasets.sections[0];\n\t\t} else if (kind === InsightDatasetKind.Rooms) {\n\t\t\t// Assuming only one Rooms dataset exists\n\t\t\treturn datasets.rooms[0];\n\t\t}\n\t\treturn undefined;\n\t}\n\n\t/**\n\t * Returns false if idstring does not conform to id string guidelines.\n\t *\n\t * @param idstring string to test\n\t * @returns false if string is improperly formatted (only whitespace or contains underscoare), true otherwise\n\t */\n\tpublic static isValidIdString(idstring: string): boolean {\n\t\treturn idstring.trim() !== \"\" && !idstring.includes(\"_\");\n\t}\n\n\t/**\n\t *\n\t * @param key string to test\n\t * @returns undefined if string is improperly formatted as an mkey, id string and key split if it is valid.\n\t */\n\tpublic static parseMKey(key: string): InsightFacadeKey | undefined {\n\t\tconst splitUnderscore = key.split(\"_\");\n\t\tconst expectedParts = 2;\n\t\tif (splitUnderscore.length !== expectedParts) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst kind = splitUnderscore[0];\n\t\tconst mfield = splitUnderscore[1];\n\t\tif (!this.isValidKind(kind) || !MFields.includes(mfield as DatasetId)) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn {\n\t\t\tkind: kind,\n\t\t\tfield: mfield as DatasetId,\n\t\t};\n\t}\n\n\t/**\n\t *\n\t * @param key string to test\n\t * @returns undefined if string is improperly formatted as an skey, id string and key split if it is valid.\n\t */\n\tpublic static parseSKey(key: string): InsightFacadeKey | undefined {\n\t\tconst splitUnderscore = key.split(\"_\");\n\t\tconst expectedParts = 2;\n\t\tif (splitUnderscore.length !== expectedParts) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst kind = splitUnderscore[0];\n\t\tconst sfield = splitUnderscore[1];\n\t\tif (!this.isValidKind(kind) || !SFields.includes(sfield as DatasetId)) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn {\n\t\t\tkind: kind,\n\t\t\tfield: sfield as DatasetId,\n\t\t};\n\t}\n\n\t// New helper function to validate kind\n\tpublic static isValidKind(kind: string): boolean {\n\t\treturn kind === InsightDatasetKind.Sections || kind === InsightDatasetKind.Rooms;\n\t}\n\n\t/**\n\t *\n\t * @param key string to test\n\t * @reutrns undefined if string is not an mkey or skey, otherwise produces id string and key split.\n\t */\n\tpublic static parseMOrSKey(key: string): InsightFacadeKey | undefined {\n\t\tconst mkeyParse = this.parseMKey(key);\n\t\tif (mkeyParse !== undefined) {\n\t\t\treturn mkeyParse;\n\t\t} else {\n\t\t\treturn this.parseSKey(key);\n\t\t}\n\t}\n\n\t/**\n\t *\n\t * @param key key to test with idstring and field or string representing type (DatasetId.Audit etc)\n\t * @returns whether it is an mkey or not\n\t */\n\tpublic static isMKey(key: InsightFacadeKey | string | undefined): boolean {\n\t\tif (key === undefined) {\n\t\t\treturn false;\n\t\t}\n\t\treturn MFields.find((x) => x === (typeof key === \"string\" ? key : key.field)) !== undefined;\n\t}\n\n\t/**\n\t *\n\t * @param key key to test with idstring and field or string representing type (DatasetId.Uuid, etc)\n\t * @returns whether it is an skey or not\n\t */\n\tpublic static isSKey(key: InsightFacadeKey | string | undefined): boolean {\n\t\tif (key === undefined) {\n\t\t\treturn false;\n\t\t}\n\t\treturn SFields.find((x) => x === (typeof key === \"string\" ? key : key.field)) !== undefined;\n\t}\n\n\t/**\n\t * Ensures object is populated with only the given keys and returns a map\n\t * between keys and their values in the object. Keys are paried with boolean indicating\n\t * whether they are mandatory or not. If they are not mandatory and not found, function\n\t * will not throw.\n\t *\n\t * @param obj object to check\n\t * @param keys keys in object to retrieve paired with whether they are mandatory\n\t * @throws InsighError if key match isn't exact (extra or missing keys)\n\t */\n\tpublic static requireExactKeys(obj: object, keys: [string, boolean][]): Map<string, unknown> {\n\t\t// Check for extra keys\n\t\tconst keysFound = new Set<string>();\n\t\tObject.keys(obj).forEach((key) => {\n\t\t\tif (keys.find(([searchKey, _searchKeyRequired]) => searchKey === key) !== undefined) {\n\t\t\t\tkeysFound.add(key);\n\t\t\t} else {\n\t\t\t\tthrow new InsightError(\"Extraneous key: \" + key + \".\");\n\t\t\t}\n\t\t});\n\t\t// Check for missing keys\n\t\tlet missingKeys: string[] = [];\n\t\tkeys.forEach(([searchKey, searchKeyRequired]) => {\n\t\t\t// If key is reuqired and it is not found\n\t\t\tif (searchKeyRequired && !keysFound.has(searchKey)) {\n\t\t\t\tmissingKeys = missingKeys.concat(searchKey);\n\t\t\t}\n\t\t});\n\t\tif (missingKeys.length !== 0) {\n\t\t\tthrow new InsightError(\"Missing key(s): \" + JSON.stringify(missingKeys) + \".\");\n\t\t}\n\n\t\t// Map keys to values in object\n\t\tconst keyValueMap = new Map<string, unknown>();\n\t\tkeys.forEach(([searchKey, _searchKeyRequired]) => {\n\t\t\tconst value = obj[searchKey as keyof typeof obj];\n\t\t\tif (keysFound.has(searchKey) && value !== undefined) {\n\t\t\t\tkeyValueMap.set(searchKey, value);\n\t\t\t}\n\t\t});\n\t\treturn keyValueMap;\n\t}\n\n\t/**\n\t * Ensures object is populated with the given keys. Other keys are ignored. Options keys\n\t * are allowed to be there or not.\n\t *\n\t * @param obj object to check\n\t * @param keys keys in object to retrieve paired with whether they are mandatory or not\n\t * @throws InsightError if a required key is not found\n\t */\n\tpublic static requireHasKeys(obj: object, keys: [string, boolean][]): Map<string, unknown> {\n\t\tconst keyValueMap = new Map<string, unknown>();\n\t\tObject.entries(obj).forEach(([key, value]) => {\n\t\t\tconst matchedSearchKey = keys.find((k) => k[0] === key);\n\t\t\tif (matchedSearchKey !== undefined) {\n\t\t\t\tkeyValueMap.set(key, value);\n\t\t\t}\n\t\t});\n\t\t// Ensure keys which are required have been mapped\n\t\tkeys.forEach((key) => {\n\t\t\tconst [keyString, keyRequired] = key;\n\t\t\tif (keyRequired && !keyValueMap.has(keyString)) {\n\t\t\t\tthrow new InsightError(\"Missing key: \" + keyString);\n\t\t\t}\n\t\t});\n\t\treturn keyValueMap;\n\t}\n\n\t/**\n\t * Checks whether the given num is a number, and throws an error identified with\n\t * section when it is not.\n\t *\n\t * @param section the name of the number\n\t * @param str the variable to test\n\t * @returns num as a number\n\t * @throws InsightError if num is not an number\n\t */\n\tpublic static checkIsNumber(section: string, num: unknown): number {\n\t\tif (typeof num !== \"number\") {\n\t\t\tthrow new InsightError(\"JSON format error: \" + section + \" must be a number, not: \" + typeof num + \".\");\n\t\t}\n\t\treturn num as number;\n\t}\n\n\t/**\n\t * Checks whether the given str is a string, and throws an error identified with\n\t * section when it is not.\n\t *\n\t * @param section the name of the string\n\t * @param str the variable to test\n\t * @returns str as a string\n\t * @throws InsightError if str is not an string\n\t */\n\tpublic static checkIsString(section: string, str: unknown): string {\n\t\tif (typeof str !== \"string\") {\n\t\t\tthrow new InsightError(\"JSON format error: \" + section + \" must be a string, not: \" + typeof str + \".\");\n\t\t}\n\t\treturn str as string;\n\t}\n\n\t/**\n\t * Checks whether the given arr is an array, and throws an error identified with\n\t * section when it is not.\n\t *\n\t * @param section the name of the array\n\t * @param arr the variable to test\n\t * @returns arr as an array\n\t * @throws InsightError if arr is not an array\n\t */\n\tpublic static checkIsArray(section: string, arr: unknown): unknown[] {\n\t\tif (!Array.isArray(arr)) {\n\t\t\tthrow new InsightError(\"JSON format error: \" + section + \" must be an array, not: \" + typeof arr + \".\");\n\t\t}\n\t\treturn arr as unknown[];\n\t}\n\n\t/**\n\t * Checks whether given obj is an object, and throws an error identified with\n\t * section when it is not.\n\t *\n\t * @param section the name of the object\n\t * @param obj the variable to test\n\t * @returns obj as an object\n\t * @throws InsightError if obj is not an object.\n\t */\n\tpublic static checkIsObject(section: string, obj: unknown): object {\n\t\tif (typeof obj !== \"object\" || Array.isArray(obj) || obj === null || obj === undefined) {\n\t\t\tthrow new InsightError(\"JSON format error: \" + section + \" must be an object, not: \" + typeof obj + \", \" + obj);\n\t\t}\n\t\treturn obj as object;\n\t}\n\n\t/**\n\t *\n\t * @param content base64 content to unzip\n\t * @returns a JSZip of the content\n\t * @throws InsightError if the content cannot be properly parsed\n\t */\n\tpublic static async unzipBase64Content(content: string): Promise<JSZip> {\n\t\tlet unzipped: JSZip;\n\t\ttry {\n\t\t\tunzipped = await new JSZip().loadAsync(content, { base64: true });\n\t\t} catch (e) {\n\t\t\tthrow new InsightError(\"Error parsing content \" + e);\n\t\t}\n\t\treturn unzipped;\n\t}\n\n\t/**\n\t *\n\t * @param datasets datasets to get ids from\n\t * @returns all ids in the given datasets\n\t */\n\tpublic static getAllIDs(datasets: DatasetList): string[] {\n\t\treturn this.combineDatasets(datasets).map((x) => x.id);\n\t}\n\n\t/**\n\t *\n\t * @param datasets datasets to combine\n\t * @returns list of datasets combined\n\t */\n\tpublic static combineDatasets(datasets: DatasetList): Dataset<Section | Room>[] {\n\t\treturn (datasets.rooms as Dataset<Section | Room>[]).concat(datasets.sections);\n\t}\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"be2f10708e2822d3de8a695d0cc4d2962b66cee7","contentHash":"00e67187398a593e771e6f3fd527b3c287006f42c77916d5de35800e7ce52bc8"},"/Users/fegicochen/Courses/CPSC 310/C1/project_team085/src/controller/QueryEngine.ts":{"path":"/Users/fegicochen/Courses/CPSC 310/C1/project_team085/src/controller/QueryEngine.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":29}},"2":{"start":{"line":4,"column":18},"end":{"line":4,"column":38}},"3":{"start":{"line":5,"column":17},"end":{"line":5,"column":36}},"4":{"start":{"line":6,"column":25},"end":{"line":6,"column":52}},"5":{"start":{"line":7,"column":23},"end":{"line":7,"column":48}},"6":{"start":{"line":8,"column":27},"end":{"line":8,"column":56}},"7":{"start":{"line":13,"column":8},"end":{"line":13,"column":33}},"8":{"start":{"line":16,"column":22},"end":{"line":16,"column":77}},"9":{"start":{"line":17,"column":30},"end":{"line":21,"column":10}},"10":{"start":{"line":22,"column":24},"end":{"line":22,"column":26}},"11":{"start":{"line":23,"column":8},"end":{"line":26,"column":9}},"12":{"start":{"line":24,"column":36},"end":{"line":24,"column":89}},"13":{"start":{"line":25,"column":12},"end":{"line":25,"column":69}},"14":{"start":{"line":27,"column":33},"end":{"line":27,"column":130}},"15":{"start":{"line":28,"column":8},"end":{"line":28,"column":57}},"16":{"start":{"line":29,"column":21},"end":{"line":29,"column":81}},"17":{"start":{"line":30,"column":30},"end":{"line":30,"column":34}},"18":{"start":{"line":31,"column":8},"end":{"line":34,"column":9}},"19":{"start":{"line":32,"column":36},"end":{"line":32,"column":89}},"20":{"start":{"line":33,"column":12},"end":{"line":33,"column":79}},"21":{"start":{"line":35,"column":8},"end":{"line":37,"column":9}},"22":{"start":{"line":36,"column":12},"end":{"line":36,"column":61}},"23":{"start":{"line":38,"column":28},"end":{"line":38,"column":62}},"24":{"start":{"line":39,"column":8},"end":{"line":39,"column":69}},"25":{"start":{"line":39,"column":41},"end":{"line":39,"column":67}},"26":{"start":{"line":42,"column":23},"end":{"line":42,"column":25}},"27":{"start":{"line":43,"column":29},"end":{"line":43,"column":33}},"28":{"start":{"line":44,"column":8},"end":{"line":55,"column":11}},"29":{"start":{"line":46,"column":12},"end":{"line":54,"column":13}},"30":{"start":{"line":47,"column":16},"end":{"line":47,"column":51}},"31":{"start":{"line":48,"column":16},"end":{"line":48,"column":45}},"32":{"start":{"line":51,"column":34},"end":{"line":51,"column":46}},"33":{"start":{"line":52,"column":16},"end":{"line":52,"column":48}},"34":{"start":{"line":53,"column":16},"end":{"line":53,"column":62}},"35":{"start":{"line":56,"column":8},"end":{"line":56,"column":22}},"36":{"start":{"line":59,"column":8},"end":{"line":88,"column":9}},"37":{"start":{"line":60,"column":34},"end":{"line":60,"column":52}},"38":{"start":{"line":61,"column":30},"end":{"line":61,"column":51}},"39":{"start":{"line":62,"column":12},"end":{"line":87,"column":15}},"40":{"start":{"line":63,"column":16},"end":{"line":85,"column":17}},"41":{"start":{"line":64,"column":35},"end":{"line":64,"column":60}},"42":{"start":{"line":65,"column":35},"end":{"line":65,"column":60}},"43":{"start":{"line":66,"column":20},"end":{"line":84,"column":21}},"44":{"start":{"line":67,"column":24},"end":{"line":69,"column":25}},"45":{"start":{"line":68,"column":28},"end":{"line":68,"column":50}},"46":{"start":{"line":70,"column":24},"end":{"line":72,"column":25}},"47":{"start":{"line":71,"column":28},"end":{"line":71,"column":49}},"48":{"start":{"line":74,"column":25},"end":{"line":84,"column":21}},"49":{"start":{"line":75,"column":24},"end":{"line":77,"column":25}},"50":{"start":{"line":76,"column":28},"end":{"line":76,"column":50}},"51":{"start":{"line":78,"column":24},"end":{"line":80,"column":25}},"52":{"start":{"line":79,"column":28},"end":{"line":79,"column":49}},"53":{"start":{"line":83,"column":24},"end":{"line":83,"column":100}},"54":{"start":{"line":86,"column":16},"end":{"line":86,"column":25}},"55":{"start":{"line":89,"column":8},"end":{"line":89,"column":20}},"56":{"start":{"line":92,"column":30},"end":{"line":92,"column":60}},"57":{"start":{"line":93,"column":8},"end":{"line":96,"column":9}},"58":{"start":{"line":94,"column":30},"end":{"line":94,"column":65}},"59":{"start":{"line":95,"column":12},"end":{"line":95,"column":35}},"60":{"start":{"line":97,"column":8},"end":{"line":97,"column":25}},"61":{"start":{"line":100,"column":21},"end":{"line":100,"column":91}},"62":{"start":{"line":101,"column":24},"end":{"line":101,"column":44}},"63":{"start":{"line":102,"column":8},"end":{"line":104,"column":9}},"64":{"start":{"line":103,"column":12},"end":{"line":103,"column":90}},"65":{"start":{"line":105,"column":28},"end":{"line":105,"column":38}},"66":{"start":{"line":106,"column":28},"end":{"line":106,"column":44}},"67":{"start":{"line":107,"column":24},"end":{"line":107,"column":92}},"68":{"start":{"line":108,"column":8},"end":{"line":110,"column":9}},"69":{"start":{"line":109,"column":12},"end":{"line":109,"column":105}},"70":{"start":{"line":112,"column":8},"end":{"line":120,"column":9}},"71":{"start":{"line":113,"column":12},"end":{"line":113,"column":59}},"72":{"start":{"line":115,"column":13},"end":{"line":120,"column":9}},"73":{"start":{"line":116,"column":12},"end":{"line":116,"column":59}},"74":{"start":{"line":119,"column":12},"end":{"line":119,"column":81}},"75":{"start":{"line":121,"column":31},"end":{"line":121,"column":67}},"76":{"start":{"line":122,"column":29},"end":{"line":122,"column":51}},"77":{"start":{"line":123,"column":8},"end":{"line":123,"column":28}},"78":{"start":{"line":126,"column":21},"end":{"line":126,"column":91}},"79":{"start":{"line":127,"column":27},"end":{"line":135,"column":10}},"80":{"start":{"line":136,"column":8},"end":{"line":138,"column":9}},"81":{"start":{"line":137,"column":12},"end":{"line":137,"column":128}},"82":{"start":{"line":139,"column":23},"end":{"line":139,"column":35}},"83":{"start":{"line":140,"column":8},"end":{"line":140,"column":96}},"84":{"start":{"line":140,"column":44},"end":{"line":140,"column":93}},"85":{"start":{"line":141,"column":8},"end":{"line":141,"column":24}},"86":{"start":{"line":144,"column":8},"end":{"line":172,"column":9}},"87":{"start":{"line":147,"column":33},"end":{"line":147,"column":126}},"88":{"start":{"line":147,"column":92},"end":{"line":147,"column":125}},"89":{"start":{"line":148,"column":16},"end":{"line":150,"column":17}},"90":{"start":{"line":149,"column":20},"end":{"line":149,"column":89}},"91":{"start":{"line":151,"column":16},"end":{"line":151,"column":112}},"92":{"start":{"line":156,"column":47},"end":{"line":156,"column":78}},"93":{"start":{"line":157,"column":31},"end":{"line":157,"column":83}},"94":{"start":{"line":158,"column":16},"end":{"line":162,"column":64}},"95":{"start":{"line":165,"column":16},"end":{"line":165,"column":73}},"96":{"start":{"line":167,"column":47},"end":{"line":167,"column":116}},"97":{"start":{"line":168,"column":16},"end":{"line":168,"column":135}},"98":{"start":{"line":171,"column":16},"end":{"line":171,"column":93}},"99":{"start":{"line":175,"column":24},"end":{"line":175,"column":75}},"100":{"start":{"line":176,"column":28},"end":{"line":176,"column":63}},"101":{"start":{"line":177,"column":8},"end":{"line":179,"column":9}},"102":{"start":{"line":178,"column":12},"end":{"line":178,"column":92}},"103":{"start":{"line":180,"column":20},"end":{"line":180,"column":74}},"104":{"start":{"line":181,"column":25},"end":{"line":181,"column":42}},"105":{"start":{"line":182,"column":8},"end":{"line":184,"column":9}},"106":{"start":{"line":183,"column":12},"end":{"line":183,"column":103}},"107":{"start":{"line":185,"column":8},"end":{"line":187,"column":9}},"108":{"start":{"line":186,"column":12},"end":{"line":186,"column":96}},"109":{"start":{"line":188,"column":8},"end":{"line":202,"column":9}},"110":{"start":{"line":189,"column":12},"end":{"line":191,"column":13}},"111":{"start":{"line":190,"column":16},"end":{"line":190,"column":87}},"112":{"start":{"line":192,"column":12},"end":{"line":192,"column":35}},"113":{"start":{"line":194,"column":13},"end":{"line":202,"column":9}},"114":{"start":{"line":195,"column":12},"end":{"line":197,"column":13}},"115":{"start":{"line":196,"column":16},"end":{"line":196,"column":87}},"116":{"start":{"line":198,"column":12},"end":{"line":198,"column":35}},"117":{"start":{"line":201,"column":12},"end":{"line":201,"column":111}},"118":{"start":{"line":205,"column":24},"end":{"line":205,"column":33}},"119":{"start":{"line":206,"column":8},"end":{"line":219,"column":9}},"120":{"start":{"line":207,"column":24},"end":{"line":214,"column":26}},"121":{"start":{"line":209,"column":34},"end":{"line":211,"column":32}},"122":{"start":{"line":212,"column":16},"end":{"line":212,"column":39}},"123":{"start":{"line":215,"column":12},"end":{"line":217,"column":13}},"124":{"start":{"line":216,"column":16},"end":{"line":216,"column":37}},"125":{"start":{"line":218,"column":12},"end":{"line":218,"column":40}},"126":{"start":{"line":220,"column":8},"end":{"line":220,"column":23}},"127":{"start":{"line":223,"column":33},"end":{"line":223,"column":48}},"128":{"start":{"line":224,"column":28},"end":{"line":224,"column":55}},"129":{"start":{"line":225,"column":24},"end":{"line":225,"column":26}},"130":{"start":{"line":226,"column":8},"end":{"line":232,"column":9}},"131":{"start":{"line":227,"column":27},"end":{"line":227,"column":67}},"132":{"start":{"line":228,"column":12},"end":{"line":230,"column":13}},"133":{"start":{"line":229,"column":16},"end":{"line":229,"column":64}},"134":{"start":{"line":231,"column":12},"end":{"line":231,"column":33}},"135":{"start":{"line":233,"column":8},"end":{"line":233,"column":23}},"136":{"start":{"line":236,"column":23},"end":{"line":236,"column":25}},"137":{"start":{"line":237,"column":29},"end":{"line":237,"column":37}},"138":{"start":{"line":238,"column":8},"end":{"line":243,"column":11}},"139":{"start":{"line":239,"column":30},"end":{"line":241,"column":26}},"140":{"start":{"line":242,"column":12},"end":{"line":242,"column":56}},"141":{"start":{"line":244,"column":8},"end":{"line":244,"column":22}},"142":{"start":{"line":247,"column":25},"end":{"line":247,"column":50}},"143":{"start":{"line":248,"column":28},"end":{"line":248,"column":47}},"144":{"start":{"line":249,"column":35},"end":{"line":249,"column":65}},"145":{"start":{"line":250,"column":26},"end":{"line":252,"column":19}},"146":{"start":{"line":253,"column":23},"end":{"line":253,"column":59}},"147":{"start":{"line":253,"column":43},"end":{"line":253,"column":58}},"148":{"start":{"line":254,"column":8},"end":{"line":272,"column":9}},"149":{"start":{"line":256,"column":16},"end":{"line":256,"column":76}},"150":{"start":{"line":257,"column":16},"end":{"line":257,"column":22}},"151":{"start":{"line":259,"column":16},"end":{"line":259,"column":76}},"152":{"start":{"line":260,"column":16},"end":{"line":260,"column":22}},"153":{"start":{"line":262,"column":16},"end":{"line":262,"column":76}},"154":{"start":{"line":263,"column":16},"end":{"line":263,"column":22}},"155":{"start":{"line":265,"column":16},"end":{"line":265,"column":78}},"156":{"start":{"line":266,"column":16},"end":{"line":266,"column":22}},"157":{"start":{"line":268,"column":16},"end":{"line":268,"column":76}},"158":{"start":{"line":269,"column":16},"end":{"line":269,"column":22}},"159":{"start":{"line":271,"column":16},"end":{"line":271,"column":93}},"160":{"start":{"line":275,"column":8},"end":{"line":275,"column":72}},"161":{"start":{"line":275,"column":45},"end":{"line":275,"column":70}},"162":{"start":{"line":278,"column":0},"end":{"line":278,"column":34}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":12,"column":4},"end":{"line":12,"column":5}},"loc":{"start":{"line":12,"column":26},"end":{"line":14,"column":5}},"line":12},"1":{"name":"(anonymous_1)","decl":{"start":{"line":15,"column":4},"end":{"line":15,"column":5}},"loc":{"start":{"line":15,"column":33},"end":{"line":40,"column":5}},"line":15},"2":{"name":"(anonymous_2)","decl":{"start":{"line":39,"column":31},"end":{"line":39,"column":32}},"loc":{"start":{"line":39,"column":41},"end":{"line":39,"column":67}},"line":39},"3":{"name":"(anonymous_3)","decl":{"start":{"line":41,"column":4},"end":{"line":41,"column":5}},"loc":{"start":{"line":41,"column":26},"end":{"line":57,"column":5}},"line":41},"4":{"name":"(anonymous_4)","decl":{"start":{"line":44,"column":37},"end":{"line":44,"column":38}},"loc":{"start":{"line":44,"column":49},"end":{"line":55,"column":9}},"line":44},"5":{"name":"(anonymous_5)","decl":{"start":{"line":58,"column":4},"end":{"line":58,"column":5}},"loc":{"start":{"line":58,"column":23},"end":{"line":90,"column":5}},"line":58},"6":{"name":"(anonymous_6)","decl":{"start":{"line":62,"column":22},"end":{"line":62,"column":23}},"loc":{"start":{"line":62,"column":32},"end":{"line":87,"column":13}},"line":62},"7":{"name":"(anonymous_7)","decl":{"start":{"line":91,"column":4},"end":{"line":91,"column":5}},"loc":{"start":{"line":91,"column":28},"end":{"line":98,"column":5}},"line":91},"8":{"name":"(anonymous_8)","decl":{"start":{"line":99,"column":4},"end":{"line":99,"column":5}},"loc":{"start":{"line":99,"column":25},"end":{"line":124,"column":5}},"line":99},"9":{"name":"(anonymous_9)","decl":{"start":{"line":125,"column":4},"end":{"line":125,"column":5}},"loc":{"start":{"line":125,"column":39},"end":{"line":142,"column":5}},"line":125},"10":{"name":"(anonymous_10)","decl":{"start":{"line":140,"column":27},"end":{"line":140,"column":28}},"loc":{"start":{"line":140,"column":44},"end":{"line":140,"column":93}},"line":140},"11":{"name":"(anonymous_11)","decl":{"start":{"line":143,"column":4},"end":{"line":143,"column":5}},"loc":{"start":{"line":143,"column":38},"end":{"line":173,"column":5}},"line":143},"12":{"name":"(anonymous_12)","decl":{"start":{"line":147,"column":85},"end":{"line":147,"column":86}},"loc":{"start":{"line":147,"column":92},"end":{"line":147,"column":125}},"line":147},"13":{"name":"(anonymous_13)","decl":{"start":{"line":174,"column":4},"end":{"line":174,"column":5}},"loc":{"start":{"line":174,"column":40},"end":{"line":203,"column":5}},"line":174},"14":{"name":"(anonymous_14)","decl":{"start":{"line":204,"column":4},"end":{"line":204,"column":5}},"loc":{"start":{"line":204,"column":31},"end":{"line":221,"column":5}},"line":204},"15":{"name":"(anonymous_15)","decl":{"start":{"line":208,"column":21},"end":{"line":208,"column":22}},"loc":{"start":{"line":208,"column":37},"end":{"line":213,"column":13}},"line":208},"16":{"name":"(anonymous_16)","decl":{"start":{"line":222,"column":4},"end":{"line":222,"column":5}},"loc":{"start":{"line":222,"column":48},"end":{"line":234,"column":5}},"line":222},"17":{"name":"(anonymous_17)","decl":{"start":{"line":235,"column":4},"end":{"line":235,"column":5}},"loc":{"start":{"line":235,"column":40},"end":{"line":245,"column":5}},"line":235},"18":{"name":"(anonymous_18)","decl":{"start":{"line":238,"column":22},"end":{"line":238,"column":23}},"loc":{"start":{"line":238,"column":36},"end":{"line":243,"column":9}},"line":238},"19":{"name":"(anonymous_19)","decl":{"start":{"line":246,"column":4},"end":{"line":246,"column":5}},"loc":{"start":{"line":246,"column":47},"end":{"line":273,"column":5}},"line":246},"20":{"name":"(anonymous_20)","decl":{"start":{"line":253,"column":33},"end":{"line":253,"column":34}},"loc":{"start":{"line":253,"column":43},"end":{"line":253,"column":58}},"line":253},"21":{"name":"(anonymous_21)","decl":{"start":{"line":274,"column":4},"end":{"line":274,"column":5}},"loc":{"start":{"line":274,"column":33},"end":{"line":276,"column":5}},"line":274},"22":{"name":"(anonymous_22)","decl":{"start":{"line":275,"column":30},"end":{"line":275,"column":31}},"loc":{"start":{"line":275,"column":45},"end":{"line":275,"column":70}},"line":275}},"branchMap":{"0":{"loc":{"start":{"line":23,"column":8},"end":{"line":26,"column":9}},"type":"if","locations":[{"start":{"line":23,"column":8},"end":{"line":26,"column":9}},{"start":{"line":23,"column":8},"end":{"line":26,"column":9}}],"line":23},"1":{"loc":{"start":{"line":31,"column":8},"end":{"line":34,"column":9}},"type":"if","locations":[{"start":{"line":31,"column":8},"end":{"line":34,"column":9}},{"start":{"line":31,"column":8},"end":{"line":34,"column":9}}],"line":31},"2":{"loc":{"start":{"line":35,"column":8},"end":{"line":37,"column":9}},"type":"if","locations":[{"start":{"line":35,"column":8},"end":{"line":37,"column":9}},{"start":{"line":35,"column":8},"end":{"line":37,"column":9}}],"line":35},"3":{"loc":{"start":{"line":46,"column":12},"end":{"line":54,"column":13}},"type":"if","locations":[{"start":{"line":46,"column":12},"end":{"line":54,"column":13}},{"start":{"line":46,"column":12},"end":{"line":54,"column":13}}],"line":46},"4":{"loc":{"start":{"line":59,"column":8},"end":{"line":88,"column":9}},"type":"if","locations":[{"start":{"line":59,"column":8},"end":{"line":88,"column":9}},{"start":{"line":59,"column":8},"end":{"line":88,"column":9}}],"line":59},"5":{"loc":{"start":{"line":61,"column":30},"end":{"line":61,"column":51}},"type":"cond-expr","locations":[{"start":{"line":61,"column":45},"end":{"line":61,"column":46}},{"start":{"line":61,"column":49},"end":{"line":61,"column":51}}],"line":61},"6":{"loc":{"start":{"line":66,"column":20},"end":{"line":84,"column":21}},"type":"if","locations":[{"start":{"line":66,"column":20},"end":{"line":84,"column":21}},{"start":{"line":66,"column":20},"end":{"line":84,"column":21}}],"line":66},"7":{"loc":{"start":{"line":66,"column":24},"end":{"line":66,"column":80}},"type":"binary-expr","locations":[{"start":{"line":66,"column":24},"end":{"line":66,"column":50}},{"start":{"line":66,"column":54},"end":{"line":66,"column":80}}],"line":66},"8":{"loc":{"start":{"line":67,"column":24},"end":{"line":69,"column":25}},"type":"if","locations":[{"start":{"line":67,"column":24},"end":{"line":69,"column":25}},{"start":{"line":67,"column":24},"end":{"line":69,"column":25}}],"line":67},"9":{"loc":{"start":{"line":70,"column":24},"end":{"line":72,"column":25}},"type":"if","locations":[{"start":{"line":70,"column":24},"end":{"line":72,"column":25}},{"start":{"line":70,"column":24},"end":{"line":72,"column":25}}],"line":70},"10":{"loc":{"start":{"line":74,"column":25},"end":{"line":84,"column":21}},"type":"if","locations":[{"start":{"line":74,"column":25},"end":{"line":84,"column":21}},{"start":{"line":74,"column":25},"end":{"line":84,"column":21}}],"line":74},"11":{"loc":{"start":{"line":74,"column":29},"end":{"line":74,"column":85}},"type":"binary-expr","locations":[{"start":{"line":74,"column":29},"end":{"line":74,"column":55}},{"start":{"line":74,"column":59},"end":{"line":74,"column":85}}],"line":74},"12":{"loc":{"start":{"line":75,"column":24},"end":{"line":77,"column":25}},"type":"if","locations":[{"start":{"line":75,"column":24},"end":{"line":77,"column":25}},{"start":{"line":75,"column":24},"end":{"line":77,"column":25}}],"line":75},"13":{"loc":{"start":{"line":78,"column":24},"end":{"line":80,"column":25}},"type":"if","locations":[{"start":{"line":78,"column":24},"end":{"line":80,"column":25}},{"start":{"line":78,"column":24},"end":{"line":80,"column":25}}],"line":78},"14":{"loc":{"start":{"line":93,"column":8},"end":{"line":96,"column":9}},"type":"if","locations":[{"start":{"line":93,"column":8},"end":{"line":96,"column":9}},{"start":{"line":93,"column":8},"end":{"line":96,"column":9}}],"line":93},"15":{"loc":{"start":{"line":102,"column":8},"end":{"line":104,"column":9}},"type":"if","locations":[{"start":{"line":102,"column":8},"end":{"line":104,"column":9}},{"start":{"line":102,"column":8},"end":{"line":104,"column":9}}],"line":102},"16":{"loc":{"start":{"line":108,"column":8},"end":{"line":110,"column":9}},"type":"if","locations":[{"start":{"line":108,"column":8},"end":{"line":110,"column":9}},{"start":{"line":108,"column":8},"end":{"line":110,"column":9}}],"line":108},"17":{"loc":{"start":{"line":112,"column":8},"end":{"line":120,"column":9}},"type":"if","locations":[{"start":{"line":112,"column":8},"end":{"line":120,"column":9}},{"start":{"line":112,"column":8},"end":{"line":120,"column":9}}],"line":112},"18":{"loc":{"start":{"line":115,"column":13},"end":{"line":120,"column":9}},"type":"if","locations":[{"start":{"line":115,"column":13},"end":{"line":120,"column":9}},{"start":{"line":115,"column":13},"end":{"line":120,"column":9}}],"line":115},"19":{"loc":{"start":{"line":136,"column":8},"end":{"line":138,"column":9}},"type":"if","locations":[{"start":{"line":136,"column":8},"end":{"line":138,"column":9}},{"start":{"line":136,"column":8},"end":{"line":138,"column":9}}],"line":136},"20":{"loc":{"start":{"line":144,"column":8},"end":{"line":172,"column":9}},"type":"switch","locations":[{"start":{"line":145,"column":12},"end":{"line":145,"column":53}},{"start":{"line":146,"column":12},"end":{"line":152,"column":13}},{"start":{"line":153,"column":12},"end":{"line":153,"column":61}},{"start":{"line":154,"column":12},"end":{"line":154,"column":67}},{"start":{"line":155,"column":12},"end":{"line":163,"column":13}},{"start":{"line":164,"column":12},"end":{"line":165,"column":73}},{"start":{"line":166,"column":12},"end":{"line":169,"column":13}},{"start":{"line":170,"column":12},"end":{"line":171,"column":93}}],"line":144},"21":{"loc":{"start":{"line":148,"column":16},"end":{"line":150,"column":17}},"type":"if","locations":[{"start":{"line":148,"column":16},"end":{"line":150,"column":17}},{"start":{"line":148,"column":16},"end":{"line":150,"column":17}}],"line":148},"22":{"loc":{"start":{"line":151,"column":23},"end":{"line":151,"column":111}},"type":"cond-expr","locations":[{"start":{"line":151,"column":69},"end":{"line":151,"column":89}},{"start":{"line":151,"column":92},"end":{"line":151,"column":111}}],"line":151},"23":{"loc":{"start":{"line":158,"column":23},"end":{"line":162,"column":63}},"type":"cond-expr","locations":[{"start":{"line":159,"column":22},"end":{"line":159,"column":54}},{"start":{"line":160,"column":22},"end":{"line":162,"column":63}}],"line":158},"24":{"loc":{"start":{"line":160,"column":22},"end":{"line":162,"column":63}},"type":"cond-expr","locations":[{"start":{"line":161,"column":26},"end":{"line":161,"column":60}},{"start":{"line":162,"column":26},"end":{"line":162,"column":63}}],"line":160},"25":{"loc":{"start":{"line":177,"column":8},"end":{"line":179,"column":9}},"type":"if","locations":[{"start":{"line":177,"column":8},"end":{"line":179,"column":9}},{"start":{"line":177,"column":8},"end":{"line":179,"column":9}}],"line":177},"26":{"loc":{"start":{"line":182,"column":8},"end":{"line":184,"column":9}},"type":"if","locations":[{"start":{"line":182,"column":8},"end":{"line":184,"column":9}},{"start":{"line":182,"column":8},"end":{"line":184,"column":9}}],"line":182},"27":{"loc":{"start":{"line":185,"column":8},"end":{"line":187,"column":9}},"type":"if","locations":[{"start":{"line":185,"column":8},"end":{"line":187,"column":9}},{"start":{"line":185,"column":8},"end":{"line":187,"column":9}}],"line":185},"28":{"loc":{"start":{"line":188,"column":8},"end":{"line":202,"column":9}},"type":"if","locations":[{"start":{"line":188,"column":8},"end":{"line":202,"column":9}},{"start":{"line":188,"column":8},"end":{"line":202,"column":9}}],"line":188},"29":{"loc":{"start":{"line":189,"column":12},"end":{"line":191,"column":13}},"type":"if","locations":[{"start":{"line":189,"column":12},"end":{"line":191,"column":13}},{"start":{"line":189,"column":12},"end":{"line":191,"column":13}}],"line":189},"30":{"loc":{"start":{"line":194,"column":13},"end":{"line":202,"column":9}},"type":"if","locations":[{"start":{"line":194,"column":13},"end":{"line":202,"column":9}},{"start":{"line":194,"column":13},"end":{"line":202,"column":9}}],"line":194},"31":{"loc":{"start":{"line":195,"column":12},"end":{"line":197,"column":13}},"type":"if","locations":[{"start":{"line":195,"column":12},"end":{"line":197,"column":13}},{"start":{"line":195,"column":12},"end":{"line":197,"column":13}}],"line":195},"32":{"loc":{"start":{"line":209,"column":34},"end":{"line":211,"column":32}},"type":"cond-expr","locations":[{"start":{"line":210,"column":22},"end":{"line":210,"column":79}},{"start":{"line":211,"column":22},"end":{"line":211,"column":32}}],"line":209},"33":{"loc":{"start":{"line":215,"column":12},"end":{"line":217,"column":13}},"type":"if","locations":[{"start":{"line":215,"column":12},"end":{"line":217,"column":13}},{"start":{"line":215,"column":12},"end":{"line":217,"column":13}}],"line":215},"34":{"loc":{"start":{"line":239,"column":30},"end":{"line":241,"column":26}},"type":"cond-expr","locations":[{"start":{"line":240,"column":18},"end":{"line":240,"column":73}},{"start":{"line":241,"column":18},"end":{"line":241,"column":26}}],"line":239},"35":{"loc":{"start":{"line":250,"column":26},"end":{"line":252,"column":19}},"type":"cond-expr","locations":[{"start":{"line":251,"column":14},"end":{"line":251,"column":66}},{"start":{"line":252,"column":14},"end":{"line":252,"column":19}}],"line":250},"36":{"loc":{"start":{"line":254,"column":8},"end":{"line":272,"column":9}},"type":"switch","locations":[{"start":{"line":255,"column":12},"end":{"line":257,"column":22}},{"start":{"line":258,"column":12},"end":{"line":260,"column":22}},{"start":{"line":261,"column":12},"end":{"line":263,"column":22}},{"start":{"line":264,"column":12},"end":{"line":266,"column":22}},{"start":{"line":267,"column":12},"end":{"line":269,"column":22}},{"start":{"line":270,"column":12},"end":{"line":271,"column":93}}],"line":254}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":85,"8":85,"9":83,"10":78,"11":78,"12":4,"13":4,"14":78,"15":78,"16":68,"17":39,"18":39,"19":4,"20":4,"21":39,"22":3,"23":36,"24":36,"25":12818,"26":12818,"27":12818,"28":12818,"29":49546,"30":219,"31":219,"32":49327,"33":49327,"34":49327,"35":12818,"36":36,"37":25,"38":25,"39":25,"40":79828,"41":80754,"42":80754,"43":80754,"44":56950,"45":28970,"46":27980,"47":18256,"48":23804,"49":23804,"50":4110,"51":19694,"52":13187,"53":0,"54":15305,"55":36,"56":161508,"57":161508,"58":161500,"59":161500,"60":8,"61":68,"62":68,"63":68,"64":0,"65":68,"66":68,"67":68,"68":68,"69":0,"70":68,"71":66,"72":2,"73":2,"74":0,"75":68,"76":41,"77":39,"78":262,"79":261,"80":260,"81":1,"82":259,"83":259,"84":257,"85":195,"86":257,"87":79,"88":176,"89":41,"90":1,"91":40,"92":100,"93":88,"94":81,"95":18,"96":60,"97":58,"98":0,"99":160,"100":160,"101":160,"102":4,"103":156,"104":156,"105":156,"106":5,"107":151,"108":0,"109":151,"110":89,"111":1,"112":88,"113":62,"114":62,"115":4,"116":58,"117":0,"118":4,"119":4,"120":80927,"121":80927,"122":80927,"123":80927,"124":219,"125":80927,"126":4,"127":4,"128":4,"129":4,"130":4,"131":219,"132":219,"133":219,"134":219,"135":4,"136":219,"137":219,"138":219,"139":219,"140":219,"141":219,"142":219,"143":219,"144":219,"145":219,"146":219,"147":80927,"148":219,"149":3,"150":3,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":216,"158":216,"159":0,"160":4,"161":4,"162":1},"f":{"0":85,"1":85,"2":12818,"3":12818,"4":49546,"5":36,"6":79828,"7":161508,"8":68,"9":262,"10":257,"11":257,"12":176,"13":160,"14":4,"15":80927,"16":4,"17":219,"18":219,"19":219,"20":80927,"21":4,"22":4},"b":{"0":[4,74],"1":[4,35],"2":[3,36],"3":[219,49327],"4":[25,11],"5":[20,5],"6":[56950,23804],"7":[80754,56950],"8":[28970,27980],"9":[18256,9724],"10":[23804,0],"11":[23804,23804],"12":[4110,19694],"13":[13187,6507],"14":[161500,8],"15":[0,68],"16":[0,68],"17":[66,2],"18":[2,0],"19":[1,259],"20":[57,79,21,70,100,18,60,0],"21":[1,40],"22":[32,8],"23":[15,66],"24":[25,41],"25":[4,156],"26":[5,151],"27":[0,151],"28":[89,62],"29":[1,88],"30":[62,0],"31":[4,58],"32":[80927,0],"33":[219,80708],"34":[219,0],"35":[219,0],"36":[3,0,0,0,216,0]},"inputSourceMap":{"version":3,"file":"/Users/fegicochen/Courses/CPSC 310/C1/project_team085/src/controller/QueryEngine.ts","sources":["/Users/fegicochen/Courses/CPSC 310/C1/project_team085/src/controller/QueryEngine.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n\tSection,\n\tDatasetsProvider,\n\tDatasetUtils,\n\tInsightFacadeKey,\n\tKeywords,\n\tOptionsState,\n\tmaxResults,\n\tTransformations,\n\tApplyRule,\n\tRoomsDataset,\n\tSectionsDataset,\n\tRoom,\n} from \"./Dataset\";\nimport { FilterByDataset, FilterStrategy, FilterOperationByDataset } from \"./Filter\";\nimport { InsightError, InsightResult, ResultTooLargeError, InsightDatasetKind } from \"./IInsightFacade\";\nimport { calculateMax, calculateMin, calculateSum, calculateCount, calculateAvg } from \"./Calculations\";\nimport { OptionsProcessor } from \"./OptionsProcessor\";\n\nexport class QueryEngine {\n\tprivate readonly datasets: DatasetsProvider;\n\tprivate options?: OptionsState;\n\n\tconstructor(datasets: DatasetsProvider) {\n\t\tthis.datasets = datasets;\n\t}\n\n\t/**\n\t *\n\t * @param query The query object in accordance with IInsightFacade.performQuery\n\t * @throws InsightError if query is improperly formed\n\t */\n\tpublic async processQuery(queryRaw: unknown): Promise<InsightResult[]> {\n\t\tconst query = DatasetUtils.checkIsObject(\"Query\", queryRaw);\n\t\tconst rootStructure = DatasetUtils.requireExactKeys(query, [\n\t\t\t[Keywords.Options, true],\n\t\t\t[Keywords.Body, true],\n\t\t\t[Keywords.Transformations, false],\n\t\t]);\n\n\t\tlet applyKeys: string[] = [];\n\n\t\tif (rootStructure.has(Keywords.Transformations)) {\n\t\t\tconst transformations = rootStructure.get(Keywords.Transformations) as Transformations;\n\t\t\tapplyKeys = this.extractApplyKeys(transformations.APPLY);\n\t\t}\n\n\t\tconst optionsProcessor = new OptionsProcessor(rootStructure.get(Keywords.Options), applyKeys);\n\t\tthis.options = optionsProcessor.processOptions();\n\n\t\tconst data = this.processBody(rootStructure.get(Keywords.Body));\n\n\t\tlet transformedData = data;\n\n\t\tif (rootStructure.has(Keywords.Transformations)) {\n\t\t\tconst transformations = rootStructure.get(Keywords.Transformations) as Transformations;\n\t\t\ttransformedData = this.applyTransformations(data, transformations);\n\t\t}\n\n\t\tif (transformedData.length > maxResults) {\n\t\t\tthrow new ResultTooLargeError();\n\t\t}\n\n\t\tconst orderedData = this.orderResults(transformedData);\n\n\t\treturn orderedData.map((item) => this.toInsightResult(item));\n\t}\n\n\t/**\n\t * Converts an item to an InsightResult based on selected columns.\n\t * @param item The data item (Section or Room)\n\t * @returns The formatted InsightResult\n\t */\n\tprivate toInsightResult(item: any): InsightResult {\n\t\tconst result: InsightResult = {};\n\t\tconst itemWithKeys = item as Record<string, any>;\n\n\t\tthis.options!.columns.forEach((column) => {\n\t\t\tlet value: any;\n\t\t\tif (column.kind === \"\") {\n\t\t\t\tvalue = itemWithKeys[column.field];\n\t\t\t\tresult[column.field] = value;\n\t\t\t} else {\n\t\t\t\tconst fieldName = column.field;\n\t\t\t\tvalue = itemWithKeys[fieldName];\n\t\t\t\tresult[`${column.kind}_${fieldName}`] = value;\n\t\t\t}\n\t\t});\n\t\treturn result;\n\t}\n\n\t/**\n\t * Orders the data based on the ORDER specification.\n\t * @param data The data to sort\n\t * @returns The sorted data\n\t */\n\tprivate orderResults(data: any[]): any[] {\n\t\tif (this.options!.order) {\n\t\t\tconst { dir, keys } = this.options!.order!;\n\t\t\tconst direction = dir === \"UP\" ? 1 : -1;\n\n\t\t\tdata.sort((a, b) => {\n\t\t\t\tfor (const key of keys) {\n\t\t\t\t\tconst aValue = this.extractValue(a, key);\n\t\t\t\t\tconst bValue = this.extractValue(b, key);\n\n\t\t\t\t\tif (typeof aValue === \"number\" && typeof bValue === \"number\") {\n\t\t\t\t\t\tif (aValue < bValue) {\n\t\t\t\t\t\t\treturn -1 * direction;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (aValue > bValue) {\n\t\t\t\t\t\t\treturn 1 * direction;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (typeof aValue === \"string\" && typeof bValue === \"string\") {\n\t\t\t\t\t\tif (aValue < bValue) {\n\t\t\t\t\t\t\treturn -1 * direction;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (aValue > bValue) {\n\t\t\t\t\t\t\treturn 1 * direction;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new InsightError(\"Incompatible types for ordering.\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn 0;\n\t\t\t});\n\t\t}\n\n\t\treturn data;\n\t}\n\n\t// Helper method to extract the value from an item based on the key\n\tprivate extractValue(item: any, key: string): any {\n\t\tconst datasetPrefix = this.options!.datasetKind + \"_\";\n\t\tif (key.startsWith(datasetPrefix)) {\n\t\t\tconst fieldName = key.substring(datasetPrefix.length);\n\t\t\treturn item[fieldName];\n\t\t}\n\t\treturn item[key];\n\t}\n\n\t/**\n\t * Processes the WHERE part of the query to filter data.\n\t * @param bodyRaw The raw WHERE object\n\t * @returns The filtered data\n\t */\n\tprivate processBody(bodyRaw: unknown): any[] {\n\t\tconst body = DatasetUtils.checkIsObject(Keywords.Body, bodyRaw);\n\n\t\t// Determine the dataset based on the fields used in the query\n\t\tconst columns = this.options!.columns;\n\t\tif (columns.length === 0) {\n\t\t\tthrow new InsightError(\"No columns specified in the query.\");\n\t\t}\n\n\t\t// Extract dataset kind from the first column\n\t\tconst firstColumn = columns[0];\n\t\tconst datasetKind = firstColumn.kind;\n\t\tconst dataset = DatasetUtils.findDatasetByKind(this.datasets, datasetKind);\n\n\t\tif (dataset === undefined) {\n\t\t\tthrow new InsightError(`Could not find dataset with kind: ${datasetKind}.`);\n\t\t}\n\n\t\tlet filter: FilterStrategy<any, FilterOperationByDataset<any>>;\n\n\t\tif (dataset.type === InsightDatasetKind.Sections) {\n\t\t\tfilter = new FilterByDataset<Section>(dataset as SectionsDataset);\n\t\t} else if (dataset.type === InsightDatasetKind.Rooms) {\n\t\t\tfilter = new FilterByDataset<Room>(dataset as RoomsDataset);\n\t\t} else {\n\t\t\tthrow new InsightError(\"Unsupported dataset kind.\");\n\t\t}\n\n\t\tconst filterFunction = this.checkSingleFilter(filter, body);\n\n\t\tconst filteredData = filterFunction.apply();\n\n\t\treturn filteredData;\n\t}\n\n\t/**\n\t * Takes a query body and constructs a filter operation.\n\t *\n\t * @param filter the filter object used\n\t * @param bodyRaw the raw body to check\n\t * @returns A filter operation representing the given body and filter\n\t * @throws InsightError if bodyRaw is improperly formatted\n\t */\n\tprivate checkSingleFilter(\n\t\tfilter: FilterStrategy<any, FilterOperationByDataset<any>>,\n\t\tbodyRaw: unknown\n\t): FilterOperationByDataset<any> {\n\t\t// Retrieve body and ensure it is an object\n\t\tconst body = DatasetUtils.checkIsObject(Keywords.Body, bodyRaw);\n\n\t\t// Break down by property name\n\t\tconst mappedKeys = DatasetUtils.requireExactKeys(body, [\n\t\t\t[Keywords.Filter.Logic.And, false],\n\t\t\t[Keywords.Filter.Logic.Or, false],\n\t\t\t[Keywords.Filter.MComparator.Equal, false],\n\t\t\t[Keywords.Filter.MComparator.GreaterThan, false],\n\t\t\t[Keywords.Filter.MComparator.LessThan, false],\n\t\t\t[Keywords.Filter.Negation.Not, false],\n\t\t\t[Keywords.Filter.SComparator.Is, false],\n\t\t]);\n\n\t\t// Only one root filter can be applied\n\t\tif (mappedKeys.size > 1) {\n\t\t\tthrow new InsightError(\"Can only have 1 filter applied here: \" + JSON.stringify(mappedKeys) + \".\");\n\t\t}\n\n\t\t// Base case filter: return everything\n\t\tlet filterOp = filter.all();\n\n\t\t// This will run 1 or 0 times\n\t\tmappedKeys.forEach((value, key) => (filterOp = this.processFilter(filter, key, value)));\n\n\t\treturn filterOp;\n\t}\n\n\t/**\n\t *\n\t * @param filter the filter object used\n\t * @param key the filter key to check\n\t * @param value the value of the filter key in the query object\n\t * @returns A filter operation for the given key and children\n\t * @throws InsightError if the provided key could not be processed correctly\n\t */\n\tprivate processFilter(\n\t\tfilter: FilterStrategy<any, FilterOperationByDataset<any>>,\n\t\tkey: string,\n\t\tvalue: unknown\n\t): FilterOperationByDataset<any> {\n\t\tswitch (key) {\n\t\t\tcase Keywords.Filter.Logic.And:\n\t\t\tcase Keywords.Filter.Logic.Or: {\n\t\t\t\tconst children = DatasetUtils.checkIsArray(key, value).map((e) => this.checkSingleFilter(filter, e));\n\t\t\t\tif (children.length === 0) {\n\t\t\t\t\tthrow new InsightError(`${key} must have children`);\n\t\t\t\t}\n\t\t\t\treturn key === Keywords.Filter.Logic.And ? filter.and(children) : filter.or(children);\n\t\t\t}\n\t\t\tcase Keywords.Filter.MComparator.Equal:\n\t\t\tcase Keywords.Filter.MComparator.GreaterThan:\n\t\t\tcase Keywords.Filter.MComparator.LessThan: {\n\t\t\t\tconst [columnKey, filterVal] = this.checkKey(key, value, true);\n\t\t\t\tconst valNum = DatasetUtils.checkIsNumber(key, filterVal);\n\t\t\t\treturn key === Keywords.Filter.MComparator.Equal\n\t\t\t\t\t? filter.equals(valNum, columnKey)\n\t\t\t\t\t: key === Keywords.Filter.MComparator.LessThan\n\t\t\t\t\t? filter.lessThan(valNum, columnKey)\n\t\t\t\t\t: filter.greaterThan(valNum, columnKey);\n\t\t\t}\n\t\t\tcase Keywords.Filter.Negation.Not:\n\t\t\t\treturn filter.not(this.checkSingleFilter(filter, value));\n\t\t\tcase Keywords.Filter.SComparator.Is: {\n\t\t\t\tconst [columnKey, filterVal] = this.checkKey(Keywords.Filter.SComparator.Is, value, false);\n\t\t\t\treturn filter.is(DatasetUtils.checkIsString(Keywords.Filter.SComparator.Is, filterVal), columnKey);\n\t\t\t}\n\t\t\tdefault:\n\t\t\t\tthrow new InsightError(`Filter key not recognized: ${key}`);\n\t\t}\n\t}\n\n\t/**\n\t *\n\t * @param type the key type checking under (ie. Keywords.Filter.MComparator.Equal)\n\t * @param bodyRaw the raw body under this key (ie. { \"key\": \"value\" })\n\t * @param mkeyOrSKey true if mkey false if skey\n\t * @returns a tuple of the parsed key and value\n\t */\n\tprivate checkKey(type: string, bodyRaw: unknown, mkeyOrSKey: boolean): [InsightFacadeKey, unknown] {\n\t\t// Ensure child is an object\n\t\tconst keyBody = DatasetUtils.checkIsObject(type, bodyRaw);\n\t\t// Ensure body has a single key value pair\n\t\tconst bodyEntries = Array.from(Object.entries(keyBody));\n\t\tif (bodyEntries.length !== 1) {\n\t\t\tthrow new InsightError(\"Expected one entry in an mkey field.\");\n\t\t}\n\n\t\t// Check that entry has properly formatted key and value\n\t\tconst key = DatasetUtils.parseMOrSKey(bodyEntries[0][0]);\n\t\tconst keyValue = bodyEntries[0][1];\n\n\t\tif (key === undefined) {\n\t\t\tthrow new InsightError(\"Improper structure of key: \" + bodyEntries[0][0]);\n\t\t}\n\n\t\t// Check for multi datasets used\n\t\tif (this.options!.datasetKind !== key.kind) {\n\t\t\tthrow new InsightError(\"Only one dataset can be used in a query.\");\n\t\t}\n\n\t\tif (DatasetUtils.isMKey(key)) {\n\t\t\tif (!mkeyOrSKey) {\n\t\t\t\tthrow new InsightError(\"Expected mkey but got skey.\");\n\t\t\t}\n\t\t\treturn [key, keyValue];\n\t\t} else if (DatasetUtils.isSKey(key)) {\n\t\t\tif (mkeyOrSKey) {\n\t\t\t\tthrow new InsightError(\"Expected skey but got mkey.\");\n\t\t\t}\n\t\t\treturn [key, keyValue];\n\t\t} else {\n\t\t\tthrow new InsightError(\"Unexpected key type: \" + type + \", \" + bodyEntries[0][0]);\n\t\t}\n\t}\n\n\t/**\n\t *\n\t * @param data the array of objects to be grouped\n\t * @param groupKeys the keys on which to base the grouping\n\t * @returns a map where each key is a unique string made up of values from groupkeys\n\t */\n\tprivate groupData<T extends object>(data: T[], groupKeys: string[]): Map<string, T[]> {\n\t\tconst grouped = new Map<string, T[]>();\n\n\t\tfor (const item of data) {\n\t\t\tconst key = groupKeys\n\t\t\t\t.map((keyOfGroup) => {\n\t\t\t\t\tconst fieldName = keyOfGroup.startsWith(this.options!.datasetKind + \"_\")\n\t\t\t\t\t\t? keyOfGroup.substring(this.options!.datasetKind.length + 1)\n\t\t\t\t\t\t: keyOfGroup;\n\t\t\t\t\treturn (item as Record<string, any>)[fieldName];\n\t\t\t\t})\n\t\t\t\t.join(\"-\");\n\n\t\t\tif (!grouped.has(key)) {\n\t\t\t\tgrouped.set(key, []);\n\t\t\t}\n\t\t\tgrouped.get(key)!.push(item);\n\t\t}\n\n\t\treturn grouped;\n\t}\n\n\tprivate applyTransformations(data: any[], transformations: Transformations): any[] {\n\t\t// 'any' because it can be Section or Room\n\t\tconst { GROUP, APPLY } = transformations;\n\t\tconst groupedData = this.groupData(data, GROUP);\n\n\t\tconst results: any[] = [];\n\t\tfor (const [, items] of groupedData.entries()) {\n\t\t\tconst result = this.initializeGroupResult(GROUP, items);\n\n\t\t\t// Process each APPLY rule\n\t\t\tfor (const applyRule of APPLY) {\n\t\t\t\tthis.processApplyRule(applyRule, items, result);\n\t\t\t}\n\n\t\t\tresults.push(result);\n\t\t}\n\n\t\treturn results;\n\t}\n\n\t// Initializes the result object with group keys\n\tprivate initializeGroupResult<T extends object>(GROUP: string[], items: T[]): any {\n\t\t// 'any' because it can be Section or Room\n\t\tconst result: any = {};\n\t\tconst itemWithKeys = items[0] as Record<string, any>;\n\t\tGROUP.forEach((groupKey) => {\n\t\t\tconst fieldName = groupKey.startsWith(this.options!.datasetKind + \"_\")\n\t\t\t\t? groupKey.substring(this.options!.datasetKind.length + 1)\n\t\t\t\t: groupKey;\n\t\t\tresult[fieldName] = itemWithKeys[fieldName];\n\t\t});\n\t\treturn result;\n\t}\n\n\t// Processes a single APPLY rule and modifies the result object\n\tprivate processApplyRule(applyRule: ApplyRule, items: any[], result: any): void {\n\t\t// 'any' because it can be Section or Room\n\t\tconst applyKey = Object.keys(applyRule)[0];\n\t\tconst applyObject = applyRule[applyKey];\n\t\tconst [operation, field] = Object.entries(applyObject)[0];\n\n\t\t// Remove dataset ID prefix from field name if present\n\t\tconst fieldName = field.startsWith(this.options!.datasetKind + \"_\")\n\t\t\t? field.substring(this.options!.datasetKind.length + 1)\n\t\t\t: field;\n\n\t\tconst values = items.map((item) => (item as Record<string, any>)[fieldName]);\n\n\t\tswitch (operation) {\n\t\t\tcase Keywords.ApplyToken.Max:\n\t\t\t\tresult[applyKey] = calculateMax(values);\n\t\t\t\tbreak;\n\t\t\tcase Keywords.ApplyToken.Min:\n\t\t\t\tresult[applyKey] = calculateMin(values);\n\t\t\t\tbreak;\n\t\t\tcase Keywords.ApplyToken.Sum:\n\t\t\t\tresult[applyKey] = calculateSum(values);\n\t\t\t\tbreak;\n\t\t\tcase Keywords.ApplyToken.Count:\n\t\t\t\tresult[applyKey] = calculateCount(values);\n\t\t\t\tbreak;\n\t\t\tcase Keywords.ApplyToken.Avg:\n\t\t\t\tresult[applyKey] = calculateAvg(values);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new InsightError(`Invalid APPLY token: ${operation}`);\n\t\t}\n\t}\n\n\tprivate extractApplyKeys(applyArray: ApplyRule[]): string[] {\n\t\treturn applyArray.map((applyRule) => Object.keys(applyRule)[0]);\n\t}\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"a25b651aebfacb28cb754b24f6284d5cef0e1d96","contentHash":"9d1c5538307886e1be824bbb26a74360866fea3b3e032dbe74d4ead5d3711883"},"/Users/fegicochen/Courses/CPSC 310/C1/project_team085/src/controller/Filter.ts":{"path":"/Users/fegicochen/Courses/CPSC 310/C1/project_team085/src/controller/Filter.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":68}},"2":{"start":{"line":4,"column":25},"end":{"line":4,"column":52}},"3":{"start":{"line":6,"column":0},"end":{"line":15,"column":36}},"4":{"start":{"line":7,"column":4},"end":{"line":7,"column":46}},"5":{"start":{"line":8,"column":4},"end":{"line":8,"column":44}},"6":{"start":{"line":9,"column":4},"end":{"line":9,"column":56}},"7":{"start":{"line":10,"column":4},"end":{"line":10,"column":62}},"8":{"start":{"line":11,"column":4},"end":{"line":11,"column":52}},"9":{"start":{"line":12,"column":4},"end":{"line":12,"column":44}},"10":{"start":{"line":13,"column":4},"end":{"line":13,"column":46}},"11":{"start":{"line":14,"column":4},"end":{"line":14,"column":46}},"12":{"start":{"line":24,"column":8},"end":{"line":24,"column":32}},"13":{"start":{"line":25,"column":8},"end":{"line":25,"column":38}},"14":{"start":{"line":26,"column":8},"end":{"line":26,"column":40}},"15":{"start":{"line":27,"column":8},"end":{"line":27,"column":30}},"16":{"start":{"line":28,"column":8},"end":{"line":28,"column":30}},"17":{"start":{"line":29,"column":8},"end":{"line":29,"column":30}},"18":{"start":{"line":32,"column":25},"end":{"line":32,"column":27}},"19":{"start":{"line":33,"column":8},"end":{"line":37,"column":9}},"20":{"start":{"line":34,"column":12},"end":{"line":36,"column":13}},"21":{"start":{"line":35,"column":16},"end":{"line":35,"column":36}},"22":{"start":{"line":38,"column":8},"end":{"line":38,"column":24}},"23":{"start":{"line":41,"column":8},"end":{"line":60,"column":9}},"24":{"start":{"line":43,"column":16},"end":{"line":43,"column":28}},"25":{"start":{"line":45,"column":16},"end":{"line":45,"column":67}},"26":{"start":{"line":47,"column":16},"end":{"line":47,"column":91}},"27":{"start":{"line":49,"column":16},"end":{"line":49,"column":65}},"28":{"start":{"line":51,"column":16},"end":{"line":51,"column":65}},"29":{"start":{"line":53,"column":16},"end":{"line":53,"column":63}},"30":{"start":{"line":55,"column":16},"end":{"line":55,"column":83}},"31":{"start":{"line":55,"column":59},"end":{"line":55,"column":81}},"32":{"start":{"line":57,"column":16},"end":{"line":57,"column":82}},"33":{"start":{"line":57,"column":58},"end":{"line":57,"column":80}},"34":{"start":{"line":59,"column":16},"end":{"line":59,"column":101}},"35":{"start":{"line":63,"column":8},"end":{"line":65,"column":9}},"36":{"start":{"line":64,"column":12},"end":{"line":64,"column":34}},"37":{"start":{"line":66,"column":23},"end":{"line":66,"column":48}},"38":{"start":{"line":67,"column":21},"end":{"line":67,"column":44}},"39":{"start":{"line":68,"column":33},"end":{"line":68,"column":73}},"40":{"start":{"line":69,"column":31},"end":{"line":69,"column":75}},"41":{"start":{"line":70,"column":40},"end":{"line":70,"column":114}},"42":{"start":{"line":71,"column":8},"end":{"line":73,"column":9}},"43":{"start":{"line":72,"column":12},"end":{"line":72,"column":101}},"44":{"start":{"line":74,"column":8},"end":{"line":88,"column":9}},"45":{"start":{"line":75,"column":12},"end":{"line":75,"column":61}},"46":{"start":{"line":77,"column":13},"end":{"line":88,"column":9}},"47":{"start":{"line":78,"column":12},"end":{"line":78,"column":54}},"48":{"start":{"line":80,"column":13},"end":{"line":88,"column":9}},"49":{"start":{"line":81,"column":12},"end":{"line":81,"column":54}},"50":{"start":{"line":83,"column":13},"end":{"line":88,"column":9}},"51":{"start":{"line":84,"column":12},"end":{"line":84,"column":101}},"52":{"start":{"line":87,"column":12},"end":{"line":87,"column":41}},"53":{"start":{"line":91,"column":0},"end":{"line":91,"column":60}},"54":{"start":{"line":95,"column":8},"end":{"line":95,"column":31}},"55":{"start":{"line":98,"column":8},"end":{"line":102,"column":11}},"56":{"start":{"line":105,"column":8},"end":{"line":109,"column":11}},"57":{"start":{"line":112,"column":8},"end":{"line":117,"column":11}},"58":{"start":{"line":120,"column":8},"end":{"line":125,"column":11}},"59":{"start":{"line":128,"column":8},"end":{"line":133,"column":11}},"60":{"start":{"line":136,"column":8},"end":{"line":141,"column":11}},"61":{"start":{"line":144,"column":8},"end":{"line":148,"column":11}},"62":{"start":{"line":151,"column":8},"end":{"line":154,"column":11}},"63":{"start":{"line":157,"column":0},"end":{"line":157,"column":42}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":6,"column":1},"end":{"line":6,"column":2}},"loc":{"start":{"line":6,"column":23},"end":{"line":15,"column":1}},"line":6},"1":{"name":"(anonymous_1)","decl":{"start":{"line":23,"column":4},"end":{"line":23,"column":5}},"loc":{"start":{"line":23,"column":24},"end":{"line":30,"column":5}},"line":23},"2":{"name":"(anonymous_2)","decl":{"start":{"line":31,"column":4},"end":{"line":31,"column":5}},"loc":{"start":{"line":31,"column":12},"end":{"line":39,"column":5}},"line":31},"3":{"name":"(anonymous_3)","decl":{"start":{"line":40,"column":4},"end":{"line":40,"column":5}},"loc":{"start":{"line":40,"column":33},"end":{"line":61,"column":5}},"line":40},"4":{"name":"(anonymous_4)","decl":{"start":{"line":55,"column":48},"end":{"line":55,"column":49}},"loc":{"start":{"line":55,"column":59},"end":{"line":55,"column":81}},"line":55},"5":{"name":"(anonymous_5)","decl":{"start":{"line":57,"column":47},"end":{"line":57,"column":48}},"loc":{"start":{"line":57,"column":58},"end":{"line":57,"column":80}},"line":57},"6":{"name":"(anonymous_6)","decl":{"start":{"line":62,"column":4},"end":{"line":62,"column":5}},"loc":{"start":{"line":62,"column":52},"end":{"line":89,"column":5}},"line":62},"7":{"name":"(anonymous_7)","decl":{"start":{"line":94,"column":4},"end":{"line":94,"column":5}},"loc":{"start":{"line":94,"column":25},"end":{"line":96,"column":5}},"line":94},"8":{"name":"(anonymous_8)","decl":{"start":{"line":97,"column":4},"end":{"line":97,"column":5}},"loc":{"start":{"line":97,"column":17},"end":{"line":103,"column":5}},"line":97},"9":{"name":"(anonymous_9)","decl":{"start":{"line":104,"column":4},"end":{"line":104,"column":5}},"loc":{"start":{"line":104,"column":18},"end":{"line":110,"column":5}},"line":104},"10":{"name":"(anonymous_10)","decl":{"start":{"line":111,"column":4},"end":{"line":111,"column":5}},"loc":{"start":{"line":111,"column":26},"end":{"line":118,"column":5}},"line":111},"11":{"name":"(anonymous_11)","decl":{"start":{"line":119,"column":4},"end":{"line":119,"column":5}},"loc":{"start":{"line":119,"column":29},"end":{"line":126,"column":5}},"line":119},"12":{"name":"(anonymous_12)","decl":{"start":{"line":127,"column":4},"end":{"line":127,"column":5}},"loc":{"start":{"line":127,"column":24},"end":{"line":134,"column":5}},"line":127},"13":{"name":"(anonymous_13)","decl":{"start":{"line":135,"column":4},"end":{"line":135,"column":5}},"loc":{"start":{"line":135,"column":22},"end":{"line":142,"column":5}},"line":135},"14":{"name":"(anonymous_14)","decl":{"start":{"line":143,"column":4},"end":{"line":143,"column":5}},"loc":{"start":{"line":143,"column":15},"end":{"line":149,"column":5}},"line":143},"15":{"name":"(anonymous_15)","decl":{"start":{"line":150,"column":4},"end":{"line":150,"column":5}},"loc":{"start":{"line":150,"column":10},"end":{"line":155,"column":5}},"line":150}},"branchMap":{"0":{"loc":{"start":{"line":15,"column":3},"end":{"line":15,"column":34}},"type":"binary-expr","locations":[{"start":{"line":15,"column":3},"end":{"line":15,"column":13}},{"start":{"line":15,"column":18},"end":{"line":15,"column":33}}],"line":15},"1":{"loc":{"start":{"line":34,"column":12},"end":{"line":36,"column":13}},"type":"if","locations":[{"start":{"line":34,"column":12},"end":{"line":36,"column":13}},{"start":{"line":34,"column":12},"end":{"line":36,"column":13}}],"line":34},"2":{"loc":{"start":{"line":41,"column":8},"end":{"line":60,"column":9}},"type":"switch","locations":[{"start":{"line":42,"column":12},"end":{"line":43,"column":28}},{"start":{"line":44,"column":12},"end":{"line":45,"column":67}},{"start":{"line":46,"column":12},"end":{"line":47,"column":91}},{"start":{"line":48,"column":12},"end":{"line":49,"column":65}},{"start":{"line":50,"column":12},"end":{"line":51,"column":65}},{"start":{"line":52,"column":12},"end":{"line":53,"column":63}},{"start":{"line":54,"column":12},"end":{"line":55,"column":83}},{"start":{"line":56,"column":12},"end":{"line":57,"column":82}},{"start":{"line":58,"column":12},"end":{"line":59,"column":101}}],"line":41},"3":{"loc":{"start":{"line":63,"column":8},"end":{"line":65,"column":9}},"type":"if","locations":[{"start":{"line":63,"column":8},"end":{"line":65,"column":9}},{"start":{"line":63,"column":8},"end":{"line":65,"column":9}}],"line":63},"4":{"loc":{"start":{"line":70,"column":40},"end":{"line":70,"column":114}},"type":"cond-expr","locations":[{"start":{"line":70,"column":65},"end":{"line":70,"column":67}},{"start":{"line":70,"column":70},"end":{"line":70,"column":114}}],"line":70},"5":{"loc":{"start":{"line":71,"column":8},"end":{"line":73,"column":9}},"type":"if","locations":[{"start":{"line":71,"column":8},"end":{"line":73,"column":9}},{"start":{"line":71,"column":8},"end":{"line":73,"column":9}}],"line":71},"6":{"loc":{"start":{"line":74,"column":8},"end":{"line":88,"column":9}},"type":"if","locations":[{"start":{"line":74,"column":8},"end":{"line":88,"column":9}},{"start":{"line":74,"column":8},"end":{"line":88,"column":9}}],"line":74},"7":{"loc":{"start":{"line":74,"column":12},"end":{"line":74,"column":26}},"type":"binary-expr","locations":[{"start":{"line":74,"column":12},"end":{"line":74,"column":18}},{"start":{"line":74,"column":22},"end":{"line":74,"column":26}}],"line":74},"8":{"loc":{"start":{"line":77,"column":13},"end":{"line":88,"column":9}},"type":"if","locations":[{"start":{"line":77,"column":13},"end":{"line":88,"column":9}},{"start":{"line":77,"column":13},"end":{"line":88,"column":9}}],"line":77},"9":{"loc":{"start":{"line":80,"column":13},"end":{"line":88,"column":9}},"type":"if","locations":[{"start":{"line":80,"column":13},"end":{"line":88,"column":9}},{"start":{"line":80,"column":13},"end":{"line":88,"column":9}}],"line":80},"10":{"loc":{"start":{"line":83,"column":13},"end":{"line":88,"column":9}},"type":"if","locations":[{"start":{"line":83,"column":13},"end":{"line":88,"column":9}},{"start":{"line":83,"column":13},"end":{"line":88,"column":9}}],"line":83}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":452,"13":452,"14":452,"15":452,"16":452,"17":452,"18":41,"19":41,"20":2411979,"21":287188,"22":39,"23":5221889,"24":129224,"25":536072,"26":1001626,"27":1382966,"28":217584,"29":194299,"30":1351834,"31":1613009,"32":408284,"33":1002602,"34":0,"35":1001626,"36":6,"37":1001620,"38":1001620,"39":1001620,"40":1001620,"41":1001620,"42":1001620,"43":2,"44":1001618,"45":131033,"46":870585,"47":64612,"48":805973,"49":64612,"50":741361,"51":0,"52":741361,"53":1,"54":68,"55":8,"56":32,"57":25,"58":41,"59":15,"60":57,"61":15,"62":259,"63":1},"f":{"0":1,"1":452,"2":41,"3":5221889,"4":1613009,"5":1002602,"6":1001626,"7":68,"8":8,"9":32,"10":25,"11":41,"12":15,"13":57,"14":15,"15":259},"b":{"0":[1,1],"1":[287188,2124789],"2":[129224,536072,1001626,1382966,217584,194299,1351834,408284,0],"3":[6,1001620],"4":[64612,937008],"5":[2,1001618],"6":[131033,870585],"7":[1001618,195645],"8":[64612,805973],"9":[64612,741361],"10":[0,741361]},"inputSourceMap":{"version":3,"file":"/Users/fegicochen/Courses/CPSC 310/C1/project_team085/src/controller/Filter.ts","sources":["/Users/fegicochen/Courses/CPSC 310/C1/project_team085/src/controller/Filter.ts"],"names":[],"mappings":"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","sourcesContent":["import { InsightFacadeKey, Dataset } from \"./Dataset\";\nimport { InsightError } from \"./IInsightFacade\";\n\nenum FilterName {\n\tAnd,\n\tOr,\n\tLessThan,\n\tGreaterThan,\n\tEquals,\n\tIs,\n\tNot,\n\tAll,\n}\n\nexport interface FilterOperation<T extends object> {\n\tname: FilterName;\n\tapply: () => T[];\n}\n\nexport interface FilterStrategy<T extends object, FO extends FilterOperation<T>> {\n\tor(children: FO[]): FO;\n\tand(children: FO[]): FO;\n\tlessThan(limit: number, mkey: InsightFacadeKey): FO;\n\tgreaterThan(limit: number, mkey: InsightFacadeKey): FO;\n\tequals(limit: number, mkey: InsightFacadeKey): FO;\n\tis(compare: string, skey: InsightFacadeKey): FO;\n\tnot(child: FO): FO;\n\tall(): FO;\n}\n\nexport class FilterOperationByDataset<T extends object> implements FilterOperation<T> {\n\tprivate readonly dataset: Dataset<T>;\n\tpublic readonly name: FilterName;\n\tprivate readonly children?: FilterOperationByDataset<T>[];\n\tprivate readonly num?: number;\n\tprivate readonly str?: string;\n\tprivate readonly key?: InsightFacadeKey;\n\n\t/**\n\t *\n\t * @param dataset the dataset to use for this query\n\t * @param name the name of the filter\n\t * @param children children if this filter has children (AND, OR)\n\t * @param num a number argument if this filter has one (EQ, LT, GT)\n\t * @param str a string argument if this filter has one (IS)\n\t * @param key a key argument if this filter has one (EQ, LT, GT, IS)\n\t */\n\tconstructor(params: {\n\t\tdataset: Dataset<T>;\n\t\tname: FilterName;\n\t\tchildren?: FilterOperationByDataset<T>[];\n\t\tnum?: number;\n\t\tstr?: string;\n\t\tkey?: InsightFacadeKey;\n\t}) {\n\t\tthis.name = params.name;\n\t\tthis.dataset = params.dataset;\n\t\tthis.children = params.children;\n\t\tthis.num = params.num;\n\t\tthis.str = params.str;\n\t\tthis.key = params.key;\n\t}\n\n\tpublic apply(): T[] {\n\t\tconst selected: T[] = [];\n\t\tfor (const item of this.dataset.members) {\n\t\t\t// Early abort if too many\n\t\t\t// if (selected.length > maxResults) {\n\t\t\t// \tthrow new ResultTooLargeError();\n\t\t\t// }\n\t\t\t// Check item valid under filter\n\t\t\tif (FilterOperationByDataset.test(this, item)) {\n\t\t\t\tselected.push(item);\n\t\t\t}\n\t\t}\n\t\treturn selected;\n\t}\n\n\t/**\n\t *\n\t * @param operation the root filter operation to process\n\t * @param item the item to validate\n\t * @returns whether the given item is valid under the given filter operation\n\t */\n\tprivate static test<T extends object>(operation: FilterOperationByDataset<T>, item: T): boolean {\n\t\tswitch (operation.name) {\n\t\t\tcase FilterName.All:\n\t\t\t\treturn true;\n\t\t\tcase FilterName.Equals:\n\t\t\t\t// Type assertion to Record<string, any> to inform TypeScript about dynamic keys\n\t\t\t\treturn (item as Record<string, any>)[operation.key!.field] === operation.num!;\n\t\t\tcase FilterName.Is:\n\t\t\t\treturn this.validateFilterString(operation.str!, (item as Record<string, any>)[operation.key!.field]);\n\t\t\tcase FilterName.GreaterThan:\n\t\t\t\treturn (item as Record<string, any>)[operation.key!.field] > operation.num!;\n\t\t\tcase FilterName.LessThan:\n\t\t\t\treturn (item as Record<string, any>)[operation.key!.field] < operation.num!;\n\t\t\tcase FilterName.Not:\n\t\t\t\treturn !this.test(operation.children![0], item);\n\t\t\tcase FilterName.And:\n\t\t\t\treturn operation.children!.every((child) => this.test(child, item));\n\t\t\tcase FilterName.Or:\n\t\t\t\treturn operation.children!.some((child) => this.test(child, item));\n\t\t\tdefault:\n\t\t\t\tthrow new InsightError(\"Unexpected filter name: \" + operation.name);\n\t\t}\n\t}\n\n\t/**\n\t * Takes care of asterisks in string to filter\n\t *\n\t * @param filterStr the string provided in the filter\n\t * @param itemStr the item string to test against\n\t */\n\tprivate static validateFilterString(filterStr: string, itemStr: string): boolean {\n\t\tif (filterStr === \"\") {\n\t\t\treturn \"\" === itemStr;\n\t\t}\n\n\t\tconst aStart = filterStr.startsWith(\"*\");\n\t\tconst aEnd = filterStr.endsWith(\"*\");\n\t\tconst startCharRemoved = filterStr.substring(1, filterStr.length);\n\t\tconst endCharRemoved = filterStr.substring(0, filterStr.length - 1);\n\t\tconst startAndEndCharsRemoved = filterStr.length === 1 ? \"\" : filterStr.substring(1, filterStr.length - 1);\n\n\t\tif (startAndEndCharsRemoved.includes(\"*\")) {\n\t\t\tthrow new InsightError(\"Asterisk must occur at start or end of string\");\n\t\t}\n\n\t\tif (aStart && aEnd) {\n\t\t\treturn itemStr.includes(startAndEndCharsRemoved);\n\t\t} else if (aStart) {\n\t\t\treturn itemStr.endsWith(startCharRemoved);\n\t\t} else if (aEnd) {\n\t\t\treturn itemStr.startsWith(endCharRemoved);\n\t\t} else if (filterStr.includes(\"*\")) {\n\t\t\tthrow new InsightError(\"Asterisk must occur at start or end of string\");\n\t\t} else {\n\t\t\treturn filterStr === itemStr;\n\t\t}\n\t}\n}\n\nexport class FilterByDataset<T extends object> implements FilterStrategy<T, FilterOperationByDataset<T>> {\n\tprivate dataset: Dataset<T>;\n\n\t/**\n\t *\n\t * @param dataset the dataset to use for filtering\n\t */\n\tconstructor(dataset: Dataset<T>) {\n\t\tthis.dataset = dataset;\n\t}\n\n\tpublic or(children: FilterOperationByDataset<T>[]): FilterOperationByDataset<T> {\n\t\treturn new FilterOperationByDataset<T>({\n\t\t\tdataset: this.dataset,\n\t\t\tname: FilterName.Or,\n\t\t\tchildren: children,\n\t\t});\n\t}\n\n\tpublic and(children: FilterOperationByDataset<T>[]): FilterOperationByDataset<T> {\n\t\treturn new FilterOperationByDataset<T>({\n\t\t\tdataset: this.dataset,\n\t\t\tname: FilterName.And,\n\t\t\tchildren: children,\n\t\t});\n\t}\n\n\tpublic lessThan(limit: number, mkey: InsightFacadeKey): FilterOperationByDataset<T> {\n\t\treturn new FilterOperationByDataset<T>({\n\t\t\tdataset: this.dataset,\n\t\t\tname: FilterName.LessThan,\n\t\t\tkey: mkey,\n\t\t\tnum: limit,\n\t\t});\n\t}\n\n\tpublic greaterThan(limit: number, mkey: InsightFacadeKey): FilterOperationByDataset<T> {\n\t\treturn new FilterOperationByDataset<T>({\n\t\t\tdataset: this.dataset,\n\t\t\tname: FilterName.GreaterThan,\n\t\t\tkey: mkey,\n\t\t\tnum: limit,\n\t\t});\n\t}\n\n\tpublic equals(limit: number, mkey: InsightFacadeKey): FilterOperationByDataset<T> {\n\t\treturn new FilterOperationByDataset<T>({\n\t\t\tdataset: this.dataset,\n\t\t\tname: FilterName.Equals,\n\t\t\tkey: mkey,\n\t\t\tnum: limit,\n\t\t});\n\t}\n\n\tpublic is(compare: string, skey: InsightFacadeKey): FilterOperationByDataset<T> {\n\t\treturn new FilterOperationByDataset<T>({\n\t\t\tdataset: this.dataset,\n\t\t\tname: FilterName.Is,\n\t\t\tkey: skey,\n\t\t\tstr: compare,\n\t\t});\n\t}\n\n\tpublic not(child: FilterOperationByDataset<T>): FilterOperationByDataset<T> {\n\t\treturn new FilterOperationByDataset<T>({\n\t\t\tdataset: this.dataset,\n\t\t\tname: FilterName.Not,\n\t\t\tchildren: [child],\n\t\t});\n\t}\n\n\tpublic all(): FilterOperationByDataset<T> {\n\t\treturn new FilterOperationByDataset<T>({\n\t\t\tdataset: this.dataset,\n\t\t\tname: FilterName.All,\n\t\t});\n\t}\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"c9a1ce84e93e6d8df7d97fd86119e6d00d7f83e8","contentHash":"b83e0a098734cc08411dd9aa91fab82f3e70dd1f19d806391bff8b3e12a2eadf"},"/Users/fegicochen/Courses/CPSC 310/C1/project_team085/src/controller/Calculations.ts":{"path":"/Users/fegicochen/Courses/CPSC 310/C1/project_team085/src/controller/Calculations.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":0},"end":{"line":6,"column":124}},"4":{"start":{"line":7,"column":21},"end":{"line":7,"column":59}},"5":{"start":{"line":8,"column":12},"end":{"line":8,"column":13}},"6":{"start":{"line":10,"column":4},"end":{"line":10,"column":31}},"7":{"start":{"line":12,"column":0},"end":{"line":12,"column":36}},"8":{"start":{"line":14,"column":4},"end":{"line":14,"column":31}},"9":{"start":{"line":16,"column":0},"end":{"line":16,"column":36}},"10":{"start":{"line":18,"column":23},"end":{"line":18,"column":123}},"11":{"start":{"line":18,"column":53},"end":{"line":18,"column":93}},"12":{"start":{"line":19,"column":4},"end":{"line":19,"column":43}},"13":{"start":{"line":21,"column":0},"end":{"line":21,"column":36}},"14":{"start":{"line":23,"column":4},"end":{"line":23,"column":32}},"15":{"start":{"line":25,"column":0},"end":{"line":25,"column":40}},"16":{"start":{"line":27,"column":18},"end":{"line":27,"column":118}},"17":{"start":{"line":27,"column":48},"end":{"line":27,"column":88}},"18":{"start":{"line":28,"column":22},"end":{"line":28,"column":54}},"19":{"start":{"line":29,"column":4},"end":{"line":29,"column":42}},"20":{"start":{"line":31,"column":0},"end":{"line":31,"column":36}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"calculateMax","decl":{"start":{"line":9,"column":9},"end":{"line":9,"column":21}},"loc":{"start":{"line":9,"column":30},"end":{"line":11,"column":1}},"line":9},"2":{"name":"calculateMin","decl":{"start":{"line":13,"column":9},"end":{"line":13,"column":21}},"loc":{"start":{"line":13,"column":30},"end":{"line":15,"column":1}},"line":13},"3":{"name":"calculateSum","decl":{"start":{"line":17,"column":9},"end":{"line":17,"column":21}},"loc":{"start":{"line":17,"column":30},"end":{"line":20,"column":1}},"line":17},"4":{"name":"(anonymous_4)","decl":{"start":{"line":18,"column":37},"end":{"line":18,"column":38}},"loc":{"start":{"line":18,"column":53},"end":{"line":18,"column":93}},"line":18},"5":{"name":"calculateCount","decl":{"start":{"line":22,"column":9},"end":{"line":22,"column":23}},"loc":{"start":{"line":22,"column":32},"end":{"line":24,"column":1}},"line":22},"6":{"name":"calculateAvg","decl":{"start":{"line":26,"column":9},"end":{"line":26,"column":21}},"loc":{"start":{"line":26,"column":30},"end":{"line":30,"column":1}},"line":26},"7":{"name":"(anonymous_7)","decl":{"start":{"line":27,"column":32},"end":{"line":27,"column":33}},"loc":{"start":{"line":27,"column":48},"end":{"line":27,"column":88}},"line":27}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":3,"7":1,"8":0,"9":1,"10":0,"11":0,"12":0,"13":1,"14":0,"15":1,"16":216,"17":80923,"18":216,"19":216,"20":1},"f":{"0":1,"1":3,"2":0,"3":0,"4":0,"5":0,"6":216,"7":80923},"b":{"0":[1,1,1],"1":[0,1],"2":[1,1]},"inputSourceMap":{"version":3,"file":"/Users/fegicochen/Courses/CPSC 310/C1/project_team085/src/controller/Calculations.ts","sources":["/Users/fegicochen/Courses/CPSC 310/C1/project_team085/src/controller/Calculations.ts"],"names":[],"mappings":";;;;;;AAAA,4DAAiC;AAEjC,MAAM,GAAG,GAAG,CAAC,CAAC;AAKd,SAAgB,YAAY,CAAC,MAAgB;IAC5C,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,CAAC;AAC5B,CAAC;AAFD,oCAEC;AAKD,SAAgB,YAAY,CAAC,MAAgB;IAC5C,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,CAAC;AAC5B,CAAC;AAFD,oCAEC;AAKD,SAAgB,YAAY,CAAC,MAAgB;IAC5C,MAAM,UAAU,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,KAAK,EAAE,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,oBAAO,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,oBAAO,CAAC,CAAC,CAAC,CAAC,CAAC;IAC9F,OAAO,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;AACxC,CAAC;AAHD,oCAGC;AAKD,SAAgB,cAAc,CAAC,MAAa;IAC3C,OAAO,IAAI,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC;AAC7B,CAAC;AAFD,wCAEC;AAKD,SAAgB,YAAY,CAAC,MAAgB;IAC5C,MAAM,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,KAAK,EAAE,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,oBAAO,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,oBAAO,CAAC,CAAC,CAAC,CAAC,CAAC;IACzF,MAAM,SAAS,GAAG,KAAK,CAAC,QAAQ,EAAE,GAAG,MAAM,CAAC,MAAM,CAAC;IACnD,OAAO,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;AACvC,CAAC;AAJD,oCAIC","sourcesContent":["import Decimal from \"decimal.js\";\n\nconst two = 2;\n\n/**\n * Finds the maximum value in an array of numbers\n */\nexport function calculateMax(values: number[]): number {\n\treturn Math.max(...values);\n}\n\n/**\n * Finds the minimum value in an array of numbers\n */\nexport function calculateMin(values: number[]): number {\n\treturn Math.min(...values);\n}\n\n/**\n * Sums an array of numbers, rounding the result to two decimal places\n */\nexport function calculateSum(values: number[]): number {\n\tconst sumDecimal = values.reduce((acc, value) => acc.add(new Decimal(value)), new Decimal(0));\n\treturn Number(sumDecimal.toFixed(two));\n}\n\n/**\n * Counts unique values in an array\n */\nexport function calculateCount(values: any[]): number {\n\treturn new Set(values).size;\n}\n\n/**\n * Calculates the average of an array of numbers, rounded to two decimal places\n */\nexport function calculateAvg(values: number[]): number {\n\tconst total = values.reduce((acc, value) => acc.add(new Decimal(value)), new Decimal(0));\n\tconst avgNumber = total.toNumber() / values.length;\n\treturn Number(avgNumber.toFixed(two));\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"3ab5ba25f9461d65dc5d55e261f26438c5ae277c","contentHash":"18f44f0428726a68726b76be225c99e1e7595dfc3498bd5e377cdf7dafb841e3"},"/Users/fegicochen/Courses/CPSC 310/C1/project_team085/src/controller/OptionsProcessor.ts":{"path":"/Users/fegicochen/Courses/CPSC 310/C1/project_team085/src/controller/OptionsProcessor.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":34}},"2":{"start":{"line":4,"column":18},"end":{"line":4,"column":38}},"3":{"start":{"line":5,"column":18},"end":{"line":5,"column":38}},"4":{"start":{"line":6,"column":25},"end":{"line":6,"column":52}},"5":{"start":{"line":12,"column":8},"end":{"line":12,"column":37}},"6":{"start":{"line":13,"column":8},"end":{"line":13,"column":35}},"7":{"start":{"line":16,"column":24},"end":{"line":16,"column":105}},"8":{"start":{"line":17,"column":33},"end":{"line":20,"column":10}},"9":{"start":{"line":21,"column":53},"end":{"line":21,"column":88}},"10":{"start":{"line":22,"column":8},"end":{"line":22,"column":43}},"11":{"start":{"line":23,"column":27},"end":{"line":23,"column":117}},"12":{"start":{"line":23,"column":65},"end":{"line":23,"column":114}},"13":{"start":{"line":24,"column":30},"end":{"line":24,"column":96}},"14":{"start":{"line":25,"column":8},"end":{"line":29,"column":10}},"15":{"start":{"line":32,"column":32},"end":{"line":32,"column":34}},"16":{"start":{"line":34,"column":24},"end":{"line":34,"column":137}},"17":{"start":{"line":35,"column":8},"end":{"line":55,"column":11}},"18":{"start":{"line":36,"column":27},"end":{"line":36,"column":102}},"19":{"start":{"line":37,"column":12},"end":{"line":54,"column":13}},"20":{"start":{"line":38,"column":16},"end":{"line":38,"column":66}},"21":{"start":{"line":41,"column":34},"end":{"line":41,"column":77}},"22":{"start":{"line":42,"column":16},"end":{"line":53,"column":17}},"23":{"start":{"line":43,"column":20},"end":{"line":48,"column":21}},"24":{"start":{"line":44,"column":24},"end":{"line":44,"column":123}},"25":{"start":{"line":47,"column":24},"end":{"line":47,"column":61}},"26":{"start":{"line":49,"column":20},"end":{"line":49,"column":52}},"27":{"start":{"line":52,"column":20},"end":{"line":52,"column":106}},"28":{"start":{"line":56,"column":8},"end":{"line":58,"column":9}},"29":{"start":{"line":57,"column":12},"end":{"line":57,"column":100}},"30":{"start":{"line":59,"column":8},"end":{"line":59,"column":54}},"31":{"start":{"line":62,"column":8},"end":{"line":85,"column":9}},"32":{"start":{"line":63,"column":29},"end":{"line":63,"column":75}},"33":{"start":{"line":64,"column":12},"end":{"line":84,"column":13}},"34":{"start":{"line":65,"column":33},"end":{"line":65,"column":92}},"35":{"start":{"line":66,"column":16},"end":{"line":66,"column":55}},"36":{"start":{"line":68,"column":17},"end":{"line":84,"column":13}},"37":{"start":{"line":69,"column":33},"end":{"line":69,"column":41}},"38":{"start":{"line":70,"column":28},"end":{"line":70,"column":40}},"39":{"start":{"line":71,"column":29},"end":{"line":71,"column":42}},"40":{"start":{"line":72,"column":16},"end":{"line":80,"column":17}},"41":{"start":{"line":73,"column":20},"end":{"line":75,"column":23}},"42":{"start":{"line":74,"column":24},"end":{"line":74,"column":79}},"43":{"start":{"line":76,"column":20},"end":{"line":76,"column":41}},"44":{"start":{"line":79,"column":20},"end":{"line":79,"column":85}},"45":{"start":{"line":83,"column":16},"end":{"line":83,"column":96}},"46":{"start":{"line":86,"column":8},"end":{"line":86,"column":25}},"47":{"start":{"line":89,"column":8},"end":{"line":91,"column":9}},"48":{"start":{"line":90,"column":12},"end":{"line":90,"column":100}},"49":{"start":{"line":92,"column":8},"end":{"line":94,"column":9}},"50":{"start":{"line":93,"column":12},"end":{"line":93,"column":23}},"51":{"start":{"line":95,"column":25},"end":{"line":95,"column":65}},"52":{"start":{"line":96,"column":8},"end":{"line":104,"column":9}},"53":{"start":{"line":97,"column":12},"end":{"line":99,"column":13}},"54":{"start":{"line":98,"column":16},"end":{"line":98,"column":110}},"55":{"start":{"line":100,"column":12},"end":{"line":100,"column":23}},"56":{"start":{"line":103,"column":12},"end":{"line":103,"column":92}},"57":{"start":{"line":107,"column":8},"end":{"line":107,"column":30}},"58":{"start":{"line":110,"column":0},"end":{"line":110,"column":44}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":11,"column":4},"end":{"line":11,"column":5}},"loc":{"start":{"line":11,"column":39},"end":{"line":14,"column":5}},"line":11},"1":{"name":"(anonymous_1)","decl":{"start":{"line":15,"column":4},"end":{"line":15,"column":5}},"loc":{"start":{"line":15,"column":21},"end":{"line":30,"column":5}},"line":15},"2":{"name":"(anonymous_2)","decl":{"start":{"line":23,"column":55},"end":{"line":23,"column":56}},"loc":{"start":{"line":23,"column":65},"end":{"line":23,"column":114}},"line":23},"3":{"name":"(anonymous_3)","decl":{"start":{"line":31,"column":4},"end":{"line":31,"column":5}},"loc":{"start":{"line":31,"column":35},"end":{"line":60,"column":5}},"line":31},"4":{"name":"(anonymous_4)","decl":{"start":{"line":35,"column":24},"end":{"line":35,"column":25}},"loc":{"start":{"line":35,"column":39},"end":{"line":55,"column":9}},"line":35},"5":{"name":"(anonymous_5)","decl":{"start":{"line":61,"column":4},"end":{"line":61,"column":5}},"loc":{"start":{"line":61,"column":66},"end":{"line":87,"column":5}},"line":61},"6":{"name":"(anonymous_6)","decl":{"start":{"line":73,"column":33},"end":{"line":73,"column":34}},"loc":{"start":{"line":73,"column":42},"end":{"line":75,"column":21}},"line":73},"7":{"name":"(anonymous_7)","decl":{"start":{"line":88,"column":4},"end":{"line":88,"column":5}},"loc":{"start":{"line":88,"column":54},"end":{"line":105,"column":5}},"line":88},"8":{"name":"(anonymous_8)","decl":{"start":{"line":106,"column":4},"end":{"line":106,"column":5}},"loc":{"start":{"line":106,"column":19},"end":{"line":108,"column":5}},"line":106}},"branchMap":{"0":{"loc":{"start":{"line":23,"column":65},"end":{"line":23,"column":114}},"type":"cond-expr","locations":[{"start":{"line":23,"column":76},"end":{"line":23,"column":102}},{"start":{"line":23,"column":105},"end":{"line":23,"column":114}}],"line":23},"1":{"loc":{"start":{"line":37,"column":12},"end":{"line":54,"column":13}},"type":"if","locations":[{"start":{"line":37,"column":12},"end":{"line":54,"column":13}},{"start":{"line":37,"column":12},"end":{"line":54,"column":13}}],"line":37},"2":{"loc":{"start":{"line":42,"column":16},"end":{"line":53,"column":17}},"type":"if","locations":[{"start":{"line":42,"column":16},"end":{"line":53,"column":17}},{"start":{"line":42,"column":16},"end":{"line":53,"column":17}}],"line":42},"3":{"loc":{"start":{"line":43,"column":20},"end":{"line":48,"column":21}},"type":"if","locations":[{"start":{"line":43,"column":20},"end":{"line":48,"column":21}},{"start":{"line":43,"column":20},"end":{"line":48,"column":21}}],"line":43},"4":{"loc":{"start":{"line":43,"column":24},"end":{"line":43,"column":99}},"type":"binary-expr","locations":[{"start":{"line":43,"column":24},"end":{"line":43,"column":57}},{"start":{"line":43,"column":61},"end":{"line":43,"column":99}}],"line":43},"5":{"loc":{"start":{"line":56,"column":8},"end":{"line":58,"column":9}},"type":"if","locations":[{"start":{"line":56,"column":8},"end":{"line":58,"column":9}},{"start":{"line":56,"column":8},"end":{"line":58,"column":9}}],"line":56},"6":{"loc":{"start":{"line":56,"column":12},"end":{"line":56,"column":77}},"type":"binary-expr","locations":[{"start":{"line":56,"column":12},"end":{"line":56,"column":40}},{"start":{"line":56,"column":44},"end":{"line":56,"column":77}}],"line":56},"7":{"loc":{"start":{"line":62,"column":8},"end":{"line":85,"column":9}},"type":"if","locations":[{"start":{"line":62,"column":8},"end":{"line":85,"column":9}},{"start":{"line":62,"column":8},"end":{"line":85,"column":9}}],"line":62},"8":{"loc":{"start":{"line":62,"column":12},"end":{"line":62,"column":122}},"type":"binary-expr","locations":[{"start":{"line":62,"column":12},"end":{"line":62,"column":58}},{"start":{"line":62,"column":62},"end":{"line":62,"column":122}}],"line":62},"9":{"loc":{"start":{"line":64,"column":12},"end":{"line":84,"column":13}},"type":"if","locations":[{"start":{"line":64,"column":12},"end":{"line":84,"column":13}},{"start":{"line":64,"column":12},"end":{"line":84,"column":13}}],"line":64},"10":{"loc":{"start":{"line":68,"column":17},"end":{"line":84,"column":13}},"type":"if","locations":[{"start":{"line":68,"column":17},"end":{"line":84,"column":13}},{"start":{"line":68,"column":17},"end":{"line":84,"column":13}}],"line":68},"11":{"loc":{"start":{"line":68,"column":21},"end":{"line":68,"column":70}},"type":"binary-expr","locations":[{"start":{"line":68,"column":21},"end":{"line":68,"column":49}},{"start":{"line":68,"column":53},"end":{"line":68,"column":70}}],"line":68},"12":{"loc":{"start":{"line":72,"column":16},"end":{"line":80,"column":17}},"type":"if","locations":[{"start":{"line":72,"column":16},"end":{"line":80,"column":17}},{"start":{"line":72,"column":16},"end":{"line":80,"column":17}}],"line":72},"13":{"loc":{"start":{"line":72,"column":20},"end":{"line":72,"column":94}},"type":"binary-expr","locations":[{"start":{"line":72,"column":21},"end":{"line":72,"column":33}},{"start":{"line":72,"column":37},"end":{"line":72,"column":51}},{"start":{"line":72,"column":56},"end":{"line":72,"column":75}},{"start":{"line":72,"column":79},"end":{"line":72,"column":94}}],"line":72},"14":{"loc":{"start":{"line":89,"column":8},"end":{"line":91,"column":9}},"type":"if","locations":[{"start":{"line":89,"column":8},"end":{"line":91,"column":9}},{"start":{"line":89,"column":8},"end":{"line":91,"column":9}}],"line":89},"15":{"loc":{"start":{"line":92,"column":8},"end":{"line":94,"column":9}},"type":"if","locations":[{"start":{"line":92,"column":8},"end":{"line":94,"column":9}},{"start":{"line":92,"column":8},"end":{"line":94,"column":9}}],"line":92},"16":{"loc":{"start":{"line":96,"column":8},"end":{"line":104,"column":9}},"type":"if","locations":[{"start":{"line":96,"column":8},"end":{"line":104,"column":9}},{"start":{"line":96,"column":8},"end":{"line":104,"column":9}}],"line":96},"17":{"loc":{"start":{"line":97,"column":12},"end":{"line":99,"column":13}},"type":"if","locations":[{"start":{"line":97,"column":12},"end":{"line":99,"column":13}},{"start":{"line":97,"column":12},"end":{"line":99,"column":13}}],"line":97}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":78,"6":78,"7":78,"8":78,"9":76,"10":72,"11":72,"12":338,"13":72,"14":68,"15":76,"16":76,"17":75,"18":346,"19":346,"20":4,"21":342,"22":342,"23":340,"24":0,"25":340,"26":340,"27":2,"28":73,"29":1,"30":72,"31":72,"32":59,"33":59,"34":51,"35":47,"36":8,"37":8,"38":8,"39":8,"40":8,"41":8,"42":11,"43":8,"44":0,"45":0,"46":13,"47":62,"48":4,"49":58,"50":1,"51":57,"52":57,"53":57,"54":0,"55":57,"56":0,"57":0,"58":1},"f":{"0":78,"1":78,"2":338,"3":76,"4":346,"5":72,"6":11,"7":62,"8":0},"b":{"0":[334,4],"1":[4,342],"2":[340,2],"3":[0,340],"4":[340,267],"5":[1,72],"6":[73,72],"7":[59,13],"8":[72,59],"9":[51,8],"10":[8,0],"11":[8,8],"12":[8,0],"13":[8,5,8,8],"14":[4,58],"15":[1,57],"16":[57,0],"17":[0,57]},"inputSourceMap":{"version":3,"file":"/Users/fegicochen/Courses/CPSC 310/C1/project_team085/src/controller/OptionsProcessor.ts","sources":["/Users/fegicochen/Courses/CPSC 310/C1/project_team085/src/controller/OptionsProcessor.ts"],"names":[],"mappings":"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","sourcesContent":["import { Keywords, InsightFacadeKey, OptionsState } from \"./Dataset\";\nimport { DatasetUtils } from \"./Dataset\";\nimport { InsightError } from \"./IInsightFacade\";\n\nexport class OptionsProcessor {\n\tprivate datasetId!: string;\n\n\tconstructor(private optionsRaw: unknown, private applyKeys: string[]) {}\n\n\t/**\n\t * Processes the raw options object and returns the structured OptionsState.\n\t * @throws InsightError if options are malformed.\n\t */\n\tpublic processOptions(): OptionsState {\n\t\tconst options = DatasetUtils.checkIsObject(Keywords.Options, this.optionsRaw);\n\t\tconst optionsStructure = DatasetUtils.requireExactKeys(options, [\n\t\t\t[Keywords.Columns, true],\n\t\t\t[Keywords.Order, false],\n\t\t]);\n\n\t\tconst [columnsForState, datasetIdForState] = this.parseColumns(optionsStructure);\n\t\tthis.datasetId = datasetIdForState;\n\n\t\t// Create a set of column keys for validation\n\t\tconst columnsSet = new Set(columnsForState.map((col) => (col.kind ? `${col.kind}_${col.field}` : col.field)));\n\n\t\tconst orderForState = this.processOrder(optionsStructure, datasetIdForState, columnsSet);\n\n\t\treturn {\n\t\t\tcolumns: columnsForState,\n\t\t\torder: orderForState,\n\t\t\tdatasetKind: datasetIdForState,\n\t\t};\n\t}\n\n\t/**\n\t * Parses the columns from the options structure\n\t * @param optionsStructure The structured options map\n\t * @returns A tuple containing the columns and dataset ID\n\t * @throws InsightError if columns are malformed\n\t */\n\tprivate parseColumns(optionsStructure: Map<string, unknown>): [InsightFacadeKey[], string] {\n\t\tconst columnsForState: InsightFacadeKey[] = [];\n\t\tlet datasetKindForState: string | undefined;\n\n\t\tconst columns = DatasetUtils.checkIsArray(Keywords.Columns, optionsStructure.get(Keywords.Columns));\n\t\tcolumns.forEach((columnRaw) => {\n\t\t\tconst column = DatasetUtils.checkIsString(Keywords.Columns, columnRaw);\n\n\t\t\tif (this.applyKeys.includes(column)) {\n\t\t\t\tcolumnsForState.push({ kind: \"\", field: column as any });\n\t\t\t} else {\n\t\t\t\tconst columnKey = DatasetUtils.parseMOrSKey(column);\n\t\t\t\tif (columnKey !== undefined) {\n\t\t\t\t\tif (datasetKindForState !== undefined && datasetKindForState !== columnKey.kind) {\n\t\t\t\t\t\tthrow new InsightError(\"Multiple datasets used in query. Only one kind allowed.\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdatasetKindForState = columnKey.kind;\n\t\t\t\t\t}\n\t\t\t\t\tcolumnsForState.push(columnKey);\n\t\t\t\t} else {\n\t\t\t\t\tthrow new InsightError(`Improper column key formatting: ${column}.`);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tif (columnsForState.length === 0 || datasetKindForState === undefined) {\n\t\t\tthrow new InsightError(\"Query must select at least one valid column.\");\n\t\t}\n\n\t\treturn [columnsForState, datasetKindForState];\n\t}\n\n\t/**\n\t * Processes the order from the options structure.\n\t * @param optionsStructure The structured options map.\n\t * @param datasetIdForState The dataset ID extracted from columns.\n\t * @returns The order key if present, otherwise undefined.\n\t * @throws InsightError if order is malformed.\n\t */\n\tprivate processOrder(\n\t\toptionsStructure: Map<string, unknown>,\n\t\tdatasetIdForState: string,\n\t\tcolumnsSet: Set<string>\n\t): { dir: \"UP\" | \"DOWN\"; keys: string[] } | undefined {\n\t\tif (optionsStructure.has(Keywords.Order) && optionsStructure.get(Keywords.Order) !== undefined) {\n\t\t\tconst orderRaw = optionsStructure.get(Keywords.Order);\n\t\t\tif (typeof orderRaw === \"string\") {\n\t\t\t\t// Simple ORDER syntax\n\t\t\t\tconst orderKey = this.parseOrderKey(orderRaw, datasetIdForState, columnsSet);\n\t\t\t\treturn { dir: \"UP\", keys: [orderKey] };\n\t\t\t} else if (typeof orderRaw === \"object\" && orderRaw !== null) {\n\t\t\t\t// Complex ORDER syntax\n\t\t\t\tconst orderObj = orderRaw as any;\n\t\t\t\tconst dir = orderObj.dir;\n\t\t\t\tconst keys = orderObj.keys;\n\n\t\t\t\tif ((dir === \"UP\" || dir === \"DOWN\") && Array.isArray(keys) && keys.length > 0) {\n\t\t\t\t\t// Validate that all keys are in columns\n\t\t\t\t\tkeys.forEach((key: string) => {\n\t\t\t\t\t\tthis.parseOrderKey(key, datasetIdForState, columnsSet);\n\t\t\t\t\t});\n\t\t\t\t\treturn { dir, keys };\n\t\t\t\t} else {\n\t\t\t\t\tthrow new InsightError(\"Invalid ORDER format.\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthrow new InsightError(\"ORDER must be a string or an object.\");\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate parseOrderKey(key: string, datasetIdForState: string, columnsSet: Set<string>): string {\n\t\tif (!columnsSet.has(key)) {\n\t\t\tthrow new InsightError(`Sort key ${key} must be included in COLUMNS.`);\n\t\t}\n\t\t// Check if key is an apply key\n\t\tif (this.applyKeys.includes(key)) {\n\t\t\treturn key;\n\t\t}\n\t\tconst orderKey = DatasetUtils.parseMOrSKey(key);\n\t\tif (orderKey !== undefined) {\n\t\t\tif (orderKey.kind !== datasetIdForState) {\n\t\t\t\tthrow new InsightError(\"Multiple datasets used in query. Only one allowed.\");\n\t\t\t}\n\t\t\treturn key;\n\t\t} else {\n\t\t\tthrow new InsightError(`Order key ${key} is not a valid key.`);\n\t\t}\n\t}\n\n\t/**\n\t * Retrieves the dataset ID processed.\n\t * @returns The dataset ID as a string.\n\t */\n\tpublic getDatasetId(): string {\n\t\treturn this.datasetId;\n\t}\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"f4379211fc8b08d577446ce90bf3ca24b1385d3c","contentHash":"6201aca500c8f3cdd25e43c7e0659d06cfe9b5b98bbc918aa444166b18e301c8"},"/Users/fegicochen/Courses/CPSC 310/C1/project_team085/src/controller/PersistantData.ts":{"path":"/Users/fegicochen/Courses/CPSC 310/C1/project_team085/src/controller/PersistantData.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":19},"end":{"line":3,"column":38}},"2":{"start":{"line":4,"column":25},"end":{"line":4,"column":52}},"3":{"start":{"line":5,"column":16},"end":{"line":5,"column":22}},"4":{"start":{"line":6,"column":18},"end":{"line":6,"column":40}},"5":{"start":{"line":11,"column":8},"end":{"line":11,"column":32}},"6":{"start":{"line":12,"column":8},"end":{"line":12,"column":52}},"7":{"start":{"line":15,"column":8},"end":{"line":15,"column":40}},"8":{"start":{"line":16,"column":8},"end":{"line":16,"column":29}},"9":{"start":{"line":19,"column":8},"end":{"line":19,"column":45}},"10":{"start":{"line":22,"column":8},"end":{"line":22,"column":42}},"11":{"start":{"line":25,"column":8},"end":{"line":25,"column":33}},"12":{"start":{"line":28,"column":8},"end":{"line":30,"column":9}},"13":{"start":{"line":29,"column":12},"end":{"line":29,"column":19}},"14":{"start":{"line":31,"column":8},"end":{"line":40,"column":9}},"15":{"start":{"line":32,"column":12},"end":{"line":35,"column":13}},"16":{"start":{"line":33,"column":31},"end":{"line":33,"column":72}},"17":{"start":{"line":34,"column":16},"end":{"line":34,"column":39}},"18":{"start":{"line":36,"column":12},"end":{"line":36,"column":35}},"19":{"start":{"line":39,"column":12},"end":{"line":39,"column":107}},"20":{"start":{"line":43,"column":8},"end":{"line":55,"column":9}},"21":{"start":{"line":44,"column":12},"end":{"line":50,"column":13}},"22":{"start":{"line":45,"column":16},"end":{"line":49,"column":17}},"23":{"start":{"line":46,"column":20},"end":{"line":46,"column":57}},"24":{"start":{"line":51,"column":12},"end":{"line":51,"column":70}},"25":{"start":{"line":54,"column":12},"end":{"line":54,"column":106}},"26":{"start":{"line":58,"column":0},"end":{"line":58,"column":33}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":10,"column":4},"end":{"line":10,"column":5}},"loc":{"start":{"line":10,"column":18},"end":{"line":13,"column":5}},"line":10},"1":{"name":"(anonymous_1)","decl":{"start":{"line":14,"column":4},"end":{"line":14,"column":5}},"loc":{"start":{"line":14,"column":24},"end":{"line":17,"column":5}},"line":14},"2":{"name":"(anonymous_2)","decl":{"start":{"line":18,"column":4},"end":{"line":18,"column":5}},"loc":{"start":{"line":18,"column":38},"end":{"line":20,"column":5}},"line":18},"3":{"name":"(anonymous_3)","decl":{"start":{"line":21,"column":4},"end":{"line":21,"column":5}},"loc":{"start":{"line":21,"column":35},"end":{"line":23,"column":5}},"line":21},"4":{"name":"(anonymous_4)","decl":{"start":{"line":24,"column":4},"end":{"line":24,"column":5}},"loc":{"start":{"line":24,"column":32},"end":{"line":26,"column":5}},"line":24},"5":{"name":"(anonymous_5)","decl":{"start":{"line":27,"column":4},"end":{"line":27,"column":5}},"loc":{"start":{"line":27,"column":31},"end":{"line":41,"column":5}},"line":27},"6":{"name":"(anonymous_6)","decl":{"start":{"line":42,"column":4},"end":{"line":42,"column":5}},"loc":{"start":{"line":42,"column":22},"end":{"line":56,"column":5}},"line":42}},"branchMap":{"0":{"loc":{"start":{"line":28,"column":8},"end":{"line":30,"column":9}},"type":"if","locations":[{"start":{"line":28,"column":8},"end":{"line":30,"column":9}},{"start":{"line":28,"column":8},"end":{"line":30,"column":9}}],"line":28},"1":{"loc":{"start":{"line":32,"column":12},"end":{"line":35,"column":13}},"type":"if","locations":[{"start":{"line":32,"column":12},"end":{"line":35,"column":13}},{"start":{"line":32,"column":12},"end":{"line":35,"column":13}}],"line":32},"2":{"loc":{"start":{"line":44,"column":12},"end":{"line":50,"column":13}},"type":"if","locations":[{"start":{"line":44,"column":12},"end":{"line":50,"column":13}},{"start":{"line":44,"column":12},"end":{"line":50,"column":13}}],"line":44}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":32,"6":32,"7":171,"8":171,"9":24,"10":3,"11":2,"12":171,"13":142,"14":29,"15":29,"16":0,"17":0,"18":29,"19":0,"20":29,"21":29,"22":19,"23":19,"24":29,"25":0,"26":1},"f":{"0":32,"1":171,"2":24,"3":3,"4":2,"5":171,"6":29},"b":{"0":[142,29],"1":[0,29],"2":[19,10]},"inputSourceMap":{"version":3,"file":"/Users/fegicochen/Courses/CPSC 310/C1/project_team085/src/controller/PersistantData.ts","sources":["/Users/fegicochen/Courses/CPSC 310/C1/project_team085/src/controller/PersistantData.ts"],"names":[],"mappings":";;AAAA,uCAAkE;AAElE,qDAAgD;AAEhD,MAAM,OAAO,GAAG,MAAM,CAAC;AACvB,MAAM,SAAS,GAAG,OAAO,GAAG,YAAY,CAAC;AAEzC,MAAqB,cAAc;IAC1B,UAAU,CAAU;IACpB,QAAQ,CAAc;IAE9B;QACC,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;QACxB,IAAI,CAAC,QAAQ,GAAG,EAAE,QAAQ,EAAE,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC;IAC7C,CAAC;IAEM,KAAK,CAAC,WAAW;QACvB,MAAM,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAChC,OAAO,IAAI,CAAC,QAAU,CAAC;IACxB,CAAC;IAEM,KAAK,CAAC,kBAAkB,CAAC,OAAwB;QACvD,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACtC,CAAC;IAEM,KAAK,CAAC,eAAe,CAAC,OAAqB;QACjD,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACnC,CAAC;IAEM,KAAK,CAAC,WAAW,CAAC,QAAqB;QAC7C,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC1B,CAAC;IAEO,KAAK,CAAC,kBAAkB;QAC/B,IAAI,IAAI,CAAC,UAAU,EAAE;YACpB,OAAO;SACP;QACD,IAAI;YACH,IAAI,MAAM,IAAA,qBAAU,EAAC,SAAS,CAAC,EAAE;gBAChC,MAAM,MAAM,GAAG,MAAM,IAAA,mBAAQ,EAAC,SAAS,CAAC,CAAC;gBACzC,IAAI,CAAC,QAAQ,GAAG,MAAqB,CAAC;aACtC;YACD,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;SACvB;QAAC,OAAO,CAAC,EAAE;YACX,MAAM,IAAI,6BAAY,CAAC,iCAAiC,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;SAC9E;IACF,CAAC;IAEM,KAAK,CAAC,SAAS;QACrB,IAAI;YACH,IAAI,CAAC,CAAC,MAAM,IAAA,qBAAU,EAAC,OAAO,CAAC,CAAC,EAAE;gBACjC,IAAI;oBACH,MAAM,IAAA,gBAAK,EAAC,OAAO,CAAC,CAAC;iBACrB;gBAAC,OAAO,EAAE,EAAE;iBAEZ;aACD;YACD,MAAM,IAAA,oBAAS,EAAC,SAAS,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;SAC1C;QAAC,OAAO,CAAC,EAAE;YACX,MAAM,IAAI,6BAAY,CAAC,gCAAgC,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;SAC7E;IACF,CAAC;CACD;AAvDD,iCAuDC","sourcesContent":["import { mkdir, pathExists, readJSON, writeJSON } from \"fs-extra\";\nimport { SectionsDataset, DatasetList, RoomsDataset } from \"./Dataset\";\nimport { InsightError } from \"./IInsightFacade\";\n\nconst dataDir = \"data\";\nconst writePath = dataDir + \"/data.json\";\n\nexport default class PersistantData {\n\tprivate loadedData: boolean;\n\tprivate datasets: DatasetList;\n\n\tconstructor() {\n\t\tthis.loadedData = false;\n\t\tthis.datasets = { sections: [], rooms: [] };\n\t}\n\n\tpublic async getDatasets(): Promise<DatasetList> {\n\t\tawait this.loadDataIfRequired();\n\t\treturn this.datasets!!;\n\t}\n\n\tpublic async addSectionsDataset(dataset: SectionsDataset): Promise<void> {\n\t\tthis.datasets.sections.push(dataset);\n\t}\n\n\tpublic async addRoomsDataset(dataset: RoomsDataset): Promise<void> {\n\t\tthis.datasets.rooms.push(dataset);\n\t}\n\n\tpublic async setDatasets(datasets: DatasetList): Promise<void> {\n\t\tthis.datasets = datasets;\n\t}\n\n\tprivate async loadDataIfRequired(): Promise<void> {\n\t\tif (this.loadedData) {\n\t\t\treturn;\n\t\t}\n\t\ttry {\n\t\t\tif (await pathExists(writePath)) {\n\t\t\t\tconst pkgObj = await readJSON(writePath);\n\t\t\t\tthis.datasets = pkgObj as DatasetList;\n\t\t\t}\n\t\t\tthis.loadedData = true;\n\t\t} catch (e) {\n\t\t\tthrow new InsightError(\"Failed to read data from disc: \" + JSON.stringify(e));\n\t\t}\n\t}\n\n\tpublic async writeData(): Promise<void> {\n\t\ttry {\n\t\t\tif (!(await pathExists(dataDir))) {\n\t\t\t\ttry {\n\t\t\t\t\tawait mkdir(dataDir);\n\t\t\t\t} catch (_e) {\n\t\t\t\t\t// Its fine\n\t\t\t\t}\n\t\t\t}\n\t\t\tawait writeJSON(writePath, this.datasets);\n\t\t} catch (e) {\n\t\t\tthrow new InsightError(\"Failed to write data to disc: \" + JSON.stringify(e));\n\t\t}\n\t}\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"aeb9eeb15fc0d2b762c851c6499bd29bfa32b04e","contentHash":"74e6552add6cd831f1ccbc710f986493814544682719c8d3a2a64c87d9508a6c"},"/Users/fegicochen/Courses/CPSC 310/C1/project_team085/src/controller/SectionsDatasetProcessor.ts":{"path":"/Users/fegicochen/Courses/CPSC 310/C1/project_team085/src/controller/SectionsDatasetProcessor.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":18},"end":{"line":3,"column":38}},"2":{"start":{"line":4,"column":25},"end":{"line":4,"column":52}},"3":{"start":{"line":7,"column":25},"end":{"line":7,"column":81}},"4":{"start":{"line":8,"column":30},"end":{"line":8,"column":56}},"5":{"start":{"line":9,"column":8},"end":{"line":11,"column":9}},"6":{"start":{"line":10,"column":12},"end":{"line":10,"column":74}},"7":{"start":{"line":12,"column":28},"end":{"line":12,"column":57}},"8":{"start":{"line":13,"column":33},"end":{"line":13,"column":108}},"9":{"start":{"line":13,"column":62},"end":{"line":13,"column":107}},"10":{"start":{"line":14,"column":35},"end":{"line":28,"column":10}},"11":{"start":{"line":15,"column":32},"end":{"line":15,"column":58}},"12":{"start":{"line":16,"column":12},"end":{"line":27,"column":13}},"13":{"start":{"line":17,"column":35},"end":{"line":17,"column":58}},"14":{"start":{"line":18,"column":41},"end":{"line":18,"column":99}},"15":{"start":{"line":19,"column":36},"end":{"line":19,"column":111}},"16":{"start":{"line":20,"column":43},"end":{"line":20,"column":122}},"17":{"start":{"line":21,"column":37},"end":{"line":21,"column":90}},"18":{"start":{"line":21,"column":67},"end":{"line":21,"column":89}},"19":{"start":{"line":22,"column":45},"end":{"line":22,"column":88}},"20":{"start":{"line":22,"column":72},"end":{"line":22,"column":87}},"21":{"start":{"line":23,"column":16},"end":{"line":23,"column":44}},"22":{"start":{"line":26,"column":16},"end":{"line":26,"column":26}},"23":{"start":{"line":29,"column":37},"end":{"line":29,"column":81}},"24":{"start":{"line":30,"column":25},"end":{"line":32,"column":46}},"25":{"start":{"line":31,"column":32},"end":{"line":31,"column":61}},"26":{"start":{"line":32,"column":33},"end":{"line":32,"column":45}},"27":{"start":{"line":33,"column":8},"end":{"line":35,"column":9}},"28":{"start":{"line":34,"column":12},"end":{"line":34,"column":91}},"29":{"start":{"line":36,"column":8},"end":{"line":36,"column":24}},"30":{"start":{"line":38,"column":25},"end":{"line":50,"column":5}},"31":{"start":{"line":52,"column":8},"end":{"line":65,"column":9}},"32":{"start":{"line":53,"column":40},"end":{"line":53,"column":100}},"33":{"start":{"line":54,"column":24},"end":{"line":54,"column":100}},"34":{"start":{"line":55,"column":12},"end":{"line":58,"column":13}},"35":{"start":{"line":56,"column":43},"end":{"line":56,"column":47}},"36":{"start":{"line":57,"column":16},"end":{"line":57,"column":52}},"37":{"start":{"line":59,"column":12},"end":{"line":59,"column":34}},"38":{"start":{"line":60,"column":31},"end":{"line":60,"column":117}},"39":{"start":{"line":60,"column":81},"end":{"line":60,"column":116}},"40":{"start":{"line":61,"column":12},"end":{"line":61,"column":50}},"41":{"start":{"line":64,"column":12},"end":{"line":64,"column":29}},"42":{"start":{"line":68,"column":24},"end":{"line":68,"column":57}},"43":{"start":{"line":69,"column":8},"end":{"line":91,"column":9}},"44":{"start":{"line":71,"column":12},"end":{"line":76,"column":13}},"45":{"start":{"line":72,"column":16},"end":{"line":72,"column":89}},"46":{"start":{"line":75,"column":16},"end":{"line":75,"column":110}},"47":{"start":{"line":77,"column":12},"end":{"line":77,"column":37}},"48":{"start":{"line":79,"column":13},"end":{"line":91,"column":9}},"49":{"start":{"line":81,"column":12},"end":{"line":86,"column":13}},"50":{"start":{"line":82,"column":16},"end":{"line":82,"column":89}},"51":{"start":{"line":85,"column":16},"end":{"line":85,"column":100}},"52":{"start":{"line":87,"column":12},"end":{"line":87,"column":37}},"53":{"start":{"line":90,"column":12},"end":{"line":90,"column":88}},"54":{"start":{"line":94,"column":33},"end":{"line":94,"column":42}},"55":{"start":{"line":95,"column":8},"end":{"line":95,"column":61}},"56":{"start":{"line":96,"column":8},"end":{"line":96,"column":63}},"57":{"start":{"line":97,"column":8},"end":{"line":97,"column":65}},"58":{"start":{"line":98,"column":8},"end":{"line":98,"column":74}},"59":{"start":{"line":99,"column":8},"end":{"line":99,"column":66}},"60":{"start":{"line":100,"column":8},"end":{"line":100,"column":63}},"61":{"start":{"line":101,"column":8},"end":{"line":101,"column":61}},"62":{"start":{"line":102,"column":8},"end":{"line":102,"column":63}},"63":{"start":{"line":103,"column":8},"end":{"line":103,"column":63}},"64":{"start":{"line":104,"column":8},"end":{"line":104,"column":65}},"65":{"start":{"line":105,"column":8},"end":{"line":107,"column":9}},"66":{"start":{"line":106,"column":12},"end":{"line":106,"column":97}},"67":{"start":{"line":108,"column":8},"end":{"line":108,"column":45}},"68":{"start":{"line":111,"column":0},"end":{"line":111,"column":43}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":6,"column":4},"end":{"line":6,"column":5}},"loc":{"start":{"line":6,"column":43},"end":{"line":37,"column":5}},"line":6},"1":{"name":"(anonymous_1)","decl":{"start":{"line":13,"column":52},"end":{"line":13,"column":53}},"loc":{"start":{"line":13,"column":62},"end":{"line":13,"column":107}},"line":13},"2":{"name":"(anonymous_2)","decl":{"start":{"line":14,"column":56},"end":{"line":14,"column":57}},"loc":{"start":{"line":14,"column":72},"end":{"line":28,"column":9}},"line":14},"3":{"name":"(anonymous_3)","decl":{"start":{"line":21,"column":60},"end":{"line":21,"column":61}},"loc":{"start":{"line":21,"column":67},"end":{"line":21,"column":89}},"line":21},"4":{"name":"(anonymous_4)","decl":{"start":{"line":22,"column":65},"end":{"line":22,"column":66}},"loc":{"start":{"line":22,"column":72},"end":{"line":22,"column":87}},"line":22},"5":{"name":"(anonymous_5)","decl":{"start":{"line":31,"column":20},"end":{"line":31,"column":21}},"loc":{"start":{"line":31,"column":32},"end":{"line":31,"column":61}},"line":31},"6":{"name":"(anonymous_6)","decl":{"start":{"line":32,"column":21},"end":{"line":32,"column":22}},"loc":{"start":{"line":32,"column":33},"end":{"line":32,"column":45}},"line":32},"7":{"name":"(anonymous_7)","decl":{"start":{"line":51,"column":4},"end":{"line":51,"column":5}},"loc":{"start":{"line":51,"column":39},"end":{"line":66,"column":5}},"line":51},"8":{"name":"(anonymous_8)","decl":{"start":{"line":60,"column":61},"end":{"line":60,"column":62}},"loc":{"start":{"line":60,"column":81},"end":{"line":60,"column":116}},"line":60},"9":{"name":"(anonymous_9)","decl":{"start":{"line":67,"column":4},"end":{"line":67,"column":5}},"loc":{"start":{"line":67,"column":42},"end":{"line":92,"column":5}},"line":67},"10":{"name":"(anonymous_10)","decl":{"start":{"line":93,"column":4},"end":{"line":93,"column":5}},"loc":{"start":{"line":93,"column":40},"end":{"line":109,"column":5}},"line":93}},"branchMap":{"0":{"loc":{"start":{"line":9,"column":8},"end":{"line":11,"column":9}},"type":"if","locations":[{"start":{"line":9,"column":8},"end":{"line":11,"column":9}},{"start":{"line":9,"column":8},"end":{"line":11,"column":9}}],"line":9},"1":{"loc":{"start":{"line":13,"column":62},"end":{"line":13,"column":107}},"type":"binary-expr","locations":[{"start":{"line":13,"column":62},"end":{"line":13,"column":94}},{"start":{"line":13,"column":98},"end":{"line":13,"column":107}}],"line":13},"2":{"loc":{"start":{"line":33,"column":8},"end":{"line":35,"column":9}},"type":"if","locations":[{"start":{"line":33,"column":8},"end":{"line":35,"column":9}},{"start":{"line":33,"column":8},"end":{"line":35,"column":9}}],"line":33},"3":{"loc":{"start":{"line":55,"column":12},"end":{"line":58,"column":13}},"type":"if","locations":[{"start":{"line":55,"column":12},"end":{"line":58,"column":13}},{"start":{"line":55,"column":12},"end":{"line":58,"column":13}}],"line":55},"4":{"loc":{"start":{"line":55,"column":16},"end":{"line":55,"column":70}},"type":"binary-expr","locations":[{"start":{"line":55,"column":16},"end":{"line":55,"column":34}},{"start":{"line":55,"column":38},"end":{"line":55,"column":70}}],"line":55},"5":{"loc":{"start":{"line":69,"column":8},"end":{"line":91,"column":9}},"type":"if","locations":[{"start":{"line":69,"column":8},"end":{"line":91,"column":9}},{"start":{"line":69,"column":8},"end":{"line":91,"column":9}}],"line":69},"6":{"loc":{"start":{"line":79,"column":13},"end":{"line":91,"column":9}},"type":"if","locations":[{"start":{"line":79,"column":13},"end":{"line":91,"column":9}},{"start":{"line":79,"column":13},"end":{"line":91,"column":9}}],"line":79},"7":{"loc":{"start":{"line":105,"column":8},"end":{"line":107,"column":9}},"type":"if","locations":[{"start":{"line":105,"column":8},"end":{"line":107,"column":9}},{"start":{"line":105,"column":8},"end":{"line":107,"column":9}}],"line":105}},"s":{"0":1,"1":1,"2":1,"3":33,"4":30,"5":30,"6":0,"7":30,"8":30,"9":6038,"10":30,"11":6006,"12":6006,"13":6006,"14":6001,"15":6001,"16":6001,"17":6001,"18":67490,"19":6001,"20":67490,"21":6001,"22":5,"23":30,"24":30,"25":6006,"26":6006,"27":30,"28":6,"29":24,"30":1,"31":67490,"32":67490,"33":67490,"34":67488,"35":25393,"36":25393,"37":67488,"38":67488,"39":674880,"40":67488,"41":2,"42":674880,"43":674880,"44":337440,"45":337440,"46":42095,"47":337440,"48":337440,"49":337440,"50":337440,"51":67488,"52":337440,"53":0,"54":674880,"55":674880,"56":674880,"57":674880,"58":674880,"59":674880,"60":674880,"61":674880,"62":674880,"63":674880,"64":674880,"65":674880,"66":0,"67":674880,"68":1},"f":{"0":33,"1":6038,"2":6006,"3":67490,"4":67490,"5":6006,"6":6006,"7":67490,"8":674880,"9":674880,"10":674880},"b":{"0":[0,30],"1":[6038,6036],"2":[6,24],"3":[25393,42095],"4":[67488,67488],"5":[337440,337440],"6":[337440,0],"7":[0,674880]},"inputSourceMap":{"version":3,"file":"/Users/fegicochen/Courses/CPSC 310/C1/project_team085/src/controller/SectionsDatasetProcessor.ts","sources":["/Users/fegicochen/Courses/CPSC 310/C1/project_team085/src/controller/SectionsDatasetProcessor.ts"],"names":[],"mappings":";;AAAA,uCAA6D;AAC7D,qDAAgD;AAChD,MAAqB,wBAAwB;IAMrC,MAAM,CAAC,KAAK,CAAC,gBAAgB,CAAC,OAAe;QACnD,MAAM,QAAQ,GAAG,MAAM,sBAAY,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC;QAGhE,MAAM,aAAa,GAAG,QAAQ,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;QACjD,IAAI,aAAa,KAAK,IAAI,EAAE;YAC3B,MAAM,IAAI,6BAAY,CAAC,oBAAoB,CAAC,CAAC;SAC7C;QAGD,MAAM,WAAW,GAAG,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QAElD,MAAM,gBAAgB,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAErG,MAAM,kBAAkB,GAAG,gBAAgB,CAAC,GAAG,CAAC,KAAK,EAAE,IAAI,EAAE,EAAE;YAC9D,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;YAC/C,IAAI;gBACH,MAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;gBAC3C,MAAM,gBAAgB,GAAG,sBAAY,CAAC,aAAa,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;gBAC1E,MAAM,WAAW,GAAG,sBAAY,CAAC,cAAc,CAAC,gBAAgB,EAAE,CAAC,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;gBACtF,MAAM,kBAAkB,GAAG,sBAAY,CAAC,YAAY,CAAC,eAAe,EAAE,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACjG,MAAM,YAAY,GAAG,kBAAkB,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC3E,MAAM,oBAAoB,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,KAAK,SAAS,CAAc,CAAC;gBAEtF,OAAO,oBAAoB,CAAC;aAC5B;YAAC,OAAO,EAAE,EAAE;gBACZ,OAAO,EAAE,CAAC;aACV;QACF,CAAC,CAAC,CAAC;QAEH,MAAM,oBAAoB,GAAG,MAAM,OAAO,CAAC,UAAU,CAAC,kBAAkB,CAAC,CAAC;QAC1E,MAAM,QAAQ,GAAG,oBAAoB;aACnC,MAAM,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,MAAM,KAAK,WAAW,CAAC;aACjD,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE,CAAE,MAA4C,CAAC,KAAK,CAAC,CAAC;QAG3E,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;YAC1B,MAAM,IAAI,6BAAY,CAAC,qCAAqC,CAAC,CAAC;SAC9D;QAED,OAAO,QAAQ,CAAC;IACjB,CAAC;IAEO,MAAM,CAAC,WAAW,GAAwB;QACjD,CAAC,IAAI,EAAE,IAAI,CAAC;QACZ,CAAC,QAAQ,EAAE,IAAI,CAAC;QAChB,CAAC,OAAO,EAAE,IAAI,CAAC;QACf,CAAC,WAAW,EAAE,IAAI,CAAC;QACnB,CAAC,SAAS,EAAE,IAAI,CAAC;QACjB,CAAC,MAAM,EAAE,IAAI,CAAC;QACd,CAAC,KAAK,EAAE,IAAI,CAAC;QACb,CAAC,MAAM,EAAE,IAAI,CAAC;QACd,CAAC,MAAM,EAAE,IAAI,CAAC;QACd,CAAC,OAAO,EAAE,IAAI,CAAC;QACf,CAAC,SAAS,EAAE,KAAK,CAAC;KAClB,CAAC;IAEK,MAAM,CAAC,cAAc,CAAC,WAAoB;QAChD,IAAI;YACH,MAAM,mBAAmB,GAAG,sBAAY,CAAC,aAAa,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;YAC/E,MAAM,GAAG,GAAG,sBAAY,CAAC,cAAc,CAAC,mBAAmB,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;YAG/E,IAAI,GAAG,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,GAAG,CAAC,GAAG,CAAC,SAAS,CAAC,KAAK,SAAS,EAAE;gBAC3D,MAAM,kBAAkB,GAAG,IAAI,CAAC;gBAChC,GAAG,CAAC,GAAG,CAAC,MAAM,EAAE,kBAAkB,CAAC,CAAC;aACpC;YACD,GAAG,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;YAEtB,MAAM,UAAU,GAAG,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,OAAO,EAAE,GAAG,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;YAE1G,OAAO,MAAM,CAAC,WAAW,CAAC,UAAU,CAAuB,CAAC;SAC5D;QAAC,OAAO,EAAE,EAAE;YACZ,OAAO,SAAS,CAAC;SACjB;IACF,CAAC;IAEO,MAAM,CAAC,gBAAgB,CAAC,OAAe,EAAE,GAAY;QAC5D,MAAM,OAAO,GAAG,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC;QAClD,IAAI,sBAAY,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE;YACjC,IAAI,MAAc,CAAC;YACnB,IAAI;gBACH,MAAM,GAAG,sBAAY,CAAC,aAAa,CAAC,UAAU,GAAG,OAAO,EAAE,GAAG,CAAC,CAAC;aAC/D;YAAC,OAAO,EAAE,EAAE;gBACZ,MAAM,GAAG,MAAM,CAAC,QAAQ,CAAC,sBAAY,CAAC,aAAa,CAAC,UAAU,GAAG,OAAO,EAAE,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC;aACpF;YACD,OAAO,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;SACzB;aAAM,IAAI,sBAAY,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE;YACxC,IAAI,MAAc,CAAC;YACnB,IAAI;gBACH,MAAM,GAAG,sBAAY,CAAC,aAAa,CAAC,UAAU,GAAG,OAAO,EAAE,GAAG,CAAC,CAAC;aAC/D;YAAC,OAAO,EAAE,EAAE;gBACZ,MAAM,GAAG,sBAAY,CAAC,aAAa,CAAC,UAAU,GAAG,OAAO,EAAE,GAAG,CAAC,CAAC,QAAQ,EAAE,CAAC;aAC1E;YACD,OAAO,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;SACzB;aAAM;YACN,MAAM,IAAI,6BAAY,CAAC,kCAAkC,CAAC,CAAC;SAC3D;IACF,CAAC;IAEO,MAAM,CAAC,mBAAmB,CAAC,OAAe;QACjD,MAAM,gBAAgB,GAAG,IAAI,GAAG,EAAqB,CAAC;QACtD,gBAAgB,CAAC,GAAG,CAAC,IAAI,EAAE,mBAAS,CAAC,IAAI,CAAC,CAAC;QAC3C,gBAAgB,CAAC,GAAG,CAAC,QAAQ,EAAE,mBAAS,CAAC,EAAE,CAAC,CAAC;QAC7C,gBAAgB,CAAC,GAAG,CAAC,OAAO,EAAE,mBAAS,CAAC,KAAK,CAAC,CAAC;QAC/C,gBAAgB,CAAC,GAAG,CAAC,WAAW,EAAE,mBAAS,CAAC,UAAU,CAAC,CAAC;QACxD,gBAAgB,CAAC,GAAG,CAAC,SAAS,EAAE,mBAAS,CAAC,IAAI,CAAC,CAAC;QAChD,gBAAgB,CAAC,GAAG,CAAC,MAAM,EAAE,mBAAS,CAAC,IAAI,CAAC,CAAC;QAC7C,gBAAgB,CAAC,GAAG,CAAC,KAAK,EAAE,mBAAS,CAAC,GAAG,CAAC,CAAC;QAC3C,gBAAgB,CAAC,GAAG,CAAC,MAAM,EAAE,mBAAS,CAAC,IAAI,CAAC,CAAC;QAC7C,gBAAgB,CAAC,GAAG,CAAC,MAAM,EAAE,mBAAS,CAAC,IAAI,CAAC,CAAC;QAC7C,gBAAgB,CAAC,GAAG,CAAC,OAAO,EAAE,mBAAS,CAAC,KAAK,CAAC,CAAC;QAC/C,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE;YACnC,MAAM,IAAI,6BAAY,CAAC,2CAA2C,CAAC,CAAC;SACpE;QACD,OAAO,gBAAgB,CAAC,GAAG,CAAC,OAAO,CAAG,CAAC;IACxC,CAAC;;AA1HF,2CA2HC","sourcesContent":["import { DatasetId, DatasetUtils, Section } from \"./Dataset\";\nimport { InsightError } from \"./IInsightFacade\";\nexport default class SectionsDatasetProcessor {\n\t/**\n\t *\n\t * @param content zip file\n\t * @returns Returns the valid sections from zip file\n\t */\n\tpublic static async getValidSections(content: string): Promise<Section[]> {\n\t\tconst unzipped = await DatasetUtils.unzipBase64Content(content);\n\n\t\t// Check if unzipped file has courses folder\n\t\tconst coursesFolder = unzipped.folder(\"courses\");\n\t\tif (coursesFolder === null) {\n\t\t\tthrow new InsightError(\"No courses folder!\");\n\t\t}\n\n\t\t// Go through files in courses folder\n\t\tconst courseFiles = Object.values(unzipped.files);\n\t\t// Filters for valid JSON files in courses folder\n\t\tconst validCourseFiles = courseFiles.filter((file) => file.name.startsWith(\"courses/\") && !file.dir);\n\t\t// Map over valid files to read content\n\t\tconst courseFilePromises = validCourseFiles.map(async (file) => {\n\t\t\tconst jsonContent = await file.async(\"string\");\n\t\t\ttry {\n\t\t\t\tconst parsedData = JSON.parse(jsonContent);\n\t\t\t\tconst parsedDataObject = DatasetUtils.checkIsObject(\"result\", parsedData);\n\t\t\t\tconst resultInMap = DatasetUtils.requireHasKeys(parsedDataObject, [[\"result\", true]]);\n\t\t\t\tconst arrayOfSectionLike = DatasetUtils.checkIsArray(\"section array\", resultInMap.get(\"result\"));\n\t\t\t\tconst sectionArray = arrayOfSectionLike.map((x) => this.checkIsSection(x));\n\t\t\t\tconst sectionFilteredArray = sectionArray.filter((x) => x !== undefined) as Section[];\n\n\t\t\t\treturn sectionFilteredArray; // Return the valid sections\n\t\t\t} catch (_e) {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t});\n\t\t// Wait for all promises to fulfill or reject, filter results for fulfilled promises and flatten the section arrays\n\t\tconst courseSectionsArrays = await Promise.allSettled(courseFilePromises);\n\t\tconst sections = courseSectionsArrays\n\t\t\t.filter((result) => result.status === \"fulfilled\")\n\t\t\t.flatMap((result) => (result as PromiseFulfilledResult<Section[]>).value);\n\n\t\t// Check if there's at least one valid section\n\t\tif (sections.length === 0) {\n\t\t\tthrow new InsightError(\"No valid sections found in content!\");\n\t\t}\n\n\t\treturn sections;\n\t}\n\n\tprivate static sectionKeys: [string, boolean][] = [\n\t\t[\"id\", true],\n\t\t[\"Course\", true],\n\t\t[\"Title\", true],\n\t\t[\"Professor\", true],\n\t\t[\"Subject\", true],\n\t\t[\"Year\", true],\n\t\t[\"Avg\", true],\n\t\t[\"Pass\", true],\n\t\t[\"Fail\", true],\n\t\t[\"Audit\", true],\n\t\t[\"Section\", false],\n\t];\n\n\tpublic static checkIsSection(sectionLike: unknown): Section | undefined {\n\t\ttry {\n\t\t\tconst sectionLikeIsObject = DatasetUtils.checkIsObject(\"section\", sectionLike);\n\t\t\tconst map = DatasetUtils.requireHasKeys(sectionLikeIsObject, this.sectionKeys);\n\n\t\t\t// Check for overall secton\n\t\t\tif (map.has(\"Section\") && map.get(\"Section\") === \"overall\") {\n\t\t\t\tconst overallSectionYear = 1900;\n\t\t\t\tmap.set(\"Year\", overallSectionYear);\n\t\t\t}\n\t\t\tmap.delete(\"Section\");\n\n\t\t\tconst sectionKVP = Array.from(map.entries()).map(([fileKey, val]) => this.parseSectionKeys(fileKey, val));\n\n\t\t\treturn Object.fromEntries(sectionKVP) as unknown as Section;\n\t\t} catch (_e) {\n\t\t\treturn undefined;\n\t\t}\n\t}\n\n\tprivate static parseSectionKeys(fileKey: string, val: unknown): [DatasetId, string | number] {\n\t\tconst dsetKey = this.mapFileToDatasetKey(fileKey);\n\t\tif (DatasetUtils.isMKey(dsetKey)) {\n\t\t\tlet numVal: number;\n\t\t\ttry {\n\t\t\t\tnumVal = DatasetUtils.checkIsNumber(\"section \" + dsetKey, val);\n\t\t\t} catch (_e) {\n\t\t\t\tnumVal = Number.parseInt(DatasetUtils.checkIsString(\"section \" + dsetKey, val), 10);\n\t\t\t}\n\t\t\treturn [dsetKey, numVal];\n\t\t} else if (DatasetUtils.isSKey(dsetKey)) {\n\t\t\tlet strVal: string;\n\t\t\ttry {\n\t\t\t\tstrVal = DatasetUtils.checkIsString(\"section \" + dsetKey, val);\n\t\t\t} catch (_e) {\n\t\t\t\tstrVal = DatasetUtils.checkIsNumber(\"section \" + dsetKey, val).toString();\n\t\t\t}\n\t\t\treturn [dsetKey, strVal];\n\t\t} else {\n\t\t\tthrow new InsightError(\"Key value not a number or string\");\n\t\t}\n\t}\n\n\tprivate static mapFileToDatasetKey(fileKey: string): DatasetId {\n\t\tconst fileToDatasetMap = new Map<string, DatasetId>();\n\t\tfileToDatasetMap.set(\"id\", DatasetId.Uuid);\n\t\tfileToDatasetMap.set(\"Course\", DatasetId.Id);\n\t\tfileToDatasetMap.set(\"Title\", DatasetId.Title);\n\t\tfileToDatasetMap.set(\"Professor\", DatasetId.Instructor);\n\t\tfileToDatasetMap.set(\"Subject\", DatasetId.Dept);\n\t\tfileToDatasetMap.set(\"Year\", DatasetId.Year);\n\t\tfileToDatasetMap.set(\"Avg\", DatasetId.Avg);\n\t\tfileToDatasetMap.set(\"Pass\", DatasetId.Pass);\n\t\tfileToDatasetMap.set(\"Fail\", DatasetId.Fail);\n\t\tfileToDatasetMap.set(\"Audit\", DatasetId.Audit);\n\t\tif (!fileToDatasetMap.has(fileKey)) {\n\t\t\tthrow new InsightError(\"File key does not correspond to DatasetId\");\n\t\t}\n\t\treturn fileToDatasetMap.get(fileKey)!!;\n\t}\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"2510d1670bf8a822b7abda47203738e052123834","contentHash":"dd38c35b3ee992b323b184adcac5b4bbe4da76b9ccd6807ec6be403e43665198"},"/Users/fegicochen/Courses/CPSC 310/C1/project_team085/src/controller/RoomsDatasetProcessor.ts":{"path":"/Users/fegicochen/Courses/CPSC 310/C1/project_team085/src/controller/RoomsDatasetProcessor.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":12,"column":3}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":33}},"2":{"start":{"line":3,"column":26},"end":{"line":3,"column":33}},"3":{"start":{"line":4,"column":15},"end":{"line":4,"column":52}},"4":{"start":{"line":5,"column":4},"end":{"line":7,"column":5}},"5":{"start":{"line":6,"column":6},"end":{"line":6,"column":68}},"6":{"start":{"line":6,"column":51},"end":{"line":6,"column":63}},"7":{"start":{"line":8,"column":4},"end":{"line":8,"column":39}},"8":{"start":{"line":10,"column":4},"end":{"line":10,"column":33}},"9":{"start":{"line":10,"column":26},"end":{"line":10,"column":33}},"10":{"start":{"line":11,"column":4},"end":{"line":11,"column":17}},"11":{"start":{"line":13,"column":25},"end":{"line":17,"column":2}},"12":{"start":{"line":14,"column":4},"end":{"line":14,"column":72}},"13":{"start":{"line":16,"column":4},"end":{"line":16,"column":21}},"14":{"start":{"line":18,"column":19},"end":{"line":24,"column":1}},"15":{"start":{"line":19,"column":4},"end":{"line":19,"column":42}},"16":{"start":{"line":19,"column":31},"end":{"line":19,"column":42}},"17":{"start":{"line":20,"column":17},"end":{"line":20,"column":19}},"18":{"start":{"line":21,"column":4},"end":{"line":21,"column":141}},"19":{"start":{"line":21,"column":21},"end":{"line":21,"column":141}},"20":{"start":{"line":21,"column":40},"end":{"line":21,"column":141}},"21":{"start":{"line":21,"column":109},"end":{"line":21,"column":141}},"22":{"start":{"line":22,"column":4},"end":{"line":22,"column":36}},"23":{"start":{"line":23,"column":4},"end":{"line":23,"column":18}},"24":{"start":{"line":25,"column":0},"end":{"line":25,"column":62}},"25":{"start":{"line":26,"column":0},"end":{"line":26,"column":39}},"26":{"start":{"line":27,"column":17},"end":{"line":27,"column":34}},"27":{"start":{"line":28,"column":18},"end":{"line":28,"column":38}},"28":{"start":{"line":29,"column":25},"end":{"line":29,"column":52}},"29":{"start":{"line":30,"column":13},"end":{"line":30,"column":47}},"30":{"start":{"line":31,"column":26},"end":{"line":31,"column":37}},"31":{"start":{"line":34,"column":25},"end":{"line":34,"column":81}},"32":{"start":{"line":35,"column":26},"end":{"line":35,"column":58}},"33":{"start":{"line":36,"column":8},"end":{"line":38,"column":9}},"34":{"start":{"line":37,"column":12},"end":{"line":37,"column":74}},"35":{"start":{"line":39,"column":33},"end":{"line":39,"column":64}},"36":{"start":{"line":40,"column":30},"end":{"line":40,"column":67}},"37":{"start":{"line":41,"column":27},"end":{"line":41,"column":61}},"38":{"start":{"line":42,"column":31},"end":{"line":42,"column":63}},"39":{"start":{"line":43,"column":8},"end":{"line":45,"column":9}},"40":{"start":{"line":44,"column":12},"end":{"line":44,"column":71}},"41":{"start":{"line":46,"column":32},"end":{"line":46,"column":74}},"42":{"start":{"line":47,"column":25},"end":{"line":47,"column":78}},"43":{"start":{"line":48,"column":8},"end":{"line":48,"column":24}},"44":{"start":{"line":51,"column":22},"end":{"line":53,"column":81}},"45":{"start":{"line":52,"column":27},"end":{"line":52,"column":88}},"46":{"start":{"line":53,"column":31},"end":{"line":53,"column":78}},"47":{"start":{"line":54,"column":32},"end":{"line":68,"column":11}},"48":{"start":{"line":55,"column":38},"end":{"line":55,"column":68}},"49":{"start":{"line":56,"column":33},"end":{"line":59,"column":62}},"50":{"start":{"line":59,"column":39},"end":{"line":59,"column":61}},"51":{"start":{"line":60,"column":12},"end":{"line":62,"column":13}},"52":{"start":{"line":61,"column":16},"end":{"line":61,"column":26}},"53":{"start":{"line":63,"column":33},"end":{"line":63,"column":72}},"54":{"start":{"line":64,"column":12},"end":{"line":66,"column":13}},"55":{"start":{"line":65,"column":16},"end":{"line":65,"column":26}},"56":{"start":{"line":67,"column":12},"end":{"line":67,"column":77}},"57":{"start":{"line":69,"column":8},"end":{"line":69,"column":38}},"58":{"start":{"line":72,"column":20},"end":{"line":72,"column":29}},"59":{"start":{"line":73,"column":8},"end":{"line":88,"column":9}},"60":{"start":{"line":74,"column":37},"end":{"line":86,"column":13}},"61":{"start":{"line":75,"column":44},"end":{"line":75,"column":86}},"62":{"start":{"line":76,"column":16},"end":{"line":78,"column":17}},"63":{"start":{"line":77,"column":20},"end":{"line":77,"column":37}},"64":{"start":{"line":79,"column":16},"end":{"line":85,"column":18}},"65":{"start":{"line":87,"column":12},"end":{"line":87,"column":54}},"66":{"start":{"line":89,"column":8},"end":{"line":89,"column":19}},"67":{"start":{"line":93,"column":8},"end":{"line":98,"column":9}},"68":{"start":{"line":94,"column":12},"end":{"line":94,"column":54}},"69":{"start":{"line":97,"column":12},"end":{"line":97,"column":22}},"70":{"start":{"line":99,"column":22},"end":{"line":99,"column":24}},"71":{"start":{"line":100,"column":8},"end":{"line":109,"column":11}},"72":{"start":{"line":101,"column":12},"end":{"line":108,"column":13}},"73":{"start":{"line":102,"column":29},"end":{"line":102,"column":77}},"74":{"start":{"line":103,"column":16},"end":{"line":105,"column":17}},"75":{"start":{"line":104,"column":20},"end":{"line":104,"column":37}},"76":{"start":{"line":110,"column":8},"end":{"line":110,"column":21}},"77":{"start":{"line":118,"column":8},"end":{"line":136,"column":9}},"78":{"start":{"line":119,"column":12},"end":{"line":135,"column":13}},"79":{"start":{"line":120,"column":16},"end":{"line":134,"column":17}},"80":{"start":{"line":121,"column":20},"end":{"line":121,"column":77}},"81":{"start":{"line":123,"column":21},"end":{"line":134,"column":17}},"82":{"start":{"line":124,"column":20},"end":{"line":124,"column":60}},"83":{"start":{"line":126,"column":21},"end":{"line":134,"column":17}},"84":{"start":{"line":127,"column":20},"end":{"line":127,"column":55}},"85":{"start":{"line":129,"column":21},"end":{"line":134,"column":17}},"86":{"start":{"line":130,"column":20},"end":{"line":130,"column":86}},"87":{"start":{"line":132,"column":21},"end":{"line":134,"column":17}},"88":{"start":{"line":133,"column":20},"end":{"line":133,"column":92}},"89":{"start":{"line":137,"column":8},"end":{"line":149,"column":10}},"90":{"start":{"line":152,"column":8},"end":{"line":156,"column":11}},"91":{"start":{"line":153,"column":12},"end":{"line":155,"column":13}},"92":{"start":{"line":154,"column":16},"end":{"line":154,"column":30}},"93":{"start":{"line":159,"column":8},"end":{"line":159,"column":58}},"94":{"start":{"line":159,"column":37},"end":{"line":159,"column":56}},"95":{"start":{"line":162,"column":8},"end":{"line":162,"column":61}},"96":{"start":{"line":162,"column":40},"end":{"line":162,"column":59}},"97":{"start":{"line":165,"column":25},"end":{"line":165,"column":74}},"98":{"start":{"line":165,"column":51},"end":{"line":165,"column":73}},"99":{"start":{"line":166,"column":8},"end":{"line":166,"column":31}},"100":{"start":{"line":169,"column":8},"end":{"line":169,"column":45}},"101":{"start":{"line":172,"column":8},"end":{"line":174,"column":9}},"102":{"start":{"line":173,"column":12},"end":{"line":173,"column":25}},"103":{"start":{"line":175,"column":23},"end":{"line":175,"column":39}},"104":{"start":{"line":176,"column":8},"end":{"line":176,"column":62}},"105":{"start":{"line":179,"column":23},"end":{"line":179,"column":39}},"106":{"start":{"line":180,"column":8},"end":{"line":182,"column":9}},"107":{"start":{"line":181,"column":12},"end":{"line":181,"column":25}},"108":{"start":{"line":183,"column":8},"end":{"line":183,"column":110}},"109":{"start":{"line":183,"column":37},"end":{"line":183,"column":65}},"110":{"start":{"line":183,"column":90},"end":{"line":183,"column":102}},"111":{"start":{"line":186,"column":8},"end":{"line":198,"column":28}},"112":{"start":{"line":188,"column":32},"end":{"line":188,"column":45}},"113":{"start":{"line":189,"column":12},"end":{"line":191,"column":13}},"114":{"start":{"line":190,"column":16},"end":{"line":190,"column":33}},"115":{"start":{"line":192,"column":12},"end":{"line":192,"column":31}},"116":{"start":{"line":194,"column":31},"end":{"line":194,"column":50}},"117":{"start":{"line":195,"column":31},"end":{"line":195,"column":55}},"118":{"start":{"line":196,"column":30},"end":{"line":196,"column":57}},"119":{"start":{"line":197,"column":27},"end":{"line":197,"column":42}},"120":{"start":{"line":198,"column":24},"end":{"line":198,"column":25}},"121":{"start":{"line":204,"column":8},"end":{"line":216,"column":9}},"122":{"start":{"line":205,"column":12},"end":{"line":215,"column":13}},"123":{"start":{"line":206,"column":16},"end":{"line":214,"column":17}},"124":{"start":{"line":207,"column":20},"end":{"line":207,"column":93}},"125":{"start":{"line":209,"column":21},"end":{"line":214,"column":17}},"126":{"start":{"line":210,"column":20},"end":{"line":210,"column":70}},"127":{"start":{"line":212,"column":21},"end":{"line":214,"column":17}},"128":{"start":{"line":213,"column":20},"end":{"line":213,"column":67}},"129":{"start":{"line":217,"column":8},"end":{"line":223,"column":9}},"130":{"start":{"line":217,"column":61},"end":{"line":217,"column":76}},"131":{"start":{"line":218,"column":12},"end":{"line":222,"column":14}},"132":{"start":{"line":224,"column":8},"end":{"line":224,"column":25}},"133":{"start":{"line":227,"column":8},"end":{"line":232,"column":9}},"134":{"start":{"line":228,"column":24},"end":{"line":228,"column":59}},"135":{"start":{"line":229,"column":12},"end":{"line":231,"column":13}},"136":{"start":{"line":230,"column":16},"end":{"line":230,"column":27}},"137":{"start":{"line":233,"column":8},"end":{"line":233,"column":78}},"138":{"start":{"line":236,"column":8},"end":{"line":244,"column":9}},"139":{"start":{"line":237,"column":12},"end":{"line":243,"column":13}},"140":{"start":{"line":238,"column":16},"end":{"line":242,"column":17}},"141":{"start":{"line":239,"column":57},"end":{"line":240,"column":113}},"142":{"start":{"line":240,"column":53},"end":{"line":240,"column":112}},"143":{"start":{"line":241,"column":20},"end":{"line":241,"column":33}},"144":{"start":{"line":245,"column":25},"end":{"line":245,"column":41}},"145":{"start":{"line":246,"column":8},"end":{"line":253,"column":9}},"146":{"start":{"line":247,"column":12},"end":{"line":252,"column":13}},"147":{"start":{"line":248,"column":28},"end":{"line":248,"column":89}},"148":{"start":{"line":249,"column":16},"end":{"line":251,"column":17}},"149":{"start":{"line":250,"column":20},"end":{"line":250,"column":31}},"150":{"start":{"line":254,"column":8},"end":{"line":254,"column":25}},"151":{"start":{"line":257,"column":31},"end":{"line":257,"column":58}},"152":{"start":{"line":258,"column":20},"end":{"line":258,"column":100}},"153":{"start":{"line":259,"column":25},"end":{"line":264,"column":13}},"154":{"start":{"line":259,"column":44},"end":{"line":264,"column":10}},"155":{"start":{"line":260,"column":24},"end":{"line":260,"column":37}},"156":{"start":{"line":261,"column":12},"end":{"line":261,"column":54}},"157":{"start":{"line":261,"column":40},"end":{"line":261,"column":52}},"158":{"start":{"line":262,"column":12},"end":{"line":262,"column":50}},"159":{"start":{"line":262,"column":37},"end":{"line":262,"column":48}},"160":{"start":{"line":263,"column":12},"end":{"line":263,"column":22}},"161":{"start":{"line":265,"column":19},"end":{"line":265,"column":21}},"162":{"start":{"line":266,"column":8},"end":{"line":268,"column":9}},"163":{"start":{"line":267,"column":12},"end":{"line":267,"column":26}},"164":{"start":{"line":269,"column":8},"end":{"line":269,"column":32}},"165":{"start":{"line":272,"column":0},"end":{"line":272,"column":54}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":74},"end":{"line":2,"column":75}},"loc":{"start":{"line":2,"column":96},"end":{"line":9,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":6,"column":38},"end":{"line":6,"column":39}},"loc":{"start":{"line":6,"column":49},"end":{"line":6,"column":65}},"line":6},"2":{"name":"(anonymous_2)","decl":{"start":{"line":9,"column":6},"end":{"line":9,"column":7}},"loc":{"start":{"line":9,"column":28},"end":{"line":12,"column":1}},"line":9},"3":{"name":"(anonymous_3)","decl":{"start":{"line":13,"column":80},"end":{"line":13,"column":81}},"loc":{"start":{"line":13,"column":95},"end":{"line":15,"column":1}},"line":13},"4":{"name":"(anonymous_4)","decl":{"start":{"line":15,"column":5},"end":{"line":15,"column":6}},"loc":{"start":{"line":15,"column":20},"end":{"line":17,"column":1}},"line":15},"5":{"name":"(anonymous_5)","decl":{"start":{"line":18,"column":50},"end":{"line":18,"column":51}},"loc":{"start":{"line":18,"column":65},"end":{"line":24,"column":1}},"line":18},"6":{"name":"(anonymous_6)","decl":{"start":{"line":33,"column":4},"end":{"line":33,"column":5}},"loc":{"start":{"line":33,"column":40},"end":{"line":49,"column":5}},"line":33},"7":{"name":"(anonymous_7)","decl":{"start":{"line":50,"column":4},"end":{"line":50,"column":5}},"loc":{"start":{"line":50,"column":60},"end":{"line":70,"column":5}},"line":50},"8":{"name":"(anonymous_8)","decl":{"start":{"line":52,"column":20},"end":{"line":52,"column":21}},"loc":{"start":{"line":52,"column":27},"end":{"line":52,"column":88}},"line":52},"9":{"name":"(anonymous_9)","decl":{"start":{"line":53,"column":17},"end":{"line":53,"column":18}},"loc":{"start":{"line":53,"column":31},"end":{"line":53,"column":78}},"line":53},"10":{"name":"(anonymous_10)","decl":{"start":{"line":54,"column":60},"end":{"line":54,"column":61}},"loc":{"start":{"line":54,"column":76},"end":{"line":68,"column":9}},"line":54},"11":{"name":"(anonymous_11)","decl":{"start":{"line":59,"column":22},"end":{"line":59,"column":23}},"loc":{"start":{"line":59,"column":39},"end":{"line":59,"column":61}},"line":59},"12":{"name":"(anonymous_12)","decl":{"start":{"line":71,"column":4},"end":{"line":71,"column":5}},"loc":{"start":{"line":71,"column":44},"end":{"line":90,"column":5}},"line":71},"13":{"name":"(anonymous_13)","decl":{"start":{"line":74,"column":37},"end":{"line":74,"column":38}},"loc":{"start":{"line":74,"column":49},"end":{"line":86,"column":13}},"line":74},"14":{"name":"(anonymous_14)","decl":{"start":{"line":91,"column":4},"end":{"line":91,"column":5}},"loc":{"start":{"line":91,"column":54},"end":{"line":111,"column":5}},"line":91},"15":{"name":"(anonymous_15)","decl":{"start":{"line":100,"column":49},"end":{"line":100,"column":50}},"loc":{"start":{"line":100,"column":57},"end":{"line":109,"column":9}},"line":100},"16":{"name":"(anonymous_16)","decl":{"start":{"line":112,"column":4},"end":{"line":112,"column":5}},"loc":{"start":{"line":112,"column":55},"end":{"line":150,"column":5}},"line":112},"17":{"name":"(anonymous_17)","decl":{"start":{"line":151,"column":4},"end":{"line":151,"column":5}},"loc":{"start":{"line":151,"column":47},"end":{"line":157,"column":5}},"line":151},"18":{"name":"(anonymous_18)","decl":{"start":{"line":152,"column":36},"end":{"line":152,"column":37}},"loc":{"start":{"line":152,"column":51},"end":{"line":156,"column":9}},"line":152},"19":{"name":"(anonymous_19)","decl":{"start":{"line":158,"column":4},"end":{"line":158,"column":5}},"loc":{"start":{"line":158,"column":37},"end":{"line":160,"column":5}},"line":158},"20":{"name":"(anonymous_20)","decl":{"start":{"line":159,"column":30},"end":{"line":159,"column":31}},"loc":{"start":{"line":159,"column":37},"end":{"line":159,"column":56}},"line":159},"21":{"name":"(anonymous_21)","decl":{"start":{"line":161,"column":4},"end":{"line":161,"column":5}},"loc":{"start":{"line":161,"column":34},"end":{"line":163,"column":5}},"line":161},"22":{"name":"(anonymous_22)","decl":{"start":{"line":162,"column":33},"end":{"line":162,"column":34}},"loc":{"start":{"line":162,"column":40},"end":{"line":162,"column":59}},"line":162},"23":{"name":"(anonymous_23)","decl":{"start":{"line":164,"column":4},"end":{"line":164,"column":5}},"loc":{"start":{"line":164,"column":30},"end":{"line":167,"column":5}},"line":164},"24":{"name":"(anonymous_24)","decl":{"start":{"line":165,"column":44},"end":{"line":165,"column":45}},"loc":{"start":{"line":165,"column":51},"end":{"line":165,"column":73}},"line":165},"25":{"name":"(anonymous_25)","decl":{"start":{"line":168,"column":4},"end":{"line":168,"column":5}},"loc":{"start":{"line":168,"column":23},"end":{"line":170,"column":5}},"line":168},"26":{"name":"(anonymous_26)","decl":{"start":{"line":171,"column":4},"end":{"line":171,"column":5}},"loc":{"start":{"line":171,"column":32},"end":{"line":177,"column":5}},"line":171},"27":{"name":"(anonymous_27)","decl":{"start":{"line":178,"column":4},"end":{"line":178,"column":5}},"loc":{"start":{"line":178,"column":39},"end":{"line":184,"column":5}},"line":178},"28":{"name":"(anonymous_28)","decl":{"start":{"line":183,"column":26},"end":{"line":183,"column":27}},"loc":{"start":{"line":183,"column":37},"end":{"line":183,"column":65}},"line":183},"29":{"name":"(anonymous_29)","decl":{"start":{"line":183,"column":74},"end":{"line":183,"column":75}},"loc":{"start":{"line":183,"column":90},"end":{"line":183,"column":102}},"line":183},"30":{"name":"(anonymous_30)","decl":{"start":{"line":185,"column":4},"end":{"line":185,"column":5}},"loc":{"start":{"line":185,"column":39},"end":{"line":199,"column":5}},"line":185},"31":{"name":"(anonymous_31)","decl":{"start":{"line":187,"column":17},"end":{"line":187,"column":18}},"loc":{"start":{"line":187,"column":36},"end":{"line":193,"column":9}},"line":187},"32":{"name":"(anonymous_32)","decl":{"start":{"line":194,"column":20},"end":{"line":194,"column":21}},"loc":{"start":{"line":194,"column":31},"end":{"line":194,"column":50}},"line":194},"33":{"name":"(anonymous_33)","decl":{"start":{"line":195,"column":20},"end":{"line":195,"column":21}},"loc":{"start":{"line":195,"column":31},"end":{"line":195,"column":55}},"line":195},"34":{"name":"(anonymous_34)","decl":{"start":{"line":196,"column":17},"end":{"line":196,"column":18}},"loc":{"start":{"line":196,"column":30},"end":{"line":196,"column":57}},"line":196},"35":{"name":"(anonymous_35)","decl":{"start":{"line":197,"column":20},"end":{"line":197,"column":21}},"loc":{"start":{"line":197,"column":27},"end":{"line":197,"column":42}},"line":197},"36":{"name":"(anonymous_36)","decl":{"start":{"line":198,"column":17},"end":{"line":198,"column":18}},"loc":{"start":{"line":198,"column":24},"end":{"line":198,"column":25}},"line":198},"37":{"name":"(anonymous_37)","decl":{"start":{"line":200,"column":4},"end":{"line":200,"column":5}},"loc":{"start":{"line":200,"column":29},"end":{"line":225,"column":5}},"line":200},"38":{"name":"(anonymous_38)","decl":{"start":{"line":217,"column":54},"end":{"line":217,"column":55}},"loc":{"start":{"line":217,"column":61},"end":{"line":217,"column":76}},"line":217},"39":{"name":"(anonymous_39)","decl":{"start":{"line":226,"column":4},"end":{"line":226,"column":5}},"loc":{"start":{"line":226,"column":36},"end":{"line":234,"column":5}},"line":226},"40":{"name":"(anonymous_40)","decl":{"start":{"line":235,"column":4},"end":{"line":235,"column":5}},"loc":{"start":{"line":235,"column":46},"end":{"line":255,"column":5}},"line":235},"41":{"name":"(anonymous_41)","decl":{"start":{"line":239,"column":44},"end":{"line":239,"column":45}},"loc":{"start":{"line":239,"column":57},"end":{"line":240,"column":113}},"line":239},"42":{"name":"(anonymous_42)","decl":{"start":{"line":240,"column":43},"end":{"line":240,"column":44}},"loc":{"start":{"line":240,"column":53},"end":{"line":240,"column":112}},"line":240},"43":{"name":"(anonymous_43)","decl":{"start":{"line":256,"column":4},"end":{"line":256,"column":5}},"loc":{"start":{"line":256,"column":41},"end":{"line":270,"column":5}},"line":256},"44":{"name":"(anonymous_44)","decl":{"start":{"line":259,"column":32},"end":{"line":259,"column":33}},"loc":{"start":{"line":259,"column":44},"end":{"line":264,"column":10}},"line":259},"45":{"name":"(anonymous_45)","decl":{"start":{"line":259,"column":56},"end":{"line":259,"column":57}},"loc":{"start":{"line":259,"column":77},"end":{"line":264,"column":9}},"line":259},"46":{"name":"(anonymous_46)","decl":{"start":{"line":261,"column":31},"end":{"line":261,"column":32}},"loc":{"start":{"line":261,"column":40},"end":{"line":261,"column":52}},"line":261},"47":{"name":"(anonymous_47)","decl":{"start":{"line":262,"column":28},"end":{"line":262,"column":29}},"loc":{"start":{"line":262,"column":37},"end":{"line":262,"column":48}},"line":262}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":12,"column":3}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":57},"end":{"line":12,"column":2}}],"line":2},"1":{"loc":{"start":{"line":2,"column":57},"end":{"line":12,"column":2}},"type":"cond-expr","locations":[{"start":{"line":2,"column":74},"end":{"line":9,"column":1}},{"start":{"line":9,"column":6},"end":{"line":12,"column":1}}],"line":2},"2":{"loc":{"start":{"line":3,"column":4},"end":{"line":3,"column":33}},"type":"if","locations":[{"start":{"line":3,"column":4},"end":{"line":3,"column":33}},{"start":{"line":3,"column":4},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":5,"column":4},"end":{"line":7,"column":5}},"type":"if","locations":[{"start":{"line":5,"column":4},"end":{"line":7,"column":5}},{"start":{"line":5,"column":4},"end":{"line":7,"column":5}}],"line":5},"4":{"loc":{"start":{"line":5,"column":8},"end":{"line":5,"column":85}},"type":"binary-expr","locations":[{"start":{"line":5,"column":8},"end":{"line":5,"column":13}},{"start":{"line":5,"column":18},"end":{"line":5,"column":84}}],"line":5},"5":{"loc":{"start":{"line":5,"column":18},"end":{"line":5,"column":84}},"type":"cond-expr","locations":[{"start":{"line":5,"column":34},"end":{"line":5,"column":47}},{"start":{"line":5,"column":50},"end":{"line":5,"column":84}}],"line":5},"6":{"loc":{"start":{"line":5,"column":50},"end":{"line":5,"column":84}},"type":"binary-expr","locations":[{"start":{"line":5,"column":50},"end":{"line":5,"column":63}},{"start":{"line":5,"column":67},"end":{"line":5,"column":84}}],"line":5},"7":{"loc":{"start":{"line":10,"column":4},"end":{"line":10,"column":33}},"type":"if","locations":[{"start":{"line":10,"column":4},"end":{"line":10,"column":33}},{"start":{"line":10,"column":4},"end":{"line":10,"column":33}}],"line":10},"8":{"loc":{"start":{"line":13,"column":25},"end":{"line":17,"column":2}},"type":"binary-expr","locations":[{"start":{"line":13,"column":26},"end":{"line":13,"column":30}},{"start":{"line":13,"column":34},"end":{"line":13,"column":57}},{"start":{"line":13,"column":63},"end":{"line":17,"column":1}}],"line":13},"9":{"loc":{"start":{"line":13,"column":63},"end":{"line":17,"column":1}},"type":"cond-expr","locations":[{"start":{"line":13,"column":80},"end":{"line":15,"column":1}},{"start":{"line":15,"column":5},"end":{"line":17,"column":1}}],"line":13},"10":{"loc":{"start":{"line":18,"column":19},"end":{"line":24,"column":1}},"type":"binary-expr","locations":[{"start":{"line":18,"column":20},"end":{"line":18,"column":24}},{"start":{"line":18,"column":28},"end":{"line":18,"column":45}},{"start":{"line":18,"column":50},"end":{"line":24,"column":1}}],"line":18},"11":{"loc":{"start":{"line":19,"column":4},"end":{"line":19,"column":42}},"type":"if","locations":[{"start":{"line":19,"column":4},"end":{"line":19,"column":42}},{"start":{"line":19,"column":4},"end":{"line":19,"column":42}}],"line":19},"12":{"loc":{"start":{"line":19,"column":8},"end":{"line":19,"column":29}},"type":"binary-expr","locations":[{"start":{"line":19,"column":8},"end":{"line":19,"column":11}},{"start":{"line":19,"column":15},"end":{"line":19,"column":29}}],"line":19},"13":{"loc":{"start":{"line":21,"column":4},"end":{"line":21,"column":141}},"type":"if","locations":[{"start":{"line":21,"column":4},"end":{"line":21,"column":141}},{"start":{"line":21,"column":4},"end":{"line":21,"column":141}}],"line":21},"14":{"loc":{"start":{"line":21,"column":40},"end":{"line":21,"column":141}},"type":"if","locations":[{"start":{"line":21,"column":40},"end":{"line":21,"column":141}},{"start":{"line":21,"column":40},"end":{"line":21,"column":141}}],"line":21},"15":{"loc":{"start":{"line":21,"column":44},"end":{"line":21,"column":107}},"type":"binary-expr","locations":[{"start":{"line":21,"column":44},"end":{"line":21,"column":59}},{"start":{"line":21,"column":63},"end":{"line":21,"column":107}}],"line":21},"16":{"loc":{"start":{"line":36,"column":8},"end":{"line":38,"column":9}},"type":"if","locations":[{"start":{"line":36,"column":8},"end":{"line":38,"column":9}},{"start":{"line":36,"column":8},"end":{"line":38,"column":9}}],"line":36},"17":{"loc":{"start":{"line":43,"column":8},"end":{"line":45,"column":9}},"type":"if","locations":[{"start":{"line":43,"column":8},"end":{"line":45,"column":9}},{"start":{"line":43,"column":8},"end":{"line":45,"column":9}}],"line":43},"18":{"loc":{"start":{"line":60,"column":12},"end":{"line":62,"column":13}},"type":"if","locations":[{"start":{"line":60,"column":12},"end":{"line":62,"column":13}},{"start":{"line":60,"column":12},"end":{"line":62,"column":13}}],"line":60},"19":{"loc":{"start":{"line":64,"column":12},"end":{"line":66,"column":13}},"type":"if","locations":[{"start":{"line":64,"column":12},"end":{"line":66,"column":13}},{"start":{"line":64,"column":12},"end":{"line":66,"column":13}}],"line":64},"20":{"loc":{"start":{"line":76,"column":16},"end":{"line":78,"column":17}},"type":"if","locations":[{"start":{"line":76,"column":16},"end":{"line":78,"column":17}},{"start":{"line":76,"column":16},"end":{"line":78,"column":17}}],"line":76},"21":{"loc":{"start":{"line":76,"column":20},"end":{"line":76,"column":81}},"type":"binary-expr","locations":[{"start":{"line":76,"column":20},"end":{"line":76,"column":39}},{"start":{"line":76,"column":43},"end":{"line":76,"column":60}},{"start":{"line":76,"column":64},"end":{"line":76,"column":81}}],"line":76},"22":{"loc":{"start":{"line":103,"column":16},"end":{"line":105,"column":17}},"type":"if","locations":[{"start":{"line":103,"column":16},"end":{"line":105,"column":17}},{"start":{"line":103,"column":16},"end":{"line":105,"column":17}}],"line":103},"23":{"loc":{"start":{"line":119,"column":12},"end":{"line":135,"column":13}},"type":"if","locations":[{"start":{"line":119,"column":12},"end":{"line":135,"column":13}},{"start":{"line":119,"column":12},"end":{"line":135,"column":13}}],"line":119},"24":{"loc":{"start":{"line":120,"column":16},"end":{"line":134,"column":17}},"type":"if","locations":[{"start":{"line":120,"column":16},"end":{"line":134,"column":17}},{"start":{"line":120,"column":16},"end":{"line":134,"column":17}}],"line":120},"25":{"loc":{"start":{"line":121,"column":37},"end":{"line":121,"column":71}},"type":"binary-expr","locations":[{"start":{"line":121,"column":37},"end":{"line":121,"column":64}},{"start":{"line":121,"column":68},"end":{"line":121,"column":71}}],"line":121},"26":{"loc":{"start":{"line":123,"column":21},"end":{"line":134,"column":17}},"type":"if","locations":[{"start":{"line":123,"column":21},"end":{"line":134,"column":17}},{"start":{"line":123,"column":21},"end":{"line":134,"column":17}}],"line":123},"27":{"loc":{"start":{"line":126,"column":21},"end":{"line":134,"column":17}},"type":"if","locations":[{"start":{"line":126,"column":21},"end":{"line":134,"column":17}},{"start":{"line":126,"column":21},"end":{"line":134,"column":17}}],"line":126},"28":{"loc":{"start":{"line":129,"column":21},"end":{"line":134,"column":17}},"type":"if","locations":[{"start":{"line":129,"column":21},"end":{"line":134,"column":17}},{"start":{"line":129,"column":21},"end":{"line":134,"column":17}}],"line":129},"29":{"loc":{"start":{"line":132,"column":21},"end":{"line":134,"column":17}},"type":"if","locations":[{"start":{"line":132,"column":21},"end":{"line":134,"column":17}},{"start":{"line":132,"column":21},"end":{"line":134,"column":17}}],"line":132},"30":{"loc":{"start":{"line":153,"column":12},"end":{"line":155,"column":13}},"type":"if","locations":[{"start":{"line":153,"column":12},"end":{"line":155,"column":13}},{"start":{"line":153,"column":12},"end":{"line":155,"column":13}}],"line":153},"31":{"loc":{"start":{"line":172,"column":8},"end":{"line":174,"column":9}},"type":"if","locations":[{"start":{"line":172,"column":8},"end":{"line":174,"column":9}},{"start":{"line":172,"column":8},"end":{"line":174,"column":9}}],"line":172},"32":{"loc":{"start":{"line":172,"column":12},"end":{"line":172,"column":50}},"type":"binary-expr","locations":[{"start":{"line":172,"column":12},"end":{"line":172,"column":27}},{"start":{"line":172,"column":31},"end":{"line":172,"column":50}}],"line":172},"33":{"loc":{"start":{"line":180,"column":8},"end":{"line":182,"column":9}},"type":"if","locations":[{"start":{"line":180,"column":8},"end":{"line":182,"column":9}},{"start":{"line":180,"column":8},"end":{"line":182,"column":9}}],"line":180},"34":{"loc":{"start":{"line":183,"column":90},"end":{"line":183,"column":102}},"type":"binary-expr","locations":[{"start":{"line":183,"column":90},"end":{"line":183,"column":94}},{"start":{"line":183,"column":98},"end":{"line":183,"column":102}}],"line":183},"35":{"loc":{"start":{"line":189,"column":12},"end":{"line":191,"column":13}},"type":"if","locations":[{"start":{"line":189,"column":12},"end":{"line":191,"column":13}},{"start":{"line":189,"column":12},"end":{"line":191,"column":13}}],"line":189},"36":{"loc":{"start":{"line":205,"column":12},"end":{"line":215,"column":13}},"type":"if","locations":[{"start":{"line":205,"column":12},"end":{"line":215,"column":13}},{"start":{"line":205,"column":12},"end":{"line":215,"column":13}}],"line":205},"37":{"loc":{"start":{"line":206,"column":16},"end":{"line":214,"column":17}},"type":"if","locations":[{"start":{"line":206,"column":16},"end":{"line":214,"column":17}},{"start":{"line":206,"column":16},"end":{"line":214,"column":17}}],"line":206},"38":{"loc":{"start":{"line":209,"column":21},"end":{"line":214,"column":17}},"type":"if","locations":[{"start":{"line":209,"column":21},"end":{"line":214,"column":17}},{"start":{"line":209,"column":21},"end":{"line":214,"column":17}}],"line":209},"39":{"loc":{"start":{"line":212,"column":21},"end":{"line":214,"column":17}},"type":"if","locations":[{"start":{"line":212,"column":21},"end":{"line":214,"column":17}},{"start":{"line":212,"column":21},"end":{"line":214,"column":17}}],"line":212},"40":{"loc":{"start":{"line":217,"column":8},"end":{"line":223,"column":9}},"type":"if","locations":[{"start":{"line":217,"column":8},"end":{"line":223,"column":9}},{"start":{"line":217,"column":8},"end":{"line":223,"column":9}}],"line":217},"41":{"loc":{"start":{"line":229,"column":12},"end":{"line":231,"column":13}},"type":"if","locations":[{"start":{"line":229,"column":12},"end":{"line":231,"column":13}},{"start":{"line":229,"column":12},"end":{"line":231,"column":13}}],"line":229},"42":{"loc":{"start":{"line":236,"column":8},"end":{"line":244,"column":9}},"type":"if","locations":[{"start":{"line":236,"column":8},"end":{"line":244,"column":9}},{"start":{"line":236,"column":8},"end":{"line":244,"column":9}}],"line":236},"43":{"loc":{"start":{"line":236,"column":12},"end":{"line":236,"column":117}},"type":"binary-expr","locations":[{"start":{"line":236,"column":12},"end":{"line":236,"column":21}},{"start":{"line":236,"column":25},"end":{"line":236,"column":51}},{"start":{"line":236,"column":55},"end":{"line":236,"column":86}},{"start":{"line":236,"column":90},"end":{"line":236,"column":117}}],"line":236},"44":{"loc":{"start":{"line":238,"column":16},"end":{"line":242,"column":17}},"type":"if","locations":[{"start":{"line":238,"column":16},"end":{"line":242,"column":17}},{"start":{"line":238,"column":16},"end":{"line":242,"column":17}}],"line":238},"45":{"loc":{"start":{"line":238,"column":20},"end":{"line":240,"column":114}},"type":"binary-expr","locations":[{"start":{"line":238,"column":20},"end":{"line":238,"column":45}},{"start":{"line":239,"column":20},"end":{"line":240,"column":114}}],"line":238},"46":{"loc":{"start":{"line":239,"column":57},"end":{"line":240,"column":113}},"type":"binary-expr","locations":[{"start":{"line":239,"column":57},"end":{"line":239,"column":82}},{"start":{"line":240,"column":24},"end":{"line":240,"column":113}}],"line":239},"47":{"loc":{"start":{"line":240,"column":53},"end":{"line":240,"column":112}},"type":"binary-expr","locations":[{"start":{"line":240,"column":53},"end":{"line":240,"column":74}},{"start":{"line":240,"column":78},"end":{"line":240,"column":112}}],"line":240},"48":{"loc":{"start":{"line":246,"column":8},"end":{"line":253,"column":9}},"type":"if","locations":[{"start":{"line":246,"column":8},"end":{"line":253,"column":9}},{"start":{"line":246,"column":8},"end":{"line":253,"column":9}}],"line":246},"49":{"loc":{"start":{"line":248,"column":53},"end":{"line":248,"column":88}},"type":"binary-expr","locations":[{"start":{"line":248,"column":53},"end":{"line":248,"column":62}},{"start":{"line":248,"column":66},"end":{"line":248,"column":88}}],"line":248},"50":{"loc":{"start":{"line":249,"column":16},"end":{"line":251,"column":17}},"type":"if","locations":[{"start":{"line":249,"column":16},"end":{"line":251,"column":17}},{"start":{"line":249,"column":16},"end":{"line":251,"column":17}}],"line":249}},"s":{"0":1,"1":17,"2":17,"3":17,"4":17,"5":17,"6":222,"7":17,"8":0,"9":0,"10":0,"11":1,"12":1,"13":0,"14":1,"15":1,"16":0,"17":1,"18":1,"19":1,"20":17,"21":17,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":3,"32":3,"33":3,"34":0,"35":3,"36":3,"37":3,"38":3,"39":3,"40":0,"41":3,"42":3,"43":3,"44":3,"45":243,"46":231,"47":3,"48":231,"49":231,"50":924,"51":231,"52":9,"53":222,"54":222,"55":0,"56":222,"57":3,"58":3,"59":3,"60":222,"61":222,"62":222,"63":0,"64":222,"65":222,"66":3,"67":222,"68":222,"69":90,"70":132,"71":132,"72":1092,"73":1092,"74":1092,"75":1092,"76":132,"77":1092,"78":12012,"79":5460,"80":1092,"81":4368,"82":1092,"83":3276,"84":1092,"85":2184,"86":1092,"87":1092,"88":1092,"89":1092,"90":132,"91":2316,"92":1092,"93":26706,"94":26706,"95":2406,"96":4812,"97":5034,"98":5034,"99":5034,"100":25614,"101":14454,"102":7884,"103":6570,"104":6570,"105":19044,"106":19044,"107":0,"108":19044,"109":19044,"110":19044,"111":3,"112":447,"113":447,"114":225,"115":222,"116":447,"117":222,"118":222,"119":222,"120":222,"121":222,"122":2442,"123":1110,"124":222,"125":888,"126":222,"127":666,"128":222,"129":222,"130":666,"131":222,"132":0,"133":225,"134":1575,"135":1575,"136":135,"137":90,"138":290859,"139":135,"140":270,"141":270,"142":135,"143":135,"144":290724,"145":290724,"146":149022,"147":289284,"148":289284,"149":1479,"150":289245,"151":222,"152":222,"153":222,"154":222,"155":222,"156":222,"157":222,"158":222,"159":0,"160":222,"161":222,"162":222,"163":222,"164":222,"165":1},"f":{"0":17,"1":222,"2":0,"3":1,"4":0,"5":1,"6":3,"7":3,"8":243,"9":231,"10":231,"11":924,"12":3,"13":222,"14":222,"15":1092,"16":1092,"17":132,"18":2316,"19":26706,"20":26706,"21":2406,"22":4812,"23":5034,"24":5034,"25":25614,"26":14454,"27":19044,"28":19044,"29":19044,"30":3,"31":447,"32":447,"33":222,"34":222,"35":222,"36":222,"37":222,"38":666,"39":225,"40":290859,"41":270,"42":135,"43":222,"44":222,"45":222,"46":222,"47":0},"b":{"0":[1,1,1],"1":[1,0],"2":[17,0],"3":[17,0],"4":[17,17],"5":[2,15],"6":[15,0],"7":[0,0],"8":[1,1,1],"9":[1,0],"10":[1,1,1],"11":[0,1],"12":[1,1],"13":[1,0],"14":[17,0],"15":[17,17],"16":[0,3],"17":[0,3],"18":[9,222],"19":[0,222],"20":[0,222],"21":[222,222,222],"22":[1092,0],"23":[5460,6552],"24":[1092,4368],"25":[1092,0],"26":[1092,3276],"27":[1092,2184],"28":[1092,1092],"29":[1092,0],"30":[1092,1224],"31":[7884,6570],"32":[14454,14454],"33":[0,19044],"34":[19044,19044],"35":[225,222],"36":[1110,1332],"37":[222,888],"38":[222,666],"39":[222,444],"40":[222,0],"41":[135,1440],"42":[135,290724],"43":[290859,3240,135,135],"44":[135,135],"45":[270,135],"46":[270,135],"47":[135,135],"48":[149022,141702],"49":[289284,286179],"50":[1479,287805]},"inputSourceMap":{"version":3,"file":"/Users/fegicochen/Courses/CPSC 310/C1/project_team085/src/controller/RoomsDatasetProcessor.ts","sources":["/Users/fegicochen/Courses/CPSC 310/C1/project_team085/src/controller/RoomsDatasetProcessor.ts"],"names":[],"mappings":"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","sourcesContent":["import { parse } from \"parse5\";\nimport {\n\tDocument as ParseDoc,\n\tChildNode as ParseChildNode,\n\tElement,\n\tTextNode,\n} from \"parse5/dist/tree-adapters/default\";\nimport { DatasetUtils, Room } from \"./Dataset\";\nimport { InsightError } from \"./IInsightFacade\";\nimport JSZip from \"jszip\";\nimport * as http from \"node:http\";\nimport { Attribute } from \"parse5/dist/common/token\";\n\nconst roomsHtmlFileName = \"index.htm\";\n\ninterface BuildingInfo {\n\ttitle: string;\n\tcode: string;\n\taddress: string;\n\tlat: number;\n\tlon: number;\n}\n\ntype BuildingInfoMap = Map<string, Promise<BuildingInfo | undefined>>;\n\ninterface RoomsRow {\n\ttitle: string;\n\tcode: string;\n\taddress: string;\n}\n\ninterface GeoResponse {\n\tlat?: number;\n\tlon?: number;\n\terror?: string;\n}\n\nexport class RoomsDatasetProcessor {\n\t/**\n\t *\n\t * @param content base64 zip file content\n\t * @returns valid rooms from the given zip file\n\t * @throws InsightError if there are any fatal unrecoverable parsing errors\n\t */\n\tpublic static async getValidRooms(content: string): Promise<Room[]> {\n\t\tconst unzipped = await DatasetUtils.unzipBase64Content(content);\n\n\t\t// Get file describing the rooms\n\t\tconst roomsFile = unzipped.file(roomsHtmlFileName);\n\t\tif (roomsFile === null) {\n\t\t\tthrow new InsightError(\"No index.htm file!\");\n\t\t}\n\n\t\t// Get rooms file content\n\t\tconst roomsFileContent = await roomsFile.async(\"string\");\n\n\t\t// Parse HTML to JSON with parse5\n\t\tconst roomsFileJSON: ParseDoc = parse(roomsFileContent);\n\n\t\t// Extract address data from table in index.htm\n\t\tconst roomsTable = this.findRoomsTable(roomsFileJSON);\n\t\tconst roomsTableData = this.parseRoomsTable(roomsTable);\n\n\t\t// Check valid data\n\t\tif (roomsTableData.length === 0) {\n\t\t\tthrow new InsightError(\"No valid rooms!\");\n\t\t}\n\n\t\t// Get building info\n\t\tconst buildingInfoMap = this.createAllBuildingInfo(roomsTableData);\n\n\t\t// Parse room files deeper in zip\n\t\tconst allRooms = await this.parseRoomsFiles(unzipped, buildingInfoMap);\n\n\t\treturn allRooms;\n\t}\n\n\t/**\n\t *\n\t * @param unzipped the unzipped root folder\n\t * @param addresses room addresses from index.htm\n\t * @returns valid rooms from files\n\t */\n\tprivate static async parseRoomsFiles(unzipped: JSZip, buildingInfoMap: BuildingInfoMap): Promise<Room[]> {\n\t\tconst files = await Promise.all(\n\t\t\tObject.values(unzipped.files)\n\t\t\t\t.filter((x) => x.name.startsWith(\"campus/discover/buildings-and-classrooms\"))\n\t\t\t\t.map(async (x) => ({ name: x.name, data: await x.async(\"string\") }))\n\t\t);\n\t\tconst parsedRoomLists = await Promise.all(\n\t\t\tfiles.map(async (file): Promise<Room[]> => {\n\t\t\t\tconst fileContentParsed = parse(file.data);\n\t\t\t\tconst fileRoomCode = file.name\n\t\t\t\t\t.replaceAll(\".htm\", \"\")\n\t\t\t\t\t.split(\"/\")\n\t\t\t\t\t.find((_, idx, arr) => idx === arr.length - 1)!!;\n\t\t\t\tif (!buildingInfoMap.has(fileRoomCode)) {\n\t\t\t\t\t// console.log(\"Building info doesn't have: \" + fileRoomCode);\n\t\t\t\t\treturn [];\n\t\t\t\t}\n\t\t\t\tconst buildingInfo = await buildingInfoMap.get(fileRoomCode)!!;\n\t\t\t\tif (buildingInfo === undefined) {\n\t\t\t\t\t// console.log(\"Building info request failed: \" + fileRoomCode);\n\t\t\t\t\treturn [];\n\t\t\t\t}\n\t\t\t\treturn this.parseSingleRoomFile(fileContentParsed, buildingInfo);\n\t\t\t})\n\t\t);\n\t\treturn parsedRoomLists.flat();\n\t}\n\n\t/**\n\t *\n\t * @param addresses addresses, titles, and room codes from index.htm\n\t * @returns the building info map\n\t */\n\tprivate static createAllBuildingInfo(addresses: RoomsRow[]): BuildingInfoMap {\n\t\tconst map = new Map<string, Promise<BuildingInfo | undefined>>();\n\n\t\tfor (const address of addresses) {\n\t\t\t// request data\n\t\t\tconst addressRequestFn = async (): Promise<BuildingInfo | undefined> => {\n\t\t\t\tconst { lat, lon, error } = await this.getGeoLocation(address.address);\n\t\t\t\tif (error !== undefined || lat === undefined || lon === undefined) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\ttitle: address.title,\n\t\t\t\t\tcode: address.code,\n\t\t\t\t\taddress: address.address,\n\t\t\t\t\tlat: lat,\n\t\t\t\t\tlon: lon,\n\t\t\t\t};\n\t\t\t};\n\t\t\tmap.set(address.code, addressRequestFn());\n\t\t}\n\n\t\treturn map;\n\t}\n\n\t/**\n\t *\n\t * @param content parsed file content\n\t * @param addresses rooms and their addresses\n\t * @returns room from file or undefined if file is invalid\n\t */\n\tprivate static parseSingleRoomFile(content: ParseDoc, buildingInfo: BuildingInfo): Room[] {\n\t\tlet roomsTable: Element;\n\t\ttry {\n\t\t\troomsTable = this.findRoomsTable(content);\n\t\t} catch (_e) {\n\t\t\t// console.log(\"Could not find rooms table in: \" + roomCode);\n\t\t\treturn [];\n\t\t}\n\t\tconst rooms: Room[] = [];\n\t\tthis.forAllNodesOfType(roomsTable, \"tr\", (tr) => {\n\t\t\ttry {\n\t\t\t\tconst room = this.parseSingleRoomInRoomFile(tr as Element, buildingInfo);\n\t\t\t\tif (room !== undefined) {\n\t\t\t\t\trooms.push(room);\n\t\t\t\t}\n\t\t\t} catch (_e) {\n\t\t\t\t// Moving on ...\n\t\t\t}\n\t\t});\n\t\treturn rooms;\n\t}\n\n\t/**\n\t *\n\t * @param tr the tr element inside the table body contianing the tds to look for attributes on\n\t * @param buildingInfo the building info for the current building\n\t * @returns a room from this tr and the given building info\n\t */\n\tprivate static parseSingleRoomInRoomFile(tr: Element, buildingInfo: BuildingInfo): Room | undefined {\n\t\t// Child is a tr containing the tds with data\n\t\tlet seats: number | undefined;\n\t\tlet furniture: string | undefined;\n\t\tlet type: string | undefined;\n\t\tlet roomNumber: string | undefined;\n\t\tlet href: string | undefined;\n\t\tfor (const child of tr.childNodes) {\n\t\t\tif (this.tableClassIsValid(child)) {\n\t\t\t\t// Check attrs for different pieces of data\n\t\t\t\tif (this.classContains(child, \"views-field-field-room-capacity\")) {\n\t\t\t\t\tseats = parseInt(this.getInternalText(child) ?? \"?\", 10);\n\t\t\t\t} else if (this.classContains(child, \"views-field-field-room-furniture\")) {\n\t\t\t\t\tfurniture = this.getInternalText(child);\n\t\t\t\t} else if (this.classContains(child, \"views-field-field-room-type\")) {\n\t\t\t\t\ttype = this.getInternalText(child);\n\t\t\t\t} else if (this.classContains(child, \"views-field-field-room-number\")) {\n\t\t\t\t\troomNumber = this.getInternalText(this.getNamedChild(child, \"a\") as Element);\n\t\t\t\t} else if (this.classContains(child, \"views-field-nothing\")) {\n\t\t\t\t\thref = this.getAttribute(this.getNamedChild(child, \"a\"), \"href\")?.value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\tseats: seats!!,\n\t\t\tfurniture: furniture?.trim()!!,\n\t\t\ttype: type?.trim()!!,\n\t\t\tnumber: roomNumber?.trim()!!,\n\t\t\taddress: buildingInfo.address,\n\t\t\tlat: buildingInfo.lat,\n\t\t\tlon: buildingInfo.lon,\n\t\t\tfullname: buildingInfo.title,\n\t\t\tshortname: buildingInfo.code,\n\t\t\thref: href?.trim()!!,\n\t\t\tname: buildingInfo.code + \"_\" + roomNumber?.trim()!!,\n\t\t};\n\t}\n\t/**\n\t *\n\t * @param parent parent node to search\n\t * @param type type of child to match\n\t * @param fn function to apply\n\t */\n\tprivate static forAllNodesOfType(\n\t\tparent: ParseChildNode | undefined,\n\t\ttype: string,\n\t\tfn: (child: ParseChildNode) => void\n\t): void {\n\t\t(parent as Element | undefined)?.childNodes?.forEach((childNode) => {\n\t\t\tif (childNode.nodeName === type) {\n\t\t\t\tfn(childNode);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t *\n\t * @param x the element to search\n\t * @param attrName the attribute to find\n\t * @returns the named attribute or undefined if not present\n\t */\n\tprivate static getAttribute(x: ParseChildNode | undefined, attrName: string): Attribute | undefined {\n\t\treturn (x as Element | undefined)?.attrs?.find((y) => y.name === attrName);\n\t}\n\n\t/**\n\t *\n\t * @param x the node whos children to check\n\t * @param name the name of the node to search for\n\t * @returns the child with the given name or undefined if not found\n\t */\n\tprivate static getNamedChild(x: Element, name: string): ParseChildNode | undefined {\n\t\treturn x.childNodes.find((y) => y.nodeName === name);\n\t}\n\n\t/**\n\t *\n\t * @param x the element to retrieve internal text of\n\t * @returns string if element has a #text child, undefined otherwise\n\t */\n\tprivate static getInternalText(x: Element | undefined): string | undefined {\n\t\tconst textNode = x?.childNodes.find((p) => p.nodeName === \"#text\") as TextNode | undefined;\n\t\treturn textNode?.value;\n\t}\n\n\t/**\n\t *\n\t * @param x the child node to check\n\t * @returns the class attribute of the child node if it exists, false otherwise\n\t */\n\tprivate static getClass(x: ParseChildNode): Attribute | undefined {\n\t\treturn this.getAttribute(x, \"class\");\n\t}\n\n\t/**\n\t *\n\t * @param x the attribute to check\n\t * @returns whether this is a valid class signature of a table item\n\t */\n\tprivate static tableClassIsValid(x: ParseChildNode | undefined): x is Element {\n\t\tif (x === undefined || x.nodeName !== \"td\") {\n\t\t\treturn false;\n\t\t}\n\t\tconst xClass = this.getClass(x);\n\t\treturn xClass?.value.includes(\"views-field\") === true;\n\t}\n\n\t/**\n\t *\n\t * @param x the child node to check\n\t * @param values the values to check if in class\n\t * @returns whether all values are in the class of the given item\n\t */\n\tprivate static classContains(x: ParseChildNode, ...values: string[]): boolean {\n\t\tconst xClass = this.getClass(x);\n\t\tif (xClass === undefined) {\n\t\t\treturn false;\n\t\t}\n\t\treturn values.map((value) => xClass.value.includes(value)).reduce((prev, curr) => prev && curr, true);\n\t}\n\n\t/**\n\t *\n\t * @param roomsTable the rooms table in index.htm\n\t * @returns valid rooms rows with info\n\t */\n\tprivate static parseRoomsTable(roomsTable: Element): RoomsRow[] {\n\t\treturn (\n\t\t\troomsTable.childNodes\n\t\t\t\t// Ensure child nodes present and cast\n\t\t\t\t.map((trChildUncast) => {\n\t\t\t\t\tconst trChildCast = trChildUncast as Element;\n\t\t\t\t\tif (trChildCast.childNodes === undefined) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}\n\t\t\t\t\treturn trChildCast;\n\t\t\t\t})\n\t\t\t\t// Remove ones without child nodes\n\t\t\t\t.filter((child) => child !== undefined)\n\t\t\t\t// Remove ones that aren't <tr>\n\t\t\t\t.filter((child) => child?.nodeName === \"tr\")\n\t\t\t\t// Map to undefined if internal format wrong, otherwise map to RoomsRow\n\t\t\t\t.map((trChild) => this.parseSingleTr(trChild!!))\n\t\t\t\t// Remove invalid <tr>'s\n\t\t\t\t.filter((x) => x !== undefined)\n\t\t\t\t.map((x) => x!!)\n\t\t);\n\t}\n\n\t/**\n\t *\n\t * @param tr the <tr> entry in the rooms index.htm table\n\t * @returns a RoomsRow if it is valid, undefined otherwise\n\t */\n\tprivate static parseSingleTr(tr: Element): RoomsRow | undefined {\n\t\tlet roomTitle: string | undefined;\n\t\tlet roomAddress: string | undefined;\n\t\tlet roomCode: string | undefined;\n\t\tfor (const child of tr.childNodes) {\n\t\t\tif (this.tableClassIsValid(child)) {\n\t\t\t\t// Check attrs for different pieces of data\n\t\t\t\tif (this.classContains(child, \"views-field-title\")) {\n\t\t\t\t\troomTitle = this.getInternalText(this.getNamedChild(child, \"a\") as Element)?.trim();\n\t\t\t\t} else if (this.classContains(child, \"views-field-field-building-address\")) {\n\t\t\t\t\troomAddress = this.getInternalText(child)?.trim();\n\t\t\t\t} else if (this.classContains(child, \"views-field-field-building-code\")) {\n\t\t\t\t\troomCode = this.getInternalText(child)?.trim();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif ([roomTitle, roomAddress, roomCode].filter((x) => x === undefined).length === 0) {\n\t\t\treturn {\n\t\t\t\ttitle: roomTitle!!,\n\t\t\t\taddress: roomAddress!!,\n\t\t\t\tcode: roomCode!!,\n\t\t\t};\n\t\t}\n\t\treturn undefined;\n\t}\n\n\t/**\n\t *\n\t * @param document document to search for rooms table\n\t * @returns rooms table element\n\t * @throws InsightError if table not found\n\t */\n\tprivate static findRoomsTable(document: ParseDoc): Element {\n\t\tfor (const child of document.childNodes) {\n\t\t\tconst res = this.findTableInChild(child, false);\n\t\t\tif (res !== undefined) {\n\t\t\t\treturn res as Element;\n\t\t\t}\n\t\t}\n\t\tthrow new InsightError(\"Could not find rooms table\");\n\t}\n\n\t/**\n\t *\n\t * @param child child to search\n\t * @param seenTable whether this child is a child of a table\n\t * @returns child node of table if found, else undefined\n\t */\n\tprivate static findTableInChild(child: ParseChildNode, seenTable: boolean): ParseChildNode | undefined {\n\t\t// Check if table is found\n\t\tif (seenTable && child.nodeName === \"tbody\" && Array.isArray(child.childNodes) && child.childNodes.length > 0) {\n\t\t\tfor (const trChild of child.childNodes) {\n\t\t\t\tif (\n\t\t\t\t\ttrChild.nodeName === \"tr\" &&\n\t\t\t\t\ttrChild.childNodes.find(\n\t\t\t\t\t\t(tdChild) =>\n\t\t\t\t\t\t\ttdChild.nodeName === \"td\" &&\n\t\t\t\t\t\t\ttdChild.attrs.find((attr) => attr.name === \"class\" && attr.value.includes(\"views-field\"))\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\treturn child;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Check children for table\n\t\tconst children = (child as any).childNodes;\n\t\tif (Array.isArray(children)) {\n\t\t\tfor (const x of children) {\n\t\t\t\tconst res = this.findTableInChild(x, seenTable || x.nodeName === \"table\");\n\t\t\t\tif (res !== undefined) {\n\t\t\t\t\treturn res;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\t/**\n\t *\n\t * @param address the unzipped root folder\n\t * @param address room addresses from index.htm\n\t * @returns GeoResponse object that has lat and lon or error\n\t */\n\tpublic static async getGeoLocation(address: string): Promise<GeoResponse> {\n\t\tconst encodedAddress = encodeURIComponent(address);\n\t\tconst url = `http://cs310.students.cs.ubc.ca:11316/api/v1/project_team085/${encodedAddress}`;\n\n\t\tconst response = await (async (): Promise<any> =>\n\t\t\tnew Promise((resolve, reject) => {\n\t\t\t\tconst req = http.get(url);\n\t\t\t\treq.on(\"response\", (res) => resolve(res));\n\n\t\t\t\treq.on(\"error\", (err) => reject(err));\n\n\t\t\t\treq.end();\n\t\t\t}))();\n\n\t\tlet body = \"\";\n\t\tfor await (const chunk of response) {\n\t\t\tbody += chunk;\n\t\t}\n\t\treturn JSON.parse(body);\n\t}\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"62053d38ed17ae3a5f49cd7546f4a4a6a5588c6c","contentHash":"a9c00b78753a87b23753f03e06482f0b39fd7d3b4805c37cab8c37e34ce2a2eb"}}