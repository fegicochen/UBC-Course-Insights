{"/Users/fegicochen/Courses/CPSC 310/C1/project_team085/src/controller/IInsightFacade.ts":{"path":"/Users/fegicochen/Courses/CPSC 310/C1/project_team085/src/controller/IInsightFacade.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":113}},"2":{"start":{"line":5,"column":0},"end":{"line":8,"column":89}},"3":{"start":{"line":6,"column":4},"end":{"line":6,"column":48}},"4":{"start":{"line":7,"column":4},"end":{"line":7,"column":42}},"5":{"start":{"line":11,"column":8},"end":{"line":11,"column":23}},"6":{"start":{"line":12,"column":8},"end":{"line":12,"column":52}},"7":{"start":{"line":15,"column":0},"end":{"line":15,"column":36}},"8":{"start":{"line":18,"column":8},"end":{"line":18,"column":23}},"9":{"start":{"line":19,"column":8},"end":{"line":19,"column":53}},"10":{"start":{"line":22,"column":0},"end":{"line":22,"column":38}},"11":{"start":{"line":25,"column":8},"end":{"line":25,"column":23}},"12":{"start":{"line":26,"column":8},"end":{"line":26,"column":59}},"13":{"start":{"line":29,"column":0},"end":{"line":29,"column":50}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":5,"column":1},"end":{"line":5,"column":2}},"loc":{"start":{"line":5,"column":31},"end":{"line":8,"column":1}},"line":5},"1":{"name":"(anonymous_1)","decl":{"start":{"line":10,"column":4},"end":{"line":10,"column":5}},"loc":{"start":{"line":10,"column":25},"end":{"line":13,"column":5}},"line":10},"2":{"name":"(anonymous_2)","decl":{"start":{"line":17,"column":4},"end":{"line":17,"column":5}},"loc":{"start":{"line":17,"column":25},"end":{"line":20,"column":5}},"line":17},"3":{"name":"(anonymous_3)","decl":{"start":{"line":24,"column":4},"end":{"line":24,"column":5}},"loc":{"start":{"line":24,"column":25},"end":{"line":27,"column":5}},"line":24}},"branchMap":{"0":{"loc":{"start":{"line":8,"column":24},"end":{"line":8,"column":87}},"type":"binary-expr","locations":[{"start":{"line":8,"column":24},"end":{"line":8,"column":50}},{"start":{"line":8,"column":55},"end":{"line":8,"column":86}}],"line":8}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":526832,"6":526832,"7":1,"8":1,"9":1,"10":1,"11":3,"12":3,"13":1},"f":{"0":1,"1":526832,"2":1,"3":3},"b":{"0":[1,1]},"inputSourceMap":{"version":3,"file":"/Users/fegicochen/Courses/CPSC 310/C1/project_team085/src/controller/IInsightFacade.ts","sources":["/Users/fegicochen/Courses/CPSC 310/C1/project_team085/src/controller/IInsightFacade.ts"],"names":[],"mappings":";;;AAMA,IAAY,kBAGX;AAHD,WAAY,kBAAkB;IAC7B,2CAAqB,CAAA;IACrB,qCAAe,CAAA;AAChB,CAAC,EAHW,kBAAkB,GAAlB,0BAAkB,KAAlB,0BAAkB,QAG7B;AAUD,MAAa,YAAa,SAAQ,KAAK;IACtC,YAAY,OAAgB;QAC3B,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,KAAK,CAAC,iBAAiB,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;IAC7C,CAAC;CACD;AALD,oCAKC;AAED,MAAa,aAAc,SAAQ,KAAK;IACvC,YAAY,OAAgB;QAC3B,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,KAAK,CAAC,iBAAiB,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;IAC9C,CAAC;CACD;AALD,sCAKC;AAED,MAAa,mBAAoB,SAAQ,KAAK;IAC7C,YAAY,OAAgB;QAC3B,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,KAAK,CAAC,iBAAiB,CAAC,IAAI,EAAE,mBAAmB,CAAC,CAAC;IACpD,CAAC;CACD;AALD,kDAKC","sourcesContent":["/*\n * This is the primary high-level API for the project. In this folder there should be:\n * A class called InsightFacade, this should be in a file called InsightFacade.ts.\n * You should not change this interface at all or the test suite will not work.\n */\n\nexport enum InsightDatasetKind {\n\tSections = \"sections\",\n\tRooms = \"rooms\",\n}\n\nexport interface InsightDataset {\n\tid: string;\n\tkind: InsightDatasetKind;\n\tnumRows: number;\n}\n\nexport type InsightResult = Record<string, string | number>;\n\nexport class InsightError extends Error {\n\tconstructor(message?: string) {\n\t\tsuper(message);\n\t\tError.captureStackTrace(this, InsightError);\n\t}\n}\n\nexport class NotFoundError extends Error {\n\tconstructor(message?: string) {\n\t\tsuper(message);\n\t\tError.captureStackTrace(this, NotFoundError);\n\t}\n}\n\nexport class ResultTooLargeError extends Error {\n\tconstructor(message?: string) {\n\t\tsuper(message);\n\t\tError.captureStackTrace(this, ResultTooLargeError);\n\t}\n}\n\nexport interface IInsightFacade {\n\t/**\n\t * Add a dataset to insightUBC.\n\t *\n\t * @param id  The id of the dataset being added. Follows the format /^[^_]+$/\n\t * @param content  The base64 content of the dataset. This content should be in the form of a serialized zip file.\n\t * @param kind  The kind of the dataset\n\t *\n\t * @return Promise <string[]>\n\t *\n\t * The promise should fulfill on a successful add, reject for any failures.\n\t * The promise should fulfill with a string array,\n\t * containing the ids of all currently added datasets upon a successful add.\n\t * The promise should reject with an InsightError describing the error.\n\t *\n\t * An id is invalid if it contains an underscore, or is only whitespace characters.\n\t * If id is the same as the id of an already added dataset, the dataset should be rejected and not saved.\n\t *\n\t * After receiving the dataset, it should be processed into a data structure of\n\t * your design. The processed data structure should be persisted to disk; your\n\t * system should be able to load this persisted value into memory for answering\n\t * queries.\n\t *\n\t * Ultimately, a dataset must be added or loaded from disk before queries can\n\t * be successfully answered.\n\t */\n\taddDataset(id: string, content: string, kind: InsightDatasetKind): Promise<string[]>;\n\n\t/**\n\t * Remove a dataset from insightUBC.\n\t *\n\t * @param id  The id of the dataset to remove. Follows the format /^[^_]+$/\n\t *\n\t * @return Promise <string>\n\t *\n\t * The promise should fulfill upon a successful removal, reject on any error.\n\t * Attempting to remove a dataset that hasn't been added yet counts as an error.\n\t *\n\t * An id is invalid if it contains an underscore, or is only whitespace characters.\n\t *\n\t * The promise should fulfill the id of the dataset that was removed.\n\t * The promise should reject with a NotFoundError (if a valid id was not yet added)\n\t * or an InsightError (invalid id or any other source of failure) describing the error.\n\t *\n\t * This will delete both disk and memory caches for the dataset for the id meaning\n\t * that subsequent queries for that id should fail unless a new addDataset happens first.\n\t */\n\tremoveDataset(id: string): Promise<string>;\n\n\t/**\n\t * Perform a query on insightUBC.\n\t *\n\t * @param query  The query to be performed.\n\t *\n\t * If a query is incorrectly formatted, references a dataset not added (in memory or on disk),\n\t * or references multiple datasets, it should be rejected.\n\t *\n\t * @return Promise <InsightResult[]>\n\t *\n\t * The promise should fulfill with an array of results.\n\t * The promise should reject with a ResultTooLargeError (if the query returns too many results)\n\t * or an InsightError (for any other source of failure) describing the error.\n\t */\n\tperformQuery(query: unknown): Promise<InsightResult[]>;\n\n\t/**\n\t * List all currently added datasets, their types, and number of rows.\n\t *\n\t * @return Promise <InsightDataset[]>\n\t * The promise should fulfill an array of currently added InsightDatasets, and will only fulfill.\n\t */\n\tlistDatasets(): Promise<InsightDataset[]>;\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"d0dced8471f30e6fc175ecfbe2af877f35daa9a0","contentHash":"3405cee3e86702967f227690b413136132f5522cb24903468b8a7cc5f7178d71"},"/Users/fegicochen/Courses/CPSC 310/C1/project_team085/src/controller/InsightFacade.ts":{"path":"/Users/fegicochen/Courses/CPSC 310/C1/project_team085/src/controller/InsightFacade.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":18},"end":{"line":6,"column":38}},"4":{"start":{"line":7,"column":25},"end":{"line":7,"column":52}},"5":{"start":{"line":8,"column":22},"end":{"line":8,"column":46}},"6":{"start":{"line":9,"column":27},"end":{"line":9,"column":92}},"7":{"start":{"line":10,"column":19},"end":{"line":10,"column":38}},"8":{"start":{"line":15,"column":8},"end":{"line":15,"column":32}},"9":{"start":{"line":16,"column":8},"end":{"line":16,"column":41}},"10":{"start":{"line":19,"column":8},"end":{"line":21,"column":9}},"11":{"start":{"line":20,"column":12},"end":{"line":20,"column":19}},"12":{"start":{"line":22,"column":8},"end":{"line":31,"column":9}},"13":{"start":{"line":23,"column":12},"end":{"line":26,"column":13}},"14":{"start":{"line":24,"column":31},"end":{"line":24,"column":83}},"15":{"start":{"line":25,"column":16},"end":{"line":25,"column":39}},"16":{"start":{"line":27,"column":12},"end":{"line":27,"column":35}},"17":{"start":{"line":30,"column":12},"end":{"line":30,"column":107}},"18":{"start":{"line":34,"column":8},"end":{"line":46,"column":9}},"19":{"start":{"line":35,"column":12},"end":{"line":41,"column":13}},"20":{"start":{"line":36,"column":16},"end":{"line":40,"column":17}},"21":{"start":{"line":37,"column":20},"end":{"line":37,"column":56}},"22":{"start":{"line":42,"column":12},"end":{"line":42,"column":81}},"23":{"start":{"line":45,"column":12},"end":{"line":45,"column":106}},"24":{"start":{"line":49,"column":8},"end":{"line":49,"column":40}},"25":{"start":{"line":50,"column":8},"end":{"line":52,"column":9}},"26":{"start":{"line":51,"column":12},"end":{"line":51,"column":87}},"27":{"start":{"line":53,"column":8},"end":{"line":55,"column":9}},"28":{"start":{"line":53,"column":53},"end":{"line":53,"column":70}},"29":{"start":{"line":54,"column":12},"end":{"line":54,"column":75}},"30":{"start":{"line":56,"column":8},"end":{"line":63,"column":9}},"31":{"start":{"line":57,"column":34},"end":{"line":57,"column":92}},"32":{"start":{"line":58,"column":28},"end":{"line":58,"column":62}},"33":{"start":{"line":59,"column":12},"end":{"line":59,"column":49}},"34":{"start":{"line":62,"column":12},"end":{"line":62,"column":99}},"35":{"start":{"line":64,"column":8},"end":{"line":64,"column":31}},"36":{"start":{"line":65,"column":8},"end":{"line":65,"column":67}},"37":{"start":{"line":65,"column":55},"end":{"line":65,"column":65}},"38":{"start":{"line":68,"column":8},"end":{"line":68,"column":40}},"39":{"start":{"line":69,"column":8},"end":{"line":71,"column":9}},"40":{"start":{"line":70,"column":12},"end":{"line":70,"column":73}},"41":{"start":{"line":72,"column":28},"end":{"line":72,"column":30}},"42":{"start":{"line":73,"column":8},"end":{"line":77,"column":11}},"43":{"start":{"line":74,"column":12},"end":{"line":76,"column":13}},"44":{"start":{"line":75,"column":16},"end":{"line":75,"column":42}},"45":{"start":{"line":78,"column":8},"end":{"line":80,"column":9}},"46":{"start":{"line":79,"column":12},"end":{"line":79,"column":94}},"47":{"start":{"line":81,"column":8},"end":{"line":81,"column":45}},"48":{"start":{"line":82,"column":8},"end":{"line":82,"column":31}},"49":{"start":{"line":83,"column":8},"end":{"line":83,"column":18}},"50":{"start":{"line":86,"column":8},"end":{"line":86,"column":40}},"51":{"start":{"line":87,"column":19},"end":{"line":87,"column":69}},"52":{"start":{"line":87,"column":55},"end":{"line":87,"column":68}},"53":{"start":{"line":88,"column":25},"end":{"line":88,"column":53}},"54":{"start":{"line":89,"column":8},"end":{"line":89,"column":24}},"55":{"start":{"line":92,"column":8},"end":{"line":92,"column":40}},"56":{"start":{"line":93,"column":8},"end":{"line":97,"column":12}},"57":{"start":{"line":93,"column":56},"end":{"line":97,"column":9}},"58":{"start":{"line":100,"column":0},"end":{"line":100,"column":32}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":14,"column":4},"end":{"line":14,"column":5}},"loc":{"start":{"line":14,"column":18},"end":{"line":17,"column":5}},"line":14},"2":{"name":"(anonymous_2)","decl":{"start":{"line":18,"column":4},"end":{"line":18,"column":5}},"loc":{"start":{"line":18,"column":31},"end":{"line":32,"column":5}},"line":18},"3":{"name":"(anonymous_3)","decl":{"start":{"line":33,"column":4},"end":{"line":33,"column":5}},"loc":{"start":{"line":33,"column":22},"end":{"line":47,"column":5}},"line":33},"4":{"name":"(anonymous_4)","decl":{"start":{"line":48,"column":4},"end":{"line":48,"column":5}},"loc":{"start":{"line":48,"column":40},"end":{"line":66,"column":5}},"line":48},"5":{"name":"(anonymous_5)","decl":{"start":{"line":53,"column":40},"end":{"line":53,"column":41}},"loc":{"start":{"line":53,"column":53},"end":{"line":53,"column":70}},"line":53},"6":{"name":"(anonymous_6)","decl":{"start":{"line":65,"column":42},"end":{"line":65,"column":43}},"loc":{"start":{"line":65,"column":55},"end":{"line":65,"column":65}},"line":65},"7":{"name":"(anonymous_7)","decl":{"start":{"line":67,"column":4},"end":{"line":67,"column":5}},"loc":{"start":{"line":67,"column":28},"end":{"line":84,"column":5}},"line":67},"8":{"name":"(anonymous_8)","decl":{"start":{"line":73,"column":39},"end":{"line":73,"column":40}},"loc":{"start":{"line":73,"column":52},"end":{"line":77,"column":9}},"line":73},"9":{"name":"(anonymous_9)","decl":{"start":{"line":85,"column":4},"end":{"line":85,"column":5}},"loc":{"start":{"line":85,"column":30},"end":{"line":90,"column":5}},"line":85},"10":{"name":"(anonymous_10)","decl":{"start":{"line":87,"column":49},"end":{"line":87,"column":50}},"loc":{"start":{"line":87,"column":55},"end":{"line":87,"column":68}},"line":87},"11":{"name":"(anonymous_11)","decl":{"start":{"line":91,"column":4},"end":{"line":91,"column":5}},"loc":{"start":{"line":91,"column":25},"end":{"line":98,"column":5}},"line":91},"12":{"name":"(anonymous_12)","decl":{"start":{"line":93,"column":42},"end":{"line":93,"column":43}},"loc":{"start":{"line":93,"column":56},"end":{"line":97,"column":9}},"line":93}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":19,"column":8},"end":{"line":21,"column":9}},"type":"if","locations":[{"start":{"line":19,"column":8},"end":{"line":21,"column":9}},{"start":{"line":19,"column":8},"end":{"line":21,"column":9}}],"line":19},"4":{"loc":{"start":{"line":23,"column":12},"end":{"line":26,"column":13}},"type":"if","locations":[{"start":{"line":23,"column":12},"end":{"line":26,"column":13}},{"start":{"line":23,"column":12},"end":{"line":26,"column":13}}],"line":23},"5":{"loc":{"start":{"line":35,"column":12},"end":{"line":41,"column":13}},"type":"if","locations":[{"start":{"line":35,"column":12},"end":{"line":41,"column":13}},{"start":{"line":35,"column":12},"end":{"line":41,"column":13}}],"line":35},"6":{"loc":{"start":{"line":50,"column":8},"end":{"line":52,"column":9}},"type":"if","locations":[{"start":{"line":50,"column":8},"end":{"line":52,"column":9}},{"start":{"line":50,"column":8},"end":{"line":52,"column":9}}],"line":50},"7":{"loc":{"start":{"line":53,"column":8},"end":{"line":55,"column":9}},"type":"if","locations":[{"start":{"line":53,"column":8},"end":{"line":55,"column":9}},{"start":{"line":53,"column":8},"end":{"line":55,"column":9}}],"line":53},"8":{"loc":{"start":{"line":56,"column":8},"end":{"line":63,"column":9}},"type":"if","locations":[{"start":{"line":56,"column":8},"end":{"line":63,"column":9}},{"start":{"line":56,"column":8},"end":{"line":63,"column":9}}],"line":56},"9":{"loc":{"start":{"line":69,"column":8},"end":{"line":71,"column":9}},"type":"if","locations":[{"start":{"line":69,"column":8},"end":{"line":71,"column":9}},{"start":{"line":69,"column":8},"end":{"line":71,"column":9}}],"line":69},"10":{"loc":{"start":{"line":74,"column":12},"end":{"line":76,"column":13}},"type":"if","locations":[{"start":{"line":74,"column":12},"end":{"line":76,"column":13}},{"start":{"line":74,"column":12},"end":{"line":76,"column":13}}],"line":74},"11":{"loc":{"start":{"line":78,"column":8},"end":{"line":80,"column":9}},"type":"if","locations":[{"start":{"line":78,"column":8},"end":{"line":80,"column":9}},{"start":{"line":78,"column":8},"end":{"line":80,"column":9}}],"line":78}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":30,"9":30,"10":132,"11":99,"12":33,"13":33,"14":0,"15":0,"16":33,"17":0,"18":28,"19":28,"20":19,"21":19,"22":28,"23":0,"24":41,"25":41,"26":4,"27":37,"28":11,"29":2,"30":35,"31":35,"32":26,"33":26,"34":0,"35":26,"36":26,"37":45,"38":5,"39":5,"40":2,"41":3,"42":3,"43":4,"44":2,"45":3,"46":1,"47":2,"48":2,"49":2,"50":73,"51":73,"52":57,"53":73,"54":24,"55":13,"56":13,"57":11,"58":1},"f":{"0":1,"1":30,"2":132,"3":28,"4":41,"5":11,"6":45,"7":5,"8":4,"9":73,"10":57,"11":13,"12":11},"b":{"0":[1,1,1],"1":[1,0],"2":[1,1],"3":[99,33],"4":[0,33],"5":[19,9],"6":[4,37],"7":[2,35],"8":[35,0],"9":[2,3],"10":[2,2],"11":[1,2]},"inputSourceMap":{"version":3,"file":"/Users/fegicochen/Courses/CPSC 310/C1/project_team085/src/controller/InsightFacade.ts","sources":["/Users/fegicochen/Courses/CPSC 310/C1/project_team085/src/controller/InsightFacade.ts"],"names":[],"mappings":"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","sourcesContent":["import { Dataset, DatasetList, DatasetUtils } from \"./Dataset\";\nimport {\n\tIInsightFacade,\n\tInsightDataset,\n\tInsightDatasetKind,\n\tInsightError,\n\tInsightResult,\n\tNotFoundError,\n} from \"./IInsightFacade\";\nimport { QueryEngine } from \"./QueryEngine\";\nimport DatasetProcessor from \"../../src/controller/DatasetProcessor\";\nimport { mkdir, pathExists, readJSON, writeJSON } from \"fs-extra\";\n\n/**\n * This is the main programmatic entry point for the project.\n * Method documentation is in IInsightFacade\n *\n */\nexport default class InsightFacade implements IInsightFacade {\n\tprivate datasets: DatasetList;\n\tprivate loadedData;\n\n\tconstructor() {\n\t\t// TODO: Load datasets from dist\n\t\tthis.loadedData = false;\n\t\tthis.datasets = { datasets: [] };\n\t}\n\n\tprivate async loadDataIfRequired(): Promise<void> {\n\t\tif (this.loadedData) {\n\t\t\treturn;\n\t\t}\n\t\ttry {\n\t\t\tif (await pathExists(\"data/datasets.json\")) {\n\t\t\t\tconst pkgObj = await readJSON(\"data/datasets.json\");\n\t\t\t\tthis.datasets = pkgObj as DatasetList;\n\t\t\t}\n\t\t\tthis.loadedData = true;\n\t\t} catch (e) {\n\t\t\tthrow new InsightError(\"Failed to read data from disc: \" + JSON.stringify(e));\n\t\t}\n\t}\n\n\tprivate async writeData(): Promise<void> {\n\t\ttry {\n\t\t\tif (!(await pathExists(\"data\"))) {\n\t\t\t\ttry {\n\t\t\t\t\tawait mkdir(\"data\");\n\t\t\t\t} catch (_e) {\n\t\t\t\t\t// Its fine\n\t\t\t\t}\n\t\t\t}\n\t\t\tawait writeJSON(\"data/datasets.json\", this.datasets);\n\t\t} catch (e) {\n\t\t\tthrow new InsightError(\"Failed to write data to disc: \" + JSON.stringify(e));\n\t\t}\n\t}\n\n\tpublic async addDataset(id: string, content: string, kind: InsightDatasetKind): Promise<string[]> {\n\t\tawait this.loadDataIfRequired();\n\t\t// Check id valid\n\t\tif (!DatasetUtils.isValidIdString(id)) {\n\t\t\tthrow new InsightError(\"Invalid dataset ID: \" + id + \".\");\n\t\t}\n\n\t\t// Check for duplicate ID\n\t\tif (this.datasets.datasets.find((dataset) => dataset.id === id)) {\n\t\t\tthrow new InsightError(\"Duplicate ID: \" + id);\n\t\t}\n\n\t\t// Check kind\n\t\tif (kind === InsightDatasetKind.Sections) {\n\t\t\tconst validSections = await DatasetProcessor.getValidSections(content);\n\t\t\tconst dataset: Dataset = { id: id, members: validSections };\n\t\t\tthis.datasets.datasets.push(dataset);\n\t\t} else {\n\t\t\tthrow new InsightError(\"InsightDatasetKind.Rooms not supported yet.\");\n\t\t}\n\n\t\t// Save to disc\n\t\tawait this.writeData();\n\n\t\t// Return list of valid datasets\n\t\treturn this.datasets.datasets.map((dataset) => dataset.id);\n\t}\n\n\tpublic async removeDataset(id: string): Promise<string> {\n\t\tawait this.loadDataIfRequired();\n\n\t\tif (!DatasetUtils.isValidIdString(id)) {\n\t\t\tthrow new InsightError(\"Invalid id: \" + id);\n\t\t}\n\t\tconst newDatasets: Dataset[] = [];\n\t\tthis.datasets.datasets.forEach((dataset) => {\n\t\t\tif (dataset.id !== id) {\n\t\t\t\tnewDatasets.push(dataset);\n\t\t\t}\n\t\t});\n\t\tif (this.datasets.datasets.length === newDatasets.length) {\n\t\t\tthrow new NotFoundError(\"Dataset with id \" + id + \" not found.\");\n\t\t}\n\t\tthis.datasets.datasets = newDatasets;\n\n\t\t// Save to disc\n\t\tawait this.writeData();\n\n\t\treturn id;\n\t}\n\n\tpublic async performQuery(query: unknown): Promise<InsightResult[]> {\n\t\tawait this.loadDataIfRequired();\n\t\tconst qe = new QueryEngine(() => this.datasets);\n\t\tconst sections = await qe.processQuery(query);\n\t\treturn sections;\n\t}\n\n\tpublic async listDatasets(): Promise<InsightDataset[]> {\n\t\tawait this.loadDataIfRequired();\n\t\treturn this.datasets.datasets.map((dataset) => ({\n\t\t\tid: dataset.id,\n\t\t\tkind: InsightDatasetKind.Sections,\n\t\t\tnumRows: dataset.members.length,\n\t\t}));\n\t}\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"4ad51916b30377369e9354bbcb198aa60d141a4c","contentHash":"e0bd71cbf9c2be9e980f1176ddae90dc8014a23a0b826d700af1f07d1d3e7bde"},"/Users/fegicochen/Courses/CPSC 310/C1/project_team085/src/controller/Dataset.ts":{"path":"/Users/fegicochen/Courses/CPSC 310/C1/project_team085/src/controller/Dataset.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":126}},"2":{"start":{"line":4,"column":25},"end":{"line":4,"column":52}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":26}},"4":{"start":{"line":7,"column":0},"end":{"line":18,"column":62}},"5":{"start":{"line":8,"column":4},"end":{"line":8,"column":31}},"6":{"start":{"line":9,"column":4},"end":{"line":9,"column":27}},"7":{"start":{"line":10,"column":4},"end":{"line":10,"column":33}},"8":{"start":{"line":11,"column":4},"end":{"line":11,"column":43}},"9":{"start":{"line":12,"column":4},"end":{"line":12,"column":31}},"10":{"start":{"line":13,"column":4},"end":{"line":13,"column":31}},"11":{"start":{"line":14,"column":4},"end":{"line":14,"column":29}},"12":{"start":{"line":15,"column":4},"end":{"line":15,"column":31}},"13":{"start":{"line":16,"column":4},"end":{"line":16,"column":31}},"14":{"start":{"line":17,"column":4},"end":{"line":17,"column":33}},"15":{"start":{"line":19,"column":0},"end":{"line":19,"column":99}},"16":{"start":{"line":20,"column":0},"end":{"line":20,"column":104}},"17":{"start":{"line":21,"column":0},"end":{"line":43,"column":2}},"18":{"start":{"line":46,"column":28},"end":{"line":46,"column":94}},"19":{"start":{"line":47,"column":8},"end":{"line":47,"column":40}},"20":{"start":{"line":50,"column":25},"end":{"line":50,"column":35}},"21":{"start":{"line":51,"column":8},"end":{"line":51,"column":70}},"22":{"start":{"line":51,"column":51},"end":{"line":51,"column":68}},"23":{"start":{"line":54,"column":8},"end":{"line":56,"column":9}},"24":{"start":{"line":55,"column":12},"end":{"line":55,"column":25}},"25":{"start":{"line":57,"column":8},"end":{"line":57,"column":20}},"26":{"start":{"line":60,"column":32},"end":{"line":60,"column":46}},"27":{"start":{"line":61,"column":47},"end":{"line":61,"column":48}},"28":{"start":{"line":62,"column":8},"end":{"line":64,"column":9}},"29":{"start":{"line":63,"column":12},"end":{"line":63,"column":29}},"30":{"start":{"line":65,"column":25},"end":{"line":65,"column":43}},"31":{"start":{"line":65,"column":54},"end":{"line":65,"column":72}},"32":{"start":{"line":66,"column":8},"end":{"line":68,"column":9}},"33":{"start":{"line":66,"column":76},"end":{"line":66,"column":88}},"34":{"start":{"line":67,"column":12},"end":{"line":67,"column":29}},"35":{"start":{"line":69,"column":8},"end":{"line":72,"column":10}},"36":{"start":{"line":75,"column":32},"end":{"line":75,"column":46}},"37":{"start":{"line":76,"column":47},"end":{"line":76,"column":48}},"38":{"start":{"line":77,"column":8},"end":{"line":79,"column":9}},"39":{"start":{"line":78,"column":12},"end":{"line":78,"column":29}},"40":{"start":{"line":80,"column":25},"end":{"line":80,"column":43}},"41":{"start":{"line":80,"column":54},"end":{"line":80,"column":72}},"42":{"start":{"line":81,"column":8},"end":{"line":83,"column":9}},"43":{"start":{"line":81,"column":76},"end":{"line":81,"column":88}},"44":{"start":{"line":82,"column":12},"end":{"line":82,"column":29}},"45":{"start":{"line":84,"column":8},"end":{"line":87,"column":10}},"46":{"start":{"line":90,"column":26},"end":{"line":90,"column":45}},"47":{"start":{"line":91,"column":8},"end":{"line":96,"column":9}},"48":{"start":{"line":92,"column":12},"end":{"line":92,"column":29}},"49":{"start":{"line":95,"column":12},"end":{"line":95,"column":39}},"50":{"start":{"line":99,"column":8},"end":{"line":101,"column":9}},"51":{"start":{"line":100,"column":12},"end":{"line":100,"column":25}},"52":{"start":{"line":102,"column":8},"end":{"line":102,"column":108}},"53":{"start":{"line":102,"column":43},"end":{"line":102,"column":92}},"54":{"start":{"line":105,"column":8},"end":{"line":107,"column":9}},"55":{"start":{"line":106,"column":12},"end":{"line":106,"column":25}},"56":{"start":{"line":108,"column":8},"end":{"line":108,"column":108}},"57":{"start":{"line":108,"column":43},"end":{"line":108,"column":92}},"58":{"start":{"line":111,"column":26},"end":{"line":111,"column":35}},"59":{"start":{"line":112,"column":8},"end":{"line":119,"column":11}},"60":{"start":{"line":113,"column":12},"end":{"line":118,"column":13}},"61":{"start":{"line":113,"column":63},"end":{"line":113,"column":80}},"62":{"start":{"line":114,"column":16},"end":{"line":114,"column":35}},"63":{"start":{"line":117,"column":16},"end":{"line":117,"column":88}},"64":{"start":{"line":120,"column":26},"end":{"line":120,"column":28}},"65":{"start":{"line":121,"column":8},"end":{"line":125,"column":11}},"66":{"start":{"line":122,"column":12},"end":{"line":124,"column":13}},"67":{"start":{"line":123,"column":16},"end":{"line":123,"column":60}},"68":{"start":{"line":126,"column":8},"end":{"line":128,"column":9}},"69":{"start":{"line":127,"column":12},"end":{"line":127,"column":108}},"70":{"start":{"line":129,"column":28},"end":{"line":129,"column":37}},"71":{"start":{"line":130,"column":8},"end":{"line":135,"column":11}},"72":{"start":{"line":131,"column":26},"end":{"line":131,"column":40}},"73":{"start":{"line":132,"column":12},"end":{"line":134,"column":13}},"74":{"start":{"line":133,"column":16},"end":{"line":133,"column":50}},"75":{"start":{"line":136,"column":8},"end":{"line":136,"column":27}},"76":{"start":{"line":139,"column":28},"end":{"line":139,"column":37}},"77":{"start":{"line":140,"column":8},"end":{"line":145,"column":11}},"78":{"start":{"line":141,"column":37},"end":{"line":141,"column":67}},"79":{"start":{"line":141,"column":54},"end":{"line":141,"column":66}},"80":{"start":{"line":142,"column":12},"end":{"line":144,"column":13}},"81":{"start":{"line":143,"column":16},"end":{"line":143,"column":44}},"82":{"start":{"line":146,"column":8},"end":{"line":151,"column":11}},"83":{"start":{"line":147,"column":45},"end":{"line":147,"column":48}},"84":{"start":{"line":148,"column":12},"end":{"line":150,"column":13}},"85":{"start":{"line":149,"column":16},"end":{"line":149,"column":85}},"86":{"start":{"line":152,"column":8},"end":{"line":152,"column":27}},"87":{"start":{"line":155,"column":8},"end":{"line":157,"column":9}},"88":{"start":{"line":156,"column":12},"end":{"line":156,"column":133}},"89":{"start":{"line":158,"column":8},"end":{"line":158,"column":19}},"90":{"start":{"line":161,"column":8},"end":{"line":163,"column":9}},"91":{"start":{"line":162,"column":12},"end":{"line":162,"column":133}},"92":{"start":{"line":164,"column":8},"end":{"line":164,"column":19}},"93":{"start":{"line":167,"column":8},"end":{"line":169,"column":9}},"94":{"start":{"line":168,"column":12},"end":{"line":168,"column":133}},"95":{"start":{"line":170,"column":8},"end":{"line":170,"column":19}},"96":{"start":{"line":173,"column":8},"end":{"line":175,"column":9}},"97":{"start":{"line":174,"column":12},"end":{"line":174,"column":141}},"98":{"start":{"line":176,"column":8},"end":{"line":176,"column":19}},"99":{"start":{"line":179,"column":0},"end":{"line":179,"column":36}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":7,"column":1},"end":{"line":7,"column":2}},"loc":{"start":{"line":7,"column":22},"end":{"line":18,"column":1}},"line":7},"1":{"name":"(anonymous_1)","decl":{"start":{"line":45,"column":4},"end":{"line":45,"column":5}},"loc":{"start":{"line":45,"column":33},"end":{"line":48,"column":5}},"line":45},"2":{"name":"(anonymous_2)","decl":{"start":{"line":49,"column":4},"end":{"line":49,"column":5}},"loc":{"start":{"line":49,"column":37},"end":{"line":52,"column":5}},"line":49},"3":{"name":"(anonymous_3)","decl":{"start":{"line":51,"column":38},"end":{"line":51,"column":39}},"loc":{"start":{"line":51,"column":51},"end":{"line":51,"column":68}},"line":51},"4":{"name":"(anonymous_4)","decl":{"start":{"line":53,"column":4},"end":{"line":53,"column":5}},"loc":{"start":{"line":53,"column":37},"end":{"line":58,"column":5}},"line":53},"5":{"name":"(anonymous_5)","decl":{"start":{"line":59,"column":4},"end":{"line":59,"column":5}},"loc":{"start":{"line":59,"column":26},"end":{"line":73,"column":5}},"line":59},"6":{"name":"(anonymous_6)","decl":{"start":{"line":66,"column":69},"end":{"line":66,"column":70}},"loc":{"start":{"line":66,"column":76},"end":{"line":66,"column":88}},"line":66},"7":{"name":"(anonymous_7)","decl":{"start":{"line":74,"column":4},"end":{"line":74,"column":5}},"loc":{"start":{"line":74,"column":26},"end":{"line":88,"column":5}},"line":74},"8":{"name":"(anonymous_8)","decl":{"start":{"line":81,"column":69},"end":{"line":81,"column":70}},"loc":{"start":{"line":81,"column":76},"end":{"line":81,"column":88}},"line":81},"9":{"name":"(anonymous_9)","decl":{"start":{"line":89,"column":4},"end":{"line":89,"column":5}},"loc":{"start":{"line":89,"column":29},"end":{"line":97,"column":5}},"line":89},"10":{"name":"(anonymous_10)","decl":{"start":{"line":98,"column":4},"end":{"line":98,"column":5}},"loc":{"start":{"line":98,"column":23},"end":{"line":103,"column":5}},"line":98},"11":{"name":"(anonymous_11)","decl":{"start":{"line":102,"column":36},"end":{"line":102,"column":37}},"loc":{"start":{"line":102,"column":43},"end":{"line":102,"column":92}},"line":102},"12":{"name":"(anonymous_12)","decl":{"start":{"line":104,"column":4},"end":{"line":104,"column":5}},"loc":{"start":{"line":104,"column":23},"end":{"line":109,"column":5}},"line":104},"13":{"name":"(anonymous_13)","decl":{"start":{"line":108,"column":36},"end":{"line":108,"column":37}},"loc":{"start":{"line":108,"column":43},"end":{"line":108,"column":92}},"line":108},"14":{"name":"(anonymous_14)","decl":{"start":{"line":110,"column":4},"end":{"line":110,"column":5}},"loc":{"start":{"line":110,"column":39},"end":{"line":137,"column":5}},"line":110},"15":{"name":"(anonymous_15)","decl":{"start":{"line":112,"column":33},"end":{"line":112,"column":34}},"loc":{"start":{"line":112,"column":42},"end":{"line":119,"column":9}},"line":112},"16":{"name":"(anonymous_16)","decl":{"start":{"line":113,"column":26},"end":{"line":113,"column":27}},"loc":{"start":{"line":113,"column":63},"end":{"line":113,"column":80}},"line":113},"17":{"name":"(anonymous_17)","decl":{"start":{"line":121,"column":21},"end":{"line":121,"column":22}},"loc":{"start":{"line":121,"column":57},"end":{"line":125,"column":9}},"line":121},"18":{"name":"(anonymous_18)","decl":{"start":{"line":130,"column":21},"end":{"line":130,"column":22}},"loc":{"start":{"line":130,"column":58},"end":{"line":135,"column":9}},"line":130},"19":{"name":"(anonymous_19)","decl":{"start":{"line":138,"column":4},"end":{"line":138,"column":5}},"loc":{"start":{"line":138,"column":37},"end":{"line":153,"column":5}},"line":138},"20":{"name":"(anonymous_20)","decl":{"start":{"line":140,"column":36},"end":{"line":140,"column":37}},"loc":{"start":{"line":140,"column":54},"end":{"line":145,"column":9}},"line":140},"21":{"name":"(anonymous_21)","decl":{"start":{"line":141,"column":47},"end":{"line":141,"column":48}},"loc":{"start":{"line":141,"column":54},"end":{"line":141,"column":66}},"line":141},"22":{"name":"(anonymous_22)","decl":{"start":{"line":146,"column":21},"end":{"line":146,"column":22}},"loc":{"start":{"line":146,"column":30},"end":{"line":151,"column":9}},"line":146},"23":{"name":"(anonymous_23)","decl":{"start":{"line":154,"column":4},"end":{"line":154,"column":5}},"loc":{"start":{"line":154,"column":39},"end":{"line":159,"column":5}},"line":154},"24":{"name":"(anonymous_24)","decl":{"start":{"line":160,"column":4},"end":{"line":160,"column":5}},"loc":{"start":{"line":160,"column":39},"end":{"line":165,"column":5}},"line":160},"25":{"name":"(anonymous_25)","decl":{"start":{"line":166,"column":4},"end":{"line":166,"column":5}},"loc":{"start":{"line":166,"column":38},"end":{"line":171,"column":5}},"line":166},"26":{"name":"(anonymous_26)","decl":{"start":{"line":172,"column":4},"end":{"line":172,"column":5}},"loc":{"start":{"line":172,"column":39},"end":{"line":177,"column":5}},"line":172}},"branchMap":{"0":{"loc":{"start":{"line":18,"column":15},"end":{"line":18,"column":60}},"type":"binary-expr","locations":[{"start":{"line":18,"column":15},"end":{"line":18,"column":32}},{"start":{"line":18,"column":37},"end":{"line":18,"column":59}}],"line":18},"1":{"loc":{"start":{"line":54,"column":8},"end":{"line":56,"column":9}},"type":"if","locations":[{"start":{"line":54,"column":8},"end":{"line":56,"column":9}},{"start":{"line":54,"column":8},"end":{"line":56,"column":9}}],"line":54},"2":{"loc":{"start":{"line":54,"column":12},"end":{"line":54,"column":60}},"type":"binary-expr","locations":[{"start":{"line":54,"column":12},"end":{"line":54,"column":34}},{"start":{"line":54,"column":38},"end":{"line":54,"column":60}}],"line":54},"3":{"loc":{"start":{"line":62,"column":8},"end":{"line":64,"column":9}},"type":"if","locations":[{"start":{"line":62,"column":8},"end":{"line":64,"column":9}},{"start":{"line":62,"column":8},"end":{"line":64,"column":9}}],"line":62},"4":{"loc":{"start":{"line":66,"column":8},"end":{"line":68,"column":9}},"type":"if","locations":[{"start":{"line":66,"column":8},"end":{"line":68,"column":9}},{"start":{"line":66,"column":8},"end":{"line":68,"column":9}}],"line":66},"5":{"loc":{"start":{"line":66,"column":12},"end":{"line":66,"column":89}},"type":"binary-expr","locations":[{"start":{"line":66,"column":12},"end":{"line":66,"column":43}},{"start":{"line":66,"column":47},"end":{"line":66,"column":89}}],"line":66},"6":{"loc":{"start":{"line":77,"column":8},"end":{"line":79,"column":9}},"type":"if","locations":[{"start":{"line":77,"column":8},"end":{"line":79,"column":9}},{"start":{"line":77,"column":8},"end":{"line":79,"column":9}}],"line":77},"7":{"loc":{"start":{"line":81,"column":8},"end":{"line":83,"column":9}},"type":"if","locations":[{"start":{"line":81,"column":8},"end":{"line":83,"column":9}},{"start":{"line":81,"column":8},"end":{"line":83,"column":9}}],"line":81},"8":{"loc":{"start":{"line":81,"column":12},"end":{"line":81,"column":89}},"type":"binary-expr","locations":[{"start":{"line":81,"column":12},"end":{"line":81,"column":43}},{"start":{"line":81,"column":47},"end":{"line":81,"column":89}}],"line":81},"9":{"loc":{"start":{"line":91,"column":8},"end":{"line":96,"column":9}},"type":"if","locations":[{"start":{"line":91,"column":8},"end":{"line":96,"column":9}},{"start":{"line":91,"column":8},"end":{"line":96,"column":9}}],"line":91},"10":{"loc":{"start":{"line":99,"column":8},"end":{"line":101,"column":9}},"type":"if","locations":[{"start":{"line":99,"column":8},"end":{"line":101,"column":9}},{"start":{"line":99,"column":8},"end":{"line":101,"column":9}}],"line":99},"11":{"loc":{"start":{"line":102,"column":50},"end":{"line":102,"column":91}},"type":"cond-expr","locations":[{"start":{"line":102,"column":76},"end":{"line":102,"column":79}},{"start":{"line":102,"column":82},"end":{"line":102,"column":91}}],"line":102},"12":{"loc":{"start":{"line":105,"column":8},"end":{"line":107,"column":9}},"type":"if","locations":[{"start":{"line":105,"column":8},"end":{"line":107,"column":9}},{"start":{"line":105,"column":8},"end":{"line":107,"column":9}}],"line":105},"13":{"loc":{"start":{"line":108,"column":50},"end":{"line":108,"column":91}},"type":"cond-expr","locations":[{"start":{"line":108,"column":76},"end":{"line":108,"column":79}},{"start":{"line":108,"column":82},"end":{"line":108,"column":91}}],"line":108},"14":{"loc":{"start":{"line":113,"column":12},"end":{"line":118,"column":13}},"type":"if","locations":[{"start":{"line":113,"column":12},"end":{"line":118,"column":13}},{"start":{"line":113,"column":12},"end":{"line":118,"column":13}}],"line":113},"15":{"loc":{"start":{"line":122,"column":12},"end":{"line":124,"column":13}},"type":"if","locations":[{"start":{"line":122,"column":12},"end":{"line":124,"column":13}},{"start":{"line":122,"column":12},"end":{"line":124,"column":13}}],"line":122},"16":{"loc":{"start":{"line":122,"column":16},"end":{"line":122,"column":62}},"type":"binary-expr","locations":[{"start":{"line":122,"column":16},"end":{"line":122,"column":33}},{"start":{"line":122,"column":37},"end":{"line":122,"column":62}}],"line":122},"17":{"loc":{"start":{"line":126,"column":8},"end":{"line":128,"column":9}},"type":"if","locations":[{"start":{"line":126,"column":8},"end":{"line":128,"column":9}},{"start":{"line":126,"column":8},"end":{"line":128,"column":9}}],"line":126},"18":{"loc":{"start":{"line":132,"column":12},"end":{"line":134,"column":13}},"type":"if","locations":[{"start":{"line":132,"column":12},"end":{"line":134,"column":13}},{"start":{"line":132,"column":12},"end":{"line":134,"column":13}}],"line":132},"19":{"loc":{"start":{"line":132,"column":16},"end":{"line":132,"column":63}},"type":"binary-expr","locations":[{"start":{"line":132,"column":16},"end":{"line":132,"column":40}},{"start":{"line":132,"column":44},"end":{"line":132,"column":63}}],"line":132},"20":{"loc":{"start":{"line":142,"column":12},"end":{"line":144,"column":13}},"type":"if","locations":[{"start":{"line":142,"column":12},"end":{"line":144,"column":13}},{"start":{"line":142,"column":12},"end":{"line":144,"column":13}}],"line":142},"21":{"loc":{"start":{"line":148,"column":12},"end":{"line":150,"column":13}},"type":"if","locations":[{"start":{"line":148,"column":12},"end":{"line":150,"column":13}},{"start":{"line":148,"column":12},"end":{"line":150,"column":13}}],"line":148},"22":{"loc":{"start":{"line":148,"column":16},"end":{"line":148,"column":58}},"type":"binary-expr","locations":[{"start":{"line":148,"column":16},"end":{"line":148,"column":27}},{"start":{"line":148,"column":31},"end":{"line":148,"column":58}}],"line":148},"23":{"loc":{"start":{"line":155,"column":8},"end":{"line":157,"column":9}},"type":"if","locations":[{"start":{"line":155,"column":8},"end":{"line":157,"column":9}},{"start":{"line":155,"column":8},"end":{"line":157,"column":9}}],"line":155},"24":{"loc":{"start":{"line":161,"column":8},"end":{"line":163,"column":9}},"type":"if","locations":[{"start":{"line":161,"column":8},"end":{"line":163,"column":9}},{"start":{"line":161,"column":8},"end":{"line":163,"column":9}}],"line":161},"25":{"loc":{"start":{"line":167,"column":8},"end":{"line":169,"column":9}},"type":"if","locations":[{"start":{"line":167,"column":8},"end":{"line":169,"column":9}},{"start":{"line":167,"column":8},"end":{"line":169,"column":9}}],"line":167},"26":{"loc":{"start":{"line":173,"column":8},"end":{"line":175,"column":9}},"type":"if","locations":[{"start":{"line":173,"column":8},"end":{"line":175,"column":9}},{"start":{"line":173,"column":8},"end":{"line":175,"column":9}}],"line":173},"27":{"loc":{"start":{"line":173,"column":12},"end":{"line":173,"column":94}},"type":"binary-expr","locations":[{"start":{"line":173,"column":12},"end":{"line":173,"column":35}},{"start":{"line":173,"column":39},"end":{"line":173,"column":57}},{"start":{"line":173,"column":61},"end":{"line":173,"column":73}},{"start":{"line":173,"column":77},"end":{"line":173,"column":94}}],"line":173}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":0,"19":0,"20":57,"21":57,"22":228,"23":776,"24":6,"25":770,"26":511,"27":511,"28":511,"29":5,"30":506,"31":506,"32":506,"33":1710,"34":224,"35":282,"36":229,"37":229,"38":229,"39":5,"40":224,"41":224,"42":224,"43":542,"44":1,"45":223,"46":511,"47":511,"48":282,"49":229,"50":3252454,"51":0,"52":3252454,"53":13009654,"54":1626207,"55":0,"56":1626207,"57":4878573,"58":381,"59":381,"60":499,"61":1359,"62":496,"63":3,"64":378,"65":378,"66":1971,"67":6,"68":378,"69":5,"70":373,"71":373,"72":1961,"73":1961,"74":492,"75":373,"76":354998,"77":354998,"78":11767880,"79":110963615,"80":11767880,"81":3607314,"82":354998,"83":3607308,"84":3607308,"85":2,"86":354996,"87":1951459,"88":201544,"89":1749915,"90":1828109,"91":325231,"92":1502878,"93":29907,"94":2,"95":29905,"96":355528,"97":3,"98":355525,"99":1},"f":{"0":1,"1":0,"2":57,"3":228,"4":776,"5":511,"6":1710,"7":229,"8":542,"9":511,"10":3252454,"11":13009654,"12":1626207,"13":4878573,"14":381,"15":499,"16":1359,"17":1971,"18":1961,"19":354998,"20":11767880,"21":110963615,"22":3607308,"23":1951459,"24":1828109,"25":29907,"26":355528},"b":{"0":[1,1],"1":[6,770],"2":[776,773],"3":[5,506],"4":[224,282],"5":[506,506],"6":[5,224],"7":[1,223],"8":[224,224],"9":[282,229],"10":[0,3252454],"11":[13009218,436],"12":[0,1626207],"13":[4878450,123],"14":[496,3],"15":[6,1965],"16":[1971,205],"17":[5,373],"18":[492,1469],"19":[1961,492],"20":[3607314,8160566],"21":[2,3607306],"22":[3607308,3282078],"23":[201544,1749915],"24":[325231,1502878],"25":[2,29905],"26":[3,355525],"27":[355528,355526,355525,355525]},"inputSourceMap":{"version":3,"file":"/Users/fegicochen/Courses/CPSC 310/C1/project_team085/src/controller/Dataset.ts","sources":["/Users/fegicochen/Courses/CPSC 310/C1/project_team085/src/controller/Dataset.ts"],"names":[],"mappings":"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","sourcesContent":["import { InsightError } from \"./IInsightFacade\";\n\nexport const maxResults = 5000;\n\nexport enum DatasetId {\n\tUuid = \"uuid\",\n\tId = \"id\",\n\tTitle = \"title\",\n\tInstructor = \"instructor\",\n\tDept = \"dept\",\n\tYear = \"year\",\n\tAvg = \"avg\",\n\tPass = \"pass\",\n\tFail = \"fail\",\n\tAudit = \"audit\",\n}\n\nexport interface Section {\n\tuuid: string;\n\tid: string;\n\ttitle: string;\n\tinstructor: string;\n\tdept: string;\n\tyear: number;\n\tavg: number;\n\tpass: number;\n\tfail: number;\n\taudit: number;\n}\n\nexport interface Dataset {\n\tid: string;\n\tmembers: Section[];\n}\n\nexport interface DatasetList {\n\tdatasets: Dataset[];\n}\n\nexport type DatasetsProvider = () => DatasetList;\n\nexport const MFields = [DatasetId.Avg, DatasetId.Pass, DatasetId.Fail, DatasetId.Audit, DatasetId.Year];\nexport const SFields = [DatasetId.Dept, DatasetId.Id, DatasetId.Instructor, DatasetId.Title, DatasetId.Uuid];\n\nexport interface InsightFacadeKey {\n\tidstring: string;\n\tfield: DatasetId;\n}\n\nexport const Keywords = {\n\tBody: \"WHERE\",\n\tOptions: \"OPTIONS\",\n\tFilter: {\n\t\tLogic: {\n\t\t\tAnd: \"AND\",\n\t\t\tOr: \"OR\",\n\t\t},\n\t\tMComparator: {\n\t\t\tLessThan: \"LT\",\n\t\t\tGreaterThan: \"GT\",\n\t\t\tEqual: \"EQ\",\n\t\t},\n\t\tSComparator: {\n\t\t\tIs: \"IS\",\n\t\t},\n\t\tNegation: {\n\t\t\tNot: \"NOT\",\n\t\t},\n\t},\n\tColumns: \"COLUMNS\",\n\tOrder: \"ORDER\",\n};\n\nexport interface OptionsState {\n\torder: InsightFacadeKey | undefined;\n\tcolumns: InsightFacadeKey[];\n\tdatasetId: string;\n}\n\nexport class DatasetUtils {\n\t/**\n\t *\n\t * @param base64 the base64 (maybe) string to validate\n\t * @returns whether it is base64 formatted or not\n\t */\n\tpublic static isValidBase64(base64: string): boolean {\n\t\t// Referenced from: https://stackoverflow.com/questions/7860392/determine-if-string-is-in-base64-using-javascript\n\t\t// Used the regular expression provided.\n\t\tconst base64regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;\n\t\treturn base64regex.test(base64);\n\t}\n\n\t/**\n\t *\n\t * @param provider datasets provider\n\t * @param id id to search for\n\t * @returns undefined if not found, else the dataset with the given id\n\t */\n\tpublic static findDataset(provider: DatasetsProvider, id: string): Dataset | undefined {\n\t\tconst datasets = provider();\n\t\treturn datasets.datasets.find((dataset) => dataset.id === id);\n\t}\n\n\t/**\n\t * Returns false if idstring does not conform to id string guidelines.\n\t *\n\t * @param idstring string to test\n\t * @returns false if string is improperly formatted (only whitespace or contains underscoare), true otherwise\n\t */\n\tpublic static isValidIdString(idstring: string): boolean {\n\t\tif (idstring.trim() === \"\" || idstring.includes(\"_\")) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t *\n\t * @param key string to test\n\t * @returns undefined if string is improperly formatted as an mkey, id string and key split if it is valid.\n\t */\n\tpublic static parseMKey(key: string): InsightFacadeKey | undefined {\n\t\tconst splitUnderscore = key.split(\"_\");\n\t\tconst beforeAndAfterUnderscoreLength = 2;\n\t\tif (splitUnderscore.length !== beforeAndAfterUnderscoreLength) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst idstring = splitUnderscore[0],\n\t\t\tmfield = splitUnderscore[1];\n\t\tif (!this.isValidIdString(idstring) || !MFields.find((x) => x === mfield)) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn {\n\t\t\tidstring: idstring,\n\t\t\tfield: mfield as DatasetId,\n\t\t};\n\t}\n\n\t/**\n\t *\n\t * @param key string to test\n\t * @returns undefined if string is improperly formatted as an skey, id string and key split if it is valid.\n\t */\n\tpublic static parseSKey(key: string): InsightFacadeKey | undefined {\n\t\tconst splitUnderscore = key.split(\"_\");\n\t\tconst beforeAndAfterUnderscoreLength = 2;\n\t\tif (splitUnderscore.length !== beforeAndAfterUnderscoreLength) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst idstring = splitUnderscore[0],\n\t\t\tsfield = splitUnderscore[1];\n\t\tif (!this.isValidIdString(idstring) || !SFields.find((x) => x === sfield)) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn {\n\t\t\tidstring: idstring,\n\t\t\tfield: sfield as DatasetId,\n\t\t};\n\t}\n\n\t/**\n\t *\n\t * @param key string to test\n\t * @reutrns undefined if string is not an mkey or skey, otherwise produces id string and key split.\n\t */\n\tpublic static parseMOrSKey(key: string): InsightFacadeKey | undefined {\n\t\tconst mkeyParse = this.parseMKey(key);\n\t\tif (mkeyParse !== undefined) {\n\t\t\treturn mkeyParse;\n\t\t} else {\n\t\t\treturn this.parseSKey(key);\n\t\t}\n\t}\n\n\t/**\n\t *\n\t * @param key key to test with idstring and field or string representing type (DatasetId.Audit etc)\n\t * @returns whether it is an mkey or not\n\t */\n\tpublic static isMKey(key: InsightFacadeKey | string | undefined): boolean {\n\t\tif (key === undefined) {\n\t\t\treturn false;\n\t\t}\n\t\treturn MFields.find((x) => x === (typeof key === \"string\" ? key : key.field)) !== undefined;\n\t}\n\n\t/**\n\t *\n\t * @param key key to test with idstring and field or string representing type (DatasetId.Uuid, etc)\n\t * @returns whether it is an skey or not\n\t */\n\tpublic static isSKey(key: InsightFacadeKey | string | undefined): boolean {\n\t\tif (key === undefined) {\n\t\t\treturn false;\n\t\t}\n\t\treturn SFields.find((x) => x === (typeof key === \"string\" ? key : key.field)) !== undefined;\n\t}\n\n\t/**\n\t * Ensures object is populated with only the given keys and returns a map\n\t * between keys and their values in the object. Keys are paried with boolean indicating\n\t * whether they are mandatory or not. If they are not mandatory and not found, function\n\t * will not throw.\n\t *\n\t * @param obj object to check\n\t * @param keys keys in object to retrieve paired with whether they are mandatory\n\t * @throws InsighError if key match isn't exact (extra or missing keys)\n\t */\n\tpublic static requireExactKeys(obj: object, keys: [string, boolean][]): Map<string, unknown> {\n\t\t// Check for extra keys\n\t\tconst keysFound = new Set<string>();\n\t\tObject.keys(obj).forEach((key) => {\n\t\t\tif (keys.find(([searchKey, _searchKeyRequired]) => searchKey === key) !== undefined) {\n\t\t\t\tkeysFound.add(key);\n\t\t\t} else {\n\t\t\t\tthrow new InsightError(\"Extraneous key: \" + key + \".\");\n\t\t\t}\n\t\t});\n\t\t// Check for missing keys\n\t\tlet missingKeys: string[] = [];\n\t\tkeys.forEach(([searchKey, searchKeyRequired]) => {\n\t\t\t// If key is reuqired and it is not found\n\t\t\tif (searchKeyRequired && !keysFound.has(searchKey)) {\n\t\t\t\tmissingKeys = missingKeys.concat(searchKey);\n\t\t\t}\n\t\t});\n\t\tif (missingKeys.length !== 0) {\n\t\t\tthrow new InsightError(\"Missing key(s): \" + JSON.stringify(missingKeys) + \".\");\n\t\t}\n\n\t\t// Map keys to values in object\n\t\tconst keyValueMap = new Map<string, unknown>();\n\t\tkeys.forEach(([searchKey, _searchKeyRequired]) => {\n\t\t\tconst value = obj[searchKey as keyof typeof obj];\n\t\t\tif (keysFound.has(searchKey) && value !== undefined) {\n\t\t\t\tkeyValueMap.set(searchKey, value);\n\t\t\t}\n\t\t});\n\t\treturn keyValueMap;\n\t}\n\n\t/**\n\t * Ensures object is populated with the given keys. Other keys are ignored. Options keys\n\t * are allowed to be there or not.\n\t *\n\t * @param obj object to check\n\t * @param keys keys in object to retrieve paired with whether they are mandatory or not\n\t * @throws InsightError if a required key is not found\n\t */\n\tpublic static requireHasKeys(obj: object, keys: [string, boolean][]): Map<string, unknown> {\n\t\tconst keyValueMap = new Map<string, unknown>();\n\t\tObject.entries(obj).forEach(([key, value]) => {\n\t\t\tconst matchedSearchKey = keys.find((k) => k[0] === key);\n\t\t\tif (matchedSearchKey !== undefined) {\n\t\t\t\tkeyValueMap.set(key, value);\n\t\t\t}\n\t\t});\n\t\t// Ensure keys which are required have been mapped\n\t\tkeys.forEach((key) => {\n\t\t\tconst [keyString, keyRequired] = key;\n\t\t\tif (keyRequired && !keyValueMap.has(keyString)) {\n\t\t\t\tthrow new InsightError(\"Missing key: \" + keyString);\n\t\t\t}\n\t\t});\n\t\treturn keyValueMap;\n\t}\n\n\t/**\n\t * Checks whether the given num is a number, and throws an error identified with\n\t * section when it is not.\n\t *\n\t * @param section the name of the number\n\t * @param str the variable to test\n\t * @returns num as a number\n\t * @throws InsightError if num is not an number\n\t */\n\tpublic static checkIsNumber(section: string, num: unknown): number {\n\t\tif (typeof num !== \"number\") {\n\t\t\tthrow new InsightError(\"JSON format error: \" + section + \" must be a number, not: \" + typeof num + \".\");\n\t\t}\n\t\treturn num as number;\n\t}\n\n\t/**\n\t * Checks whether the given str is a string, and throws an error identified with\n\t * section when it is not.\n\t *\n\t * @param section the name of the string\n\t * @param str the variable to test\n\t * @returns str as a string\n\t * @throws InsightError if str is not an string\n\t */\n\tpublic static checkIsString(section: string, str: unknown): string {\n\t\tif (typeof str !== \"string\") {\n\t\t\tthrow new InsightError(\"JSON format error: \" + section + \" must be a string, not: \" + typeof str + \".\");\n\t\t}\n\t\treturn str as string;\n\t}\n\n\t/**\n\t * Checks whether the given arr is an array, and throws an error identified with\n\t * section when it is not.\n\t *\n\t * @param section the name of the array\n\t * @param arr the variable to test\n\t * @returns arr as an array\n\t * @throws InsightError if arr is not an array\n\t */\n\tpublic static checkIsArray(section: string, arr: unknown): unknown[] {\n\t\tif (!Array.isArray(arr)) {\n\t\t\tthrow new InsightError(\"JSON format error: \" + section + \" must be an array, not: \" + typeof arr + \".\");\n\t\t}\n\t\treturn arr as unknown[];\n\t}\n\n\t/**\n\t * Checks whether given obj is an object, and throws an error identified with\n\t * section when it is not.\n\t *\n\t * @param section the name of the object\n\t * @param obj the variable to test\n\t * @returns obj as an object\n\t * @throws InsightError if obj is not an object.\n\t */\n\tpublic static checkIsObject(section: string, obj: unknown): object {\n\t\tif (typeof obj !== \"object\" || Array.isArray(obj) || obj === null || obj === undefined) {\n\t\t\tthrow new InsightError(\"JSON format error: \" + section + \" must be an object, not: \" + typeof obj + \", \" + obj);\n\t\t}\n\t\treturn obj as object;\n\t}\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"926e491d81748860d4668ab41a44a66dd256ddb8","contentHash":"1caf491b488d470c8c95d6f20023a45f4cb10c6b46fbfc2e1b840b6d33990dd4"},"/Users/fegicochen/Courses/CPSC 310/C1/project_team085/src/controller/QueryEngine.ts":{"path":"/Users/fegicochen/Courses/CPSC 310/C1/project_team085/src/controller/QueryEngine.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":29}},"2":{"start":{"line":4,"column":18},"end":{"line":4,"column":38}},"3":{"start":{"line":5,"column":17},"end":{"line":5,"column":36}},"4":{"start":{"line":6,"column":25},"end":{"line":6,"column":52}},"5":{"start":{"line":11,"column":8},"end":{"line":11,"column":33}},"6":{"start":{"line":14,"column":22},"end":{"line":14,"column":77}},"7":{"start":{"line":15,"column":30},"end":{"line":18,"column":10}},"8":{"start":{"line":19,"column":8},"end":{"line":19,"column":90}},"9":{"start":{"line":20,"column":25},"end":{"line":20,"column":85}},"10":{"start":{"line":21,"column":32},"end":{"line":21,"column":59}},"11":{"start":{"line":22,"column":8},"end":{"line":22,"column":74}},"12":{"start":{"line":22,"column":42},"end":{"line":22,"column":72}},"13":{"start":{"line":25,"column":23},"end":{"line":25,"column":25}},"14":{"start":{"line":26,"column":8},"end":{"line":29,"column":11}},"15":{"start":{"line":27,"column":33},"end":{"line":27,"column":54}},"16":{"start":{"line":28,"column":12},"end":{"line":28,"column":79}},"17":{"start":{"line":30,"column":8},"end":{"line":30,"column":22}},"18":{"start":{"line":33,"column":8},"end":{"line":49,"column":9}},"19":{"start":{"line":34,"column":26},"end":{"line":34,"column":44}},"20":{"start":{"line":36,"column":12},"end":{"line":44,"column":13}},"21":{"start":{"line":37,"column":16},"end":{"line":37,"column":71}},"22":{"start":{"line":37,"column":39},"end":{"line":37,"column":70}},"23":{"start":{"line":39,"column":17},"end":{"line":44,"column":13}},"24":{"start":{"line":40,"column":16},"end":{"line":40,"column":84}},"25":{"start":{"line":40,"column":39},"end":{"line":40,"column":83}},"26":{"start":{"line":43,"column":16},"end":{"line":43,"column":92}},"27":{"start":{"line":45,"column":12},"end":{"line":45,"column":55}},"28":{"start":{"line":48,"column":12},"end":{"line":48,"column":28}},"29":{"start":{"line":52,"column":24},"end":{"line":52,"column":100}},"30":{"start":{"line":53,"column":33},"end":{"line":56,"column":10}},"31":{"start":{"line":57,"column":53},"end":{"line":57,"column":88}},"32":{"start":{"line":58,"column":30},"end":{"line":58,"column":84}},"33":{"start":{"line":59,"column":8},"end":{"line":62,"column":9}},"34":{"start":{"line":60,"column":42},"end":{"line":60,"column":76}},"35":{"start":{"line":61,"column":12},"end":{"line":61,"column":92}},"36":{"start":{"line":63,"column":8},"end":{"line":67,"column":10}},"37":{"start":{"line":70,"column":30},"end":{"line":70,"column":32}},"38":{"start":{"line":72,"column":24},"end":{"line":72,"column":137}},"39":{"start":{"line":73,"column":8},"end":{"line":86,"column":11}},"40":{"start":{"line":74,"column":27},"end":{"line":74,"column":102}},"41":{"start":{"line":75,"column":30},"end":{"line":75,"column":73}},"42":{"start":{"line":76,"column":12},"end":{"line":78,"column":13}},"43":{"start":{"line":77,"column":16},"end":{"line":77,"column":107}},"44":{"start":{"line":79,"column":12},"end":{"line":84,"column":13}},"45":{"start":{"line":80,"column":16},"end":{"line":80,"column":110}},"46":{"start":{"line":83,"column":16},"end":{"line":83,"column":55}},"47":{"start":{"line":85,"column":12},"end":{"line":85,"column":64}},"48":{"start":{"line":87,"column":8},"end":{"line":89,"column":9}},"49":{"start":{"line":88,"column":12},"end":{"line":88,"column":94}},"50":{"start":{"line":90,"column":8},"end":{"line":90,"column":52}},"51":{"start":{"line":94,"column":8},"end":{"line":106,"column":9}},"52":{"start":{"line":95,"column":26},"end":{"line":95,"column":136}},"53":{"start":{"line":96,"column":29},"end":{"line":96,"column":71}},"54":{"start":{"line":97,"column":12},"end":{"line":105,"column":13}},"55":{"start":{"line":98,"column":16},"end":{"line":98,"column":41}},"56":{"start":{"line":99,"column":16},"end":{"line":101,"column":17}},"57":{"start":{"line":100,"column":20},"end":{"line":100,"column":114}},"58":{"start":{"line":104,"column":16},"end":{"line":104,"column":106}},"59":{"start":{"line":107,"column":8},"end":{"line":107,"column":29}},"60":{"start":{"line":110,"column":24},"end":{"line":110,"column":97}},"61":{"start":{"line":111,"column":8},"end":{"line":113,"column":9}},"62":{"start":{"line":112,"column":12},"end":{"line":112,"column":119}},"63":{"start":{"line":114,"column":23},"end":{"line":114,"column":60}},"64":{"start":{"line":115,"column":31},"end":{"line":115,"column":70}},"65":{"start":{"line":116,"column":25},"end":{"line":116,"column":47}},"66":{"start":{"line":117,"column":8},"end":{"line":119,"column":9}},"67":{"start":{"line":118,"column":12},"end":{"line":118,"column":61}},"68":{"start":{"line":120,"column":8},"end":{"line":120,"column":24}},"69":{"start":{"line":123,"column":21},"end":{"line":123,"column":91}},"70":{"start":{"line":124,"column":27},"end":{"line":132,"column":10}},"71":{"start":{"line":133,"column":8},"end":{"line":135,"column":9}},"72":{"start":{"line":134,"column":12},"end":{"line":134,"column":128}},"73":{"start":{"line":136,"column":23},"end":{"line":136,"column":35}},"74":{"start":{"line":137,"column":8},"end":{"line":137,"column":96}},"75":{"start":{"line":137,"column":44},"end":{"line":137,"column":93}},"76":{"start":{"line":138,"column":8},"end":{"line":138,"column":24}},"77":{"start":{"line":141,"column":8},"end":{"line":171,"column":9}},"78":{"start":{"line":144,"column":30},"end":{"line":144,"column":77}},"79":{"start":{"line":145,"column":33},"end":{"line":145,"column":90}},"80":{"start":{"line":145,"column":53},"end":{"line":145,"column":89}},"81":{"start":{"line":146,"column":16},"end":{"line":148,"column":17}},"82":{"start":{"line":147,"column":20},"end":{"line":147,"column":89}},"83":{"start":{"line":149,"column":16},"end":{"line":149,"column":112}},"84":{"start":{"line":154,"column":47},"end":{"line":154,"column":78}},"85":{"start":{"line":155,"column":31},"end":{"line":155,"column":83}},"86":{"start":{"line":156,"column":16},"end":{"line":160,"column":64}},"87":{"start":{"line":163,"column":16},"end":{"line":163,"column":73}},"88":{"start":{"line":165,"column":47},"end":{"line":165,"column":116}},"89":{"start":{"line":166,"column":31},"end":{"line":166,"column":120}},"90":{"start":{"line":167,"column":16},"end":{"line":167,"column":52}},"91":{"start":{"line":170,"column":16},"end":{"line":170,"column":93}},"92":{"start":{"line":174,"column":24},"end":{"line":174,"column":75}},"93":{"start":{"line":175,"column":28},"end":{"line":175,"column":63}},"94":{"start":{"line":176,"column":8},"end":{"line":178,"column":9}},"95":{"start":{"line":177,"column":12},"end":{"line":177,"column":92}},"96":{"start":{"line":179,"column":20},"end":{"line":179,"column":74}},"97":{"start":{"line":180,"column":25},"end":{"line":180,"column":42}},"98":{"start":{"line":181,"column":8},"end":{"line":183,"column":9}},"99":{"start":{"line":182,"column":12},"end":{"line":182,"column":103}},"100":{"start":{"line":184,"column":8},"end":{"line":186,"column":9}},"101":{"start":{"line":185,"column":12},"end":{"line":185,"column":96}},"102":{"start":{"line":187,"column":8},"end":{"line":201,"column":9}},"103":{"start":{"line":188,"column":12},"end":{"line":190,"column":13}},"104":{"start":{"line":189,"column":16},"end":{"line":189,"column":87}},"105":{"start":{"line":191,"column":12},"end":{"line":191,"column":35}},"106":{"start":{"line":193,"column":13},"end":{"line":201,"column":9}},"107":{"start":{"line":194,"column":12},"end":{"line":196,"column":13}},"108":{"start":{"line":195,"column":16},"end":{"line":195,"column":87}},"109":{"start":{"line":197,"column":12},"end":{"line":197,"column":35}},"110":{"start":{"line":200,"column":12},"end":{"line":200,"column":111}},"111":{"start":{"line":204,"column":0},"end":{"line":204,"column":34}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":10,"column":4},"end":{"line":10,"column":5}},"loc":{"start":{"line":10,"column":26},"end":{"line":12,"column":5}},"line":10},"1":{"name":"(anonymous_1)","decl":{"start":{"line":13,"column":4},"end":{"line":13,"column":5}},"loc":{"start":{"line":13,"column":33},"end":{"line":23,"column":5}},"line":13},"2":{"name":"(anonymous_2)","decl":{"start":{"line":22,"column":35},"end":{"line":22,"column":36}},"loc":{"start":{"line":22,"column":42},"end":{"line":22,"column":72}},"line":22},"3":{"name":"(anonymous_3)","decl":{"start":{"line":24,"column":4},"end":{"line":24,"column":5}},"loc":{"start":{"line":24,"column":36},"end":{"line":31,"column":5}},"line":24},"4":{"name":"(anonymous_4)","decl":{"start":{"line":26,"column":37},"end":{"line":26,"column":38}},"loc":{"start":{"line":26,"column":49},"end":{"line":29,"column":9}},"line":26},"5":{"name":"(anonymous_5)","decl":{"start":{"line":32,"column":4},"end":{"line":32,"column":5}},"loc":{"start":{"line":32,"column":27},"end":{"line":50,"column":5}},"line":32},"6":{"name":"(anonymous_6)","decl":{"start":{"line":37,"column":29},"end":{"line":37,"column":30}},"loc":{"start":{"line":37,"column":39},"end":{"line":37,"column":70}},"line":37},"7":{"name":"(anonymous_7)","decl":{"start":{"line":40,"column":29},"end":{"line":40,"column":30}},"loc":{"start":{"line":40,"column":39},"end":{"line":40,"column":83}},"line":40},"8":{"name":"(anonymous_8)","decl":{"start":{"line":51,"column":4},"end":{"line":51,"column":5}},"loc":{"start":{"line":51,"column":31},"end":{"line":68,"column":5}},"line":51},"9":{"name":"(anonymous_9)","decl":{"start":{"line":60,"column":33},"end":{"line":60,"column":34}},"loc":{"start":{"line":60,"column":42},"end":{"line":60,"column":76}},"line":60},"10":{"name":"(anonymous_10)","decl":{"start":{"line":69,"column":4},"end":{"line":69,"column":5}},"loc":{"start":{"line":69,"column":35},"end":{"line":91,"column":5}},"line":69},"11":{"name":"(anonymous_11)","decl":{"start":{"line":73,"column":24},"end":{"line":73,"column":25}},"loc":{"start":{"line":73,"column":39},"end":{"line":86,"column":9}},"line":73},"12":{"name":"(anonymous_12)","decl":{"start":{"line":92,"column":4},"end":{"line":92,"column":5}},"loc":{"start":{"line":92,"column":54},"end":{"line":108,"column":5}},"line":92},"13":{"name":"(anonymous_13)","decl":{"start":{"line":109,"column":4},"end":{"line":109,"column":5}},"loc":{"start":{"line":109,"column":25},"end":{"line":121,"column":5}},"line":109},"14":{"name":"(anonymous_14)","decl":{"start":{"line":122,"column":4},"end":{"line":122,"column":5}},"loc":{"start":{"line":122,"column":39},"end":{"line":139,"column":5}},"line":122},"15":{"name":"(anonymous_15)","decl":{"start":{"line":137,"column":27},"end":{"line":137,"column":28}},"loc":{"start":{"line":137,"column":44},"end":{"line":137,"column":93}},"line":137},"16":{"name":"(anonymous_16)","decl":{"start":{"line":140,"column":4},"end":{"line":140,"column":5}},"loc":{"start":{"line":140,"column":38},"end":{"line":172,"column":5}},"line":140},"17":{"name":"(anonymous_17)","decl":{"start":{"line":145,"column":43},"end":{"line":145,"column":44}},"loc":{"start":{"line":145,"column":53},"end":{"line":145,"column":89}},"line":145},"18":{"name":"(anonymous_18)","decl":{"start":{"line":173,"column":4},"end":{"line":173,"column":5}},"loc":{"start":{"line":173,"column":40},"end":{"line":202,"column":5}},"line":173}},"branchMap":{"0":{"loc":{"start":{"line":33,"column":8},"end":{"line":49,"column":9}},"type":"if","locations":[{"start":{"line":33,"column":8},"end":{"line":49,"column":9}},{"start":{"line":33,"column":8},"end":{"line":49,"column":9}}],"line":33},"1":{"loc":{"start":{"line":36,"column":12},"end":{"line":44,"column":13}},"type":"if","locations":[{"start":{"line":36,"column":12},"end":{"line":44,"column":13}},{"start":{"line":36,"column":12},"end":{"line":44,"column":13}}],"line":36},"2":{"loc":{"start":{"line":39,"column":17},"end":{"line":44,"column":13}},"type":"if","locations":[{"start":{"line":39,"column":17},"end":{"line":44,"column":13}},{"start":{"line":39,"column":17},"end":{"line":44,"column":13}}],"line":39},"3":{"loc":{"start":{"line":59,"column":8},"end":{"line":62,"column":9}},"type":"if","locations":[{"start":{"line":59,"column":8},"end":{"line":62,"column":9}},{"start":{"line":59,"column":8},"end":{"line":62,"column":9}}],"line":59},"4":{"loc":{"start":{"line":59,"column":12},"end":{"line":60,"column":91}},"type":"binary-expr","locations":[{"start":{"line":59,"column":12},"end":{"line":59,"column":39}},{"start":{"line":60,"column":12},"end":{"line":60,"column":91}}],"line":59},"5":{"loc":{"start":{"line":76,"column":12},"end":{"line":78,"column":13}},"type":"if","locations":[{"start":{"line":76,"column":12},"end":{"line":78,"column":13}},{"start":{"line":76,"column":12},"end":{"line":78,"column":13}}],"line":76},"6":{"loc":{"start":{"line":79,"column":12},"end":{"line":84,"column":13}},"type":"if","locations":[{"start":{"line":79,"column":12},"end":{"line":84,"column":13}},{"start":{"line":79,"column":12},"end":{"line":84,"column":13}}],"line":79},"7":{"loc":{"start":{"line":79,"column":16},"end":{"line":79,"column":91}},"type":"binary-expr","locations":[{"start":{"line":79,"column":16},"end":{"line":79,"column":47}},{"start":{"line":79,"column":51},"end":{"line":79,"column":91}}],"line":79},"8":{"loc":{"start":{"line":87,"column":8},"end":{"line":89,"column":9}},"type":"if","locations":[{"start":{"line":87,"column":8},"end":{"line":89,"column":9}},{"start":{"line":87,"column":8},"end":{"line":89,"column":9}}],"line":87},"9":{"loc":{"start":{"line":94,"column":8},"end":{"line":106,"column":9}},"type":"if","locations":[{"start":{"line":94,"column":8},"end":{"line":106,"column":9}},{"start":{"line":94,"column":8},"end":{"line":106,"column":9}}],"line":94},"10":{"loc":{"start":{"line":94,"column":12},"end":{"line":94,"column":122}},"type":"binary-expr","locations":[{"start":{"line":94,"column":12},"end":{"line":94,"column":58}},{"start":{"line":94,"column":62},"end":{"line":94,"column":122}}],"line":94},"11":{"loc":{"start":{"line":97,"column":12},"end":{"line":105,"column":13}},"type":"if","locations":[{"start":{"line":97,"column":12},"end":{"line":105,"column":13}},{"start":{"line":97,"column":12},"end":{"line":105,"column":13}}],"line":97},"12":{"loc":{"start":{"line":99,"column":16},"end":{"line":101,"column":17}},"type":"if","locations":[{"start":{"line":99,"column":16},"end":{"line":101,"column":17}},{"start":{"line":99,"column":16},"end":{"line":101,"column":17}}],"line":99},"13":{"loc":{"start":{"line":111,"column":8},"end":{"line":113,"column":9}},"type":"if","locations":[{"start":{"line":111,"column":8},"end":{"line":113,"column":9}},{"start":{"line":111,"column":8},"end":{"line":113,"column":9}}],"line":111},"14":{"loc":{"start":{"line":117,"column":8},"end":{"line":119,"column":9}},"type":"if","locations":[{"start":{"line":117,"column":8},"end":{"line":119,"column":9}},{"start":{"line":117,"column":8},"end":{"line":119,"column":9}}],"line":117},"15":{"loc":{"start":{"line":133,"column":8},"end":{"line":135,"column":9}},"type":"if","locations":[{"start":{"line":133,"column":8},"end":{"line":135,"column":9}},{"start":{"line":133,"column":8},"end":{"line":135,"column":9}}],"line":133},"16":{"loc":{"start":{"line":141,"column":8},"end":{"line":171,"column":9}},"type":"switch","locations":[{"start":{"line":142,"column":12},"end":{"line":142,"column":53}},{"start":{"line":143,"column":12},"end":{"line":150,"column":13}},{"start":{"line":151,"column":12},"end":{"line":151,"column":61}},{"start":{"line":152,"column":12},"end":{"line":152,"column":67}},{"start":{"line":153,"column":12},"end":{"line":161,"column":13}},{"start":{"line":162,"column":12},"end":{"line":163,"column":73}},{"start":{"line":164,"column":12},"end":{"line":168,"column":13}},{"start":{"line":169,"column":12},"end":{"line":170,"column":93}}],"line":141},"17":{"loc":{"start":{"line":146,"column":16},"end":{"line":148,"column":17}},"type":"if","locations":[{"start":{"line":146,"column":16},"end":{"line":148,"column":17}},{"start":{"line":146,"column":16},"end":{"line":148,"column":17}}],"line":146},"18":{"loc":{"start":{"line":149,"column":23},"end":{"line":149,"column":111}},"type":"cond-expr","locations":[{"start":{"line":149,"column":69},"end":{"line":149,"column":89}},{"start":{"line":149,"column":92},"end":{"line":149,"column":111}}],"line":149},"19":{"loc":{"start":{"line":156,"column":23},"end":{"line":160,"column":63}},"type":"cond-expr","locations":[{"start":{"line":157,"column":22},"end":{"line":157,"column":54}},{"start":{"line":158,"column":22},"end":{"line":160,"column":63}}],"line":156},"20":{"loc":{"start":{"line":158,"column":22},"end":{"line":160,"column":63}},"type":"cond-expr","locations":[{"start":{"line":159,"column":26},"end":{"line":159,"column":60}},{"start":{"line":160,"column":26},"end":{"line":160,"column":63}}],"line":158},"21":{"loc":{"start":{"line":176,"column":8},"end":{"line":178,"column":9}},"type":"if","locations":[{"start":{"line":176,"column":8},"end":{"line":178,"column":9}},{"start":{"line":176,"column":8},"end":{"line":178,"column":9}}],"line":176},"22":{"loc":{"start":{"line":181,"column":8},"end":{"line":183,"column":9}},"type":"if","locations":[{"start":{"line":181,"column":8},"end":{"line":183,"column":9}},{"start":{"line":181,"column":8},"end":{"line":183,"column":9}}],"line":181},"23":{"loc":{"start":{"line":184,"column":8},"end":{"line":186,"column":9}},"type":"if","locations":[{"start":{"line":184,"column":8},"end":{"line":186,"column":9}},{"start":{"line":184,"column":8},"end":{"line":186,"column":9}}],"line":184},"24":{"loc":{"start":{"line":187,"column":8},"end":{"line":201,"column":9}},"type":"if","locations":[{"start":{"line":187,"column":8},"end":{"line":201,"column":9}},{"start":{"line":187,"column":8},"end":{"line":201,"column":9}}],"line":187},"25":{"loc":{"start":{"line":188,"column":12},"end":{"line":190,"column":13}},"type":"if","locations":[{"start":{"line":188,"column":12},"end":{"line":190,"column":13}},{"start":{"line":188,"column":12},"end":{"line":190,"column":13}}],"line":188},"26":{"loc":{"start":{"line":193,"column":13},"end":{"line":201,"column":9}},"type":"if","locations":[{"start":{"line":193,"column":13},"end":{"line":201,"column":9}},{"start":{"line":193,"column":13},"end":{"line":201,"column":9}}],"line":193},"27":{"loc":{"start":{"line":194,"column":12},"end":{"line":196,"column":13}},"type":"if","locations":[{"start":{"line":194,"column":12},"end":{"line":196,"column":13}},{"start":{"line":194,"column":12},"end":{"line":196,"column":13}}],"line":194}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":73,"6":73,"7":71,"8":66,"9":57,"10":24,"11":24,"12":5292,"13":5292,"14":5292,"15":27190,"16":27190,"17":5292,"18":24,"19":17,"20":17,"21":17,"22":18946,"23":0,"24":0,"25":0,"26":0,"27":17,"28":7,"29":66,"30":66,"31":64,"32":61,"33":60,"34":153,"35":3,"36":57,"37":64,"38":64,"39":63,"40":317,"41":317,"42":317,"43":1,"44":316,"45":0,"46":316,"47":316,"48":62,"49":1,"50":61,"51":61,"52":52,"53":52,"54":52,"55":51,"56":51,"57":0,"58":1,"59":60,"60":57,"61":57,"62":1,"63":56,"64":56,"65":29,"66":24,"67":0,"68":24,"69":245,"70":244,"71":243,"72":1,"73":242,"74":242,"75":241,"76":178,"77":241,"78":77,"79":76,"80":171,"81":39,"82":1,"83":38,"84":91,"85":79,"86":72,"87":18,"88":55,"89":53,"90":52,"91":0,"92":146,"93":146,"94":146,"95":4,"96":142,"97":142,"98":142,"99":4,"100":138,"101":1,"102":137,"103":80,"104":1,"105":79,"106":57,"107":57,"108":4,"109":53,"110":0,"111":1},"f":{"0":73,"1":73,"2":5292,"3":5292,"4":27190,"5":24,"6":18946,"7":0,"8":66,"9":153,"10":64,"11":317,"12":61,"13":57,"14":245,"15":241,"16":241,"17":171,"18":146},"b":{"0":[17,7],"1":[17,0],"2":[0,0],"3":[3,57],"4":[60,51],"5":[1,316],"6":[0,316],"7":[316,254],"8":[1,61],"9":[52,9],"10":[61,52],"11":[51,1],"12":[0,51],"13":[1,56],"14":[0,24],"15":[1,242],"16":[56,77,20,61,91,18,55,0],"17":[1,38],"18":[31,7],"19":[14,58],"20":[25,33],"21":[4,142],"22":[4,138],"23":[1,137],"24":[80,57],"25":[1,79],"26":[57,0],"27":[4,53]},"inputSourceMap":{"version":3,"file":"/Users/fegicochen/Courses/CPSC 310/C1/project_team085/src/controller/QueryEngine.ts","sources":["/Users/fegicochen/Courses/CPSC 310/C1/project_team085/src/controller/QueryEngine.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n\tSection,\n\tDatasetsProvider,\n\tDatasetUtils,\n\tInsightFacadeKey,\n\tKeywords,\n\tOptionsState,\n\tmaxResults,\n} from \"./Dataset\";\nimport { FilterBySection, FilterOperation, FilterStrategy } from \"./Filter\";\nimport { InsightError, InsightResult, ResultTooLargeError } from \"./IInsightFacade\";\n\nexport class QueryEngine {\n\tprivate readonly datasets: DatasetsProvider;\n\tprivate options?: OptionsState;\n\n\tconstructor(datasets: DatasetsProvider) {\n\t\tthis.datasets = datasets;\n\t}\n\n\t/**\n\t *\n\t * @param query The query object in accordance with IInsightFacade.performQuery\n\t * @throws InsightError if query is improprly formed\n\t */\n\tpublic async processQuery(queryRaw: unknown): Promise<InsightResult[]> {\n\t\t// Ensure query is obect and update type\n\t\tconst query = DatasetUtils.checkIsObject(\"Query\", queryRaw);\n\n\t\t// Ensure only keys are body and options\n\t\tconst rootStructure = DatasetUtils.requireExactKeys(query, [\n\t\t\t[Keywords.Options, true],\n\t\t\t[Keywords.Body, true],\n\t\t]);\n\n\t\t// Split into processing body and options\n\t\tthis.options = this.processOptions(rootStructure.get(Keywords.Options));\n\t\tconst sections = this.processBody(rootStructure.get(Keywords.Body));\n\n\t\t// Sort results if required\n\t\tconst sectionsOrdered = this.orderResults(sections);\n\n\t\t// Return only data requested\n\t\treturn sectionsOrdered.map((s) => this.sectionToInsightResult(s));\n\t}\n\n\t/**\n\t *\n\t * @param section the section to convert\n\t * @returns an InsightResult with only the columns selected and dataset id appended to entries\n\t */\n\tprivate sectionToInsightResult(section: Section): InsightResult {\n\t\tconst result: InsightResult = {};\n\t\tthis.options!!.columns.forEach((column) => {\n\t\t\tconst sectionValue = section[column.field];\n\t\t\tresult[this.options!!.datasetId + \"_\" + column.field] = sectionValue;\n\t\t});\n\t\treturn result;\n\t}\n\n\t/**\n\t *\n\t * @param sections the sections to order\n\t * @returns an ordered list of sections based on this.options ordering\n\t */\n\tprivate orderResults(sections: Section[]): Section[] {\n\t\t// Sort result data\n\t\tif (this.options!!.order !== undefined) {\n\t\t\tconst order = this.options!!.order!!;\n\t\t\tlet comparator: (a: Section, b: Section) => number;\n\t\t\tif (DatasetUtils.isMKey(order.field)) {\n\t\t\t\tcomparator = (a, b): number => (a[order.field] as number) - (b[order.field] as number);\n\t\t\t} else if (DatasetUtils.isSKey(order.field)) {\n\t\t\t\tcomparator = (a, b): number => (a[order.field] as string).localeCompare(b[order.field] as string);\n\t\t\t} else {\n\t\t\t\tthrow new InsightError(\"Invalid key type! \" + order.field);\n\t\t\t}\n\t\t\treturn sections.reverse().sort(comparator);\n\t\t} else {\n\t\t\treturn sections;\n\t\t}\n\t}\n\n\t/**\n\t * @param query query object to take body from.\n\t * @throws InsightError if options are malformed.\n\t */\n\tprivate processOptions(optionsRaw: unknown): OptionsState {\n\t\t// Retrieve options and ensure it is JSON\n\t\tconst options = DatasetUtils.checkIsObject(Keywords.Options, optionsRaw);\n\n\t\t// Break down by property name\n\t\tconst optionsStructure = DatasetUtils.requireExactKeys(options, [\n\t\t\t[Keywords.Columns, true],\n\t\t\t[Keywords.Order, false],\n\t\t]);\n\n\t\tconst [columnsForState, datasetIdForState] = this.parseColumns(optionsStructure);\n\t\tconst orderForState = this.processOrder(optionsStructure, datasetIdForState);\n\t\t// Ensure order field is selected in columns\n\t\tif (\n\t\t\torderForState !== undefined &&\n\t\t\tcolumnsForState.find((col) => col.field === orderForState?.field) === undefined\n\t\t) {\n\t\t\tthrow new InsightError(\"Order field not selected in columns.\");\n\t\t}\n\n\t\treturn {\n\t\t\tcolumns: columnsForState,\n\t\t\torder: orderForState,\n\t\t\tdatasetId: datasetIdForState,\n\t\t};\n\t}\n\n\t/**\n\t *\n\t * @param optionsStructure the parsed key-value structure of data in the options field\n\t * @returns parsed columns as InsightFacadeKeys and the dataset id used in the query\n\t */\n\tprivate parseColumns(optionsStructure: Map<string, unknown>): [InsightFacadeKey[], string] {\n\t\tlet columnsForState: InsightFacadeKey[] = [];\n\t\tlet datasetIdForState: string | undefined;\n\n\t\t// Process columns key list\n\t\tconst columns = DatasetUtils.checkIsArray(Keywords.Columns, optionsStructure.get(Keywords.Columns));\n\t\tcolumns.forEach((columnRaw) => {\n\t\t\t// Ensure column key has proper formatting\n\t\t\tconst column = DatasetUtils.checkIsString(Keywords.Columns, columnRaw);\n\t\t\tconst columnKey = DatasetUtils.parseMOrSKey(column);\n\t\t\tif (columnKey === undefined) {\n\t\t\t\tthrow new InsightError(\"Improper column key formatting: \" + column + \".\");\n\t\t\t}\n\t\t\t// Ensure multiple datasets not used in column keys\n\t\t\tif (datasetIdForState !== undefined && datasetIdForState !== columnKey.idstring) {\n\t\t\t\tthrow new InsightError(\"Multiple datasets used in query. Only one allowed.\");\n\t\t\t} else {\n\t\t\t\tdatasetIdForState = columnKey.idstring;\n\t\t\t}\n\t\t\tcolumnsForState = columnsForState.concat(columnKey);\n\t\t});\n\n\t\t// Query must have columns selected\n\t\tif (datasetIdForState === undefined) {\n\t\t\tthrow new InsightError(\"Query must select at least one column.\");\n\t\t}\n\n\t\treturn [columnsForState, datasetIdForState];\n\t}\n\n\t/**\n\t *\n\t * @param optionsStructure the parsed key-value structure of data in the options field\n\t * @returns an order if present, otherwise undefined\n\t */\n\tprivate processOrder(\n\t\toptionsStructure: Map<string, unknown>,\n\t\tdatasetIdForState: string\n\t): InsightFacadeKey | undefined {\n\t\tlet orderForState: InsightFacadeKey | undefined;\n\t\tif (optionsStructure.has(Keywords.Order) && optionsStructure.get(Keywords.Order) !== undefined) {\n\t\t\tconst order = DatasetUtils.checkIsString(Keywords.Order, optionsStructure.get(Keywords.Order));\n\t\t\tconst orderKey = DatasetUtils.parseMOrSKey(order);\n\t\t\tif (orderKey !== undefined) {\n\t\t\t\torderForState = orderKey;\n\t\t\t\tif (orderKey.idstring !== datasetIdForState) {\n\t\t\t\t\tthrow new InsightError(\"Mutliple datasets used in query. Only one allowed.\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthrow new InsightError(\"Order is not a valid ID string: \" + order + \".\");\n\t\t\t}\n\t\t}\n\t\treturn orderForState;\n\t}\n\n\t/**\n\t *\n\t * @param query query object to take body from.\n\t * @param options the options state computed\n\t * @throws InsightError if body is malformed.\n\t */\n\tprivate processBody(bodyRaw: unknown): Section[] {\n\t\t// Find dataset\n\t\tconst dataset = DatasetUtils.findDataset(this.datasets, this.options!!.datasetId);\n\t\tif (dataset === undefined) {\n\t\t\tthrow new InsightError(\"Could not find dataset with id: \" + this.options!!.datasetId + \".\");\n\t\t}\n\n\t\t// Create filter object\n\t\tconst filter = new FilterBySection(dataset);\n\n\t\t// Start constructing filter function\n\t\tconst filterFunction = this.checkSingleFilter(filter, bodyRaw);\n\n\t\t// Execute filter function\n\t\tconst sections = filterFunction.apply();\n\n\t\tif (sections.length > maxResults) {\n\t\t\tthrow new ResultTooLargeError();\n\t\t}\n\n\t\treturn sections;\n\t}\n\n\t/**\n\t * Takes a section of the body and checks that a single filter is correctly applied within it.\n\t *\n\t * @param filter the filter object used\n\t * @param bodyRaw the raw body to check\n\t * @returns A filter operation representing the given body and filter\n\t * @throws InsightError if bodyRaw is improperly formatted\n\t */\n\tprivate checkSingleFilter(filter: FilterStrategy<any>, bodyRaw: unknown): FilterOperation {\n\t\t// Retrieve body and ensure it is JSON\n\t\tconst body = DatasetUtils.checkIsObject(Keywords.Body, bodyRaw);\n\n\t\t// Break do:wn by property name\n\t\tconst mappedKeys = DatasetUtils.requireExactKeys(body, [\n\t\t\t[Keywords.Filter.Logic.And, false],\n\t\t\t[Keywords.Filter.Logic.Or, false],\n\t\t\t[Keywords.Filter.MComparator.Equal, false],\n\t\t\t[Keywords.Filter.MComparator.GreaterThan, false],\n\t\t\t[Keywords.Filter.MComparator.LessThan, false],\n\t\t\t[Keywords.Filter.Negation.Not, false],\n\t\t\t[Keywords.Filter.SComparator.Is, false],\n\t\t]);\n\n\t\t// Only one root filter can be applied\n\t\tif (mappedKeys.size > 1) {\n\t\t\tthrow new InsightError(\"Can only have 1 filter applied here: \" + JSON.stringify(mappedKeys) + \".\");\n\t\t}\n\n\t\t// Base case filter: return everything\n\t\tlet filterOp = filter.all();\n\n\t\t// This will run 1 or 0 times\n\t\tmappedKeys.forEach((value, key) => (filterOp = this.processFilter(filter, key, value)));\n\n\t\treturn filterOp;\n\t}\n\n\t/**\n\t *\n\t * @param filter the filter object used\n\t * @param key the filter key to check\n\t * @param value the value of the filter key in the query object\n\t * @returns A filter operation for the given key and children\n\t * @throws InsightError if the provided key could not be processed correctly\n\t */\n\tprivate processFilter(filter: FilterStrategy<any>, key: string, value: unknown): FilterOperation {\n\t\tswitch (key) {\n\t\t\tcase Keywords.Filter.Logic.And:\n\t\t\tcase Keywords.Filter.Logic.Or: {\n\t\t\t\tconst array = DatasetUtils.checkIsArray(key, value);\n\t\t\t\tconst children = array.map((elem) => this.checkSingleFilter(filter, elem));\n\t\t\t\tif (children.length === 0) {\n\t\t\t\t\tthrow new InsightError(key + \" must have children\");\n\t\t\t\t}\n\t\t\t\treturn key === Keywords.Filter.Logic.And ? filter.and(children) : filter.or(children);\n\t\t\t}\n\t\t\tcase Keywords.Filter.MComparator.Equal:\n\t\t\tcase Keywords.Filter.MComparator.GreaterThan:\n\t\t\tcase Keywords.Filter.MComparator.LessThan: {\n\t\t\t\tconst [columnKey, filterVal] = this.checkKey(key, value, true);\n\t\t\t\tconst valNum = DatasetUtils.checkIsNumber(key, filterVal);\n\t\t\t\treturn key === Keywords.Filter.MComparator.Equal\n\t\t\t\t\t? filter.equals(valNum, columnKey)\n\t\t\t\t\t: key === Keywords.Filter.MComparator.LessThan\n\t\t\t\t\t? filter.lessThan(valNum, columnKey)\n\t\t\t\t\t: filter.greaterThan(valNum, columnKey);\n\t\t\t}\n\t\t\tcase Keywords.Filter.Negation.Not:\n\t\t\t\treturn filter.not(this.checkSingleFilter(filter, value));\n\t\t\tcase Keywords.Filter.SComparator.Is: {\n\t\t\t\tconst [columnKey, filterVal] = this.checkKey(Keywords.Filter.SComparator.Is, value, false);\n\t\t\t\tconst valStr = DatasetUtils.checkIsString(Keywords.Filter.SComparator.Is, filterVal);\n\t\t\t\treturn filter.is(valStr, columnKey);\n\t\t\t}\n\t\t\tdefault:\n\t\t\t\tthrow new InsightError(\"Filter key not recognized: \" + key);\n\t\t}\n\t}\n\n\t/**\n\t *\n\t * @param type the key type checking under (ie. Keywords.Filter.MComparator.Equal)\n\t * @param bodyRaw the raw body under this key (ie. { \"key\": \"value\" })\n\t * @param mkeyOrSKey true if mkey false if skey\n\t * @returns a tuple of the parsed key and value\n\t */\n\tprivate checkKey(type: string, bodyRaw: unknown, mkeyOrSKey: boolean): [InsightFacadeKey, unknown] {\n\t\t// Ensure child is an object\n\t\tconst keyBody = DatasetUtils.checkIsObject(type, bodyRaw);\n\t\t// Ensure body has a single key value pair\n\t\tconst bodyEntries = Array.from(Object.entries(keyBody));\n\t\tif (bodyEntries.length !== 1) {\n\t\t\tthrow new InsightError(\"Expected one entry in an mkey field.\");\n\t\t}\n\n\t\t// Check that entry has properly formatted key and value\n\t\tconst key = DatasetUtils.parseMOrSKey(bodyEntries[0][0]);\n\t\tconst keyValue = bodyEntries[0][1];\n\n\t\tif (key === undefined) {\n\t\t\tthrow new InsightError(\"Improper structure of key: \" + bodyEntries[0][0]);\n\t\t}\n\n\t\t// Check for multi datasets used\n\t\tif (this.options!!.datasetId !== key.idstring) {\n\t\t\tthrow new InsightError(\"Only one dataset can be used in a query.\");\n\t\t}\n\n\t\tif (DatasetUtils.isMKey(key)) {\n\t\t\tif (!mkeyOrSKey) {\n\t\t\t\tthrow new InsightError(\"Expected mkey but got skey.\");\n\t\t\t}\n\t\t\treturn [key, keyValue];\n\t\t} else if (DatasetUtils.isSKey(key)) {\n\t\t\tif (mkeyOrSKey) {\n\t\t\t\tthrow new InsightError(\"Expected skey but got mkey.\");\n\t\t\t}\n\t\t\treturn [key, keyValue];\n\t\t} else {\n\t\t\tthrow new InsightError(\"Unexpected key type: \" + type + \", \" + bodyEntries[0][0]);\n\t\t}\n\t}\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"327de76ccc2e13d3d8ad8d090722ef21e5cea65a","contentHash":"87bc3430f362c6478b5799c1c737a450f0fb16522899207ac88067a0dbbdc24d"},"/Users/fegicochen/Courses/CPSC 310/C1/project_team085/src/controller/Filter.ts":{"path":"/Users/fegicochen/Courses/CPSC 310/C1/project_team085/src/controller/Filter.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":33}},"2":{"start":{"line":4,"column":18},"end":{"line":4,"column":38}},"3":{"start":{"line":5,"column":25},"end":{"line":5,"column":52}},"4":{"start":{"line":7,"column":0},"end":{"line":16,"column":36}},"5":{"start":{"line":8,"column":4},"end":{"line":8,"column":46}},"6":{"start":{"line":9,"column":4},"end":{"line":9,"column":44}},"7":{"start":{"line":10,"column":4},"end":{"line":10,"column":56}},"8":{"start":{"line":11,"column":4},"end":{"line":11,"column":62}},"9":{"start":{"line":12,"column":4},"end":{"line":12,"column":52}},"10":{"start":{"line":13,"column":4},"end":{"line":13,"column":44}},"11":{"start":{"line":14,"column":4},"end":{"line":14,"column":46}},"12":{"start":{"line":15,"column":4},"end":{"line":15,"column":46}},"13":{"start":{"line":25,"column":8},"end":{"line":25,"column":32}},"14":{"start":{"line":26,"column":8},"end":{"line":26,"column":38}},"15":{"start":{"line":27,"column":8},"end":{"line":27,"column":40}},"16":{"start":{"line":28,"column":8},"end":{"line":28,"column":30}},"17":{"start":{"line":29,"column":8},"end":{"line":29,"column":30}},"18":{"start":{"line":30,"column":8},"end":{"line":30,"column":30}},"19":{"start":{"line":33,"column":25},"end":{"line":33,"column":27}},"20":{"start":{"line":34,"column":8},"end":{"line":41,"column":9}},"21":{"start":{"line":35,"column":12},"end":{"line":37,"column":13}},"22":{"start":{"line":36,"column":16},"end":{"line":36,"column":65}},"23":{"start":{"line":38,"column":12},"end":{"line":40,"column":13}},"24":{"start":{"line":39,"column":16},"end":{"line":39,"column":39}},"25":{"start":{"line":42,"column":8},"end":{"line":42,"column":24}},"26":{"start":{"line":45,"column":8},"end":{"line":74,"column":9}},"27":{"start":{"line":47,"column":16},"end":{"line":47,"column":28}},"28":{"start":{"line":49,"column":16},"end":{"line":49,"column":70}},"29":{"start":{"line":51,"column":16},"end":{"line":51,"column":94}},"30":{"start":{"line":53,"column":16},"end":{"line":53,"column":68}},"31":{"start":{"line":55,"column":16},"end":{"line":55,"column":68}},"32":{"start":{"line":57,"column":16},"end":{"line":57,"column":66}},"33":{"start":{"line":59,"column":16},"end":{"line":63,"column":17}},"34":{"start":{"line":60,"column":20},"end":{"line":62,"column":21}},"35":{"start":{"line":61,"column":24},"end":{"line":61,"column":37}},"36":{"start":{"line":64,"column":16},"end":{"line":64,"column":28}},"37":{"start":{"line":66,"column":16},"end":{"line":70,"column":17}},"38":{"start":{"line":67,"column":20},"end":{"line":69,"column":21}},"39":{"start":{"line":68,"column":24},"end":{"line":68,"column":36}},"40":{"start":{"line":71,"column":16},"end":{"line":71,"column":29}},"41":{"start":{"line":73,"column":16},"end":{"line":73,"column":101}},"42":{"start":{"line":77,"column":8},"end":{"line":79,"column":9}},"43":{"start":{"line":78,"column":12},"end":{"line":78,"column":37}},"44":{"start":{"line":80,"column":23},"end":{"line":80,"column":48}},"45":{"start":{"line":81,"column":21},"end":{"line":81,"column":44}},"46":{"start":{"line":82,"column":33},"end":{"line":82,"column":73}},"47":{"start":{"line":83,"column":31},"end":{"line":83,"column":75}},"48":{"start":{"line":84,"column":40},"end":{"line":84,"column":114}},"49":{"start":{"line":85,"column":8},"end":{"line":87,"column":9}},"50":{"start":{"line":86,"column":12},"end":{"line":86,"column":101}},"51":{"start":{"line":88,"column":8},"end":{"line":102,"column":9}},"52":{"start":{"line":89,"column":12},"end":{"line":89,"column":64}},"53":{"start":{"line":91,"column":13},"end":{"line":102,"column":9}},"54":{"start":{"line":92,"column":12},"end":{"line":92,"column":57}},"55":{"start":{"line":94,"column":13},"end":{"line":102,"column":9}},"56":{"start":{"line":95,"column":12},"end":{"line":95,"column":57}},"57":{"start":{"line":97,"column":13},"end":{"line":102,"column":9}},"58":{"start":{"line":98,"column":12},"end":{"line":98,"column":101}},"59":{"start":{"line":101,"column":12},"end":{"line":101,"column":44}},"60":{"start":{"line":108,"column":8},"end":{"line":108,"column":31}},"61":{"start":{"line":111,"column":8},"end":{"line":115,"column":11}},"62":{"start":{"line":118,"column":8},"end":{"line":122,"column":11}},"63":{"start":{"line":125,"column":8},"end":{"line":130,"column":11}},"64":{"start":{"line":133,"column":8},"end":{"line":138,"column":11}},"65":{"start":{"line":141,"column":8},"end":{"line":146,"column":11}},"66":{"start":{"line":149,"column":8},"end":{"line":154,"column":11}},"67":{"start":{"line":157,"column":8},"end":{"line":161,"column":11}},"68":{"start":{"line":164,"column":8},"end":{"line":167,"column":11}},"69":{"start":{"line":170,"column":0},"end":{"line":170,"column":42}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":7,"column":1},"end":{"line":7,"column":2}},"loc":{"start":{"line":7,"column":23},"end":{"line":16,"column":1}},"line":7},"1":{"name":"(anonymous_1)","decl":{"start":{"line":24,"column":4},"end":{"line":24,"column":5}},"loc":{"start":{"line":24,"column":24},"end":{"line":31,"column":5}},"line":24},"2":{"name":"(anonymous_2)","decl":{"start":{"line":32,"column":4},"end":{"line":32,"column":5}},"loc":{"start":{"line":32,"column":12},"end":{"line":43,"column":5}},"line":32},"3":{"name":"(anonymous_3)","decl":{"start":{"line":44,"column":4},"end":{"line":44,"column":5}},"loc":{"start":{"line":44,"column":36},"end":{"line":75,"column":5}},"line":44},"4":{"name":"(anonymous_4)","decl":{"start":{"line":76,"column":4},"end":{"line":76,"column":5}},"loc":{"start":{"line":76,"column":55},"end":{"line":103,"column":5}},"line":76},"5":{"name":"(anonymous_5)","decl":{"start":{"line":107,"column":4},"end":{"line":107,"column":5}},"loc":{"start":{"line":107,"column":25},"end":{"line":109,"column":5}},"line":107},"6":{"name":"(anonymous_6)","decl":{"start":{"line":110,"column":4},"end":{"line":110,"column":5}},"loc":{"start":{"line":110,"column":17},"end":{"line":116,"column":5}},"line":110},"7":{"name":"(anonymous_7)","decl":{"start":{"line":117,"column":4},"end":{"line":117,"column":5}},"loc":{"start":{"line":117,"column":18},"end":{"line":123,"column":5}},"line":117},"8":{"name":"(anonymous_8)","decl":{"start":{"line":124,"column":4},"end":{"line":124,"column":5}},"loc":{"start":{"line":124,"column":26},"end":{"line":131,"column":5}},"line":124},"9":{"name":"(anonymous_9)","decl":{"start":{"line":132,"column":4},"end":{"line":132,"column":5}},"loc":{"start":{"line":132,"column":29},"end":{"line":139,"column":5}},"line":132},"10":{"name":"(anonymous_10)","decl":{"start":{"line":140,"column":4},"end":{"line":140,"column":5}},"loc":{"start":{"line":140,"column":24},"end":{"line":147,"column":5}},"line":140},"11":{"name":"(anonymous_11)","decl":{"start":{"line":148,"column":4},"end":{"line":148,"column":5}},"loc":{"start":{"line":148,"column":22},"end":{"line":155,"column":5}},"line":148},"12":{"name":"(anonymous_12)","decl":{"start":{"line":156,"column":4},"end":{"line":156,"column":5}},"loc":{"start":{"line":156,"column":15},"end":{"line":162,"column":5}},"line":156},"13":{"name":"(anonymous_13)","decl":{"start":{"line":163,"column":4},"end":{"line":163,"column":5}},"loc":{"start":{"line":163,"column":10},"end":{"line":168,"column":5}},"line":163}},"branchMap":{"0":{"loc":{"start":{"line":16,"column":3},"end":{"line":16,"column":34}},"type":"binary-expr","locations":[{"start":{"line":16,"column":3},"end":{"line":16,"column":13}},{"start":{"line":16,"column":18},"end":{"line":16,"column":33}}],"line":16},"1":{"loc":{"start":{"line":35,"column":12},"end":{"line":37,"column":13}},"type":"if","locations":[{"start":{"line":35,"column":12},"end":{"line":37,"column":13}},{"start":{"line":35,"column":12},"end":{"line":37,"column":13}}],"line":35},"2":{"loc":{"start":{"line":38,"column":12},"end":{"line":40,"column":13}},"type":"if","locations":[{"start":{"line":38,"column":12},"end":{"line":40,"column":13}},{"start":{"line":38,"column":12},"end":{"line":40,"column":13}}],"line":38},"3":{"loc":{"start":{"line":45,"column":8},"end":{"line":74,"column":9}},"type":"switch","locations":[{"start":{"line":46,"column":12},"end":{"line":47,"column":28}},{"start":{"line":48,"column":12},"end":{"line":49,"column":70}},{"start":{"line":50,"column":12},"end":{"line":51,"column":94}},{"start":{"line":52,"column":12},"end":{"line":53,"column":68}},{"start":{"line":54,"column":12},"end":{"line":55,"column":68}},{"start":{"line":56,"column":12},"end":{"line":57,"column":66}},{"start":{"line":58,"column":12},"end":{"line":64,"column":28}},{"start":{"line":65,"column":12},"end":{"line":71,"column":29}},{"start":{"line":72,"column":12},"end":{"line":73,"column":101}}],"line":45},"4":{"loc":{"start":{"line":60,"column":20},"end":{"line":62,"column":21}},"type":"if","locations":[{"start":{"line":60,"column":20},"end":{"line":62,"column":21}},{"start":{"line":60,"column":20},"end":{"line":62,"column":21}}],"line":60},"5":{"loc":{"start":{"line":67,"column":20},"end":{"line":69,"column":21}},"type":"if","locations":[{"start":{"line":67,"column":20},"end":{"line":69,"column":21}},{"start":{"line":67,"column":20},"end":{"line":69,"column":21}}],"line":67},"6":{"loc":{"start":{"line":77,"column":8},"end":{"line":79,"column":9}},"type":"if","locations":[{"start":{"line":77,"column":8},"end":{"line":79,"column":9}},{"start":{"line":77,"column":8},"end":{"line":79,"column":9}}],"line":77},"7":{"loc":{"start":{"line":84,"column":40},"end":{"line":84,"column":114}},"type":"cond-expr","locations":[{"start":{"line":84,"column":65},"end":{"line":84,"column":67}},{"start":{"line":84,"column":70},"end":{"line":84,"column":114}}],"line":84},"8":{"loc":{"start":{"line":85,"column":8},"end":{"line":87,"column":9}},"type":"if","locations":[{"start":{"line":85,"column":8},"end":{"line":87,"column":9}},{"start":{"line":85,"column":8},"end":{"line":87,"column":9}}],"line":85},"9":{"loc":{"start":{"line":88,"column":8},"end":{"line":102,"column":9}},"type":"if","locations":[{"start":{"line":88,"column":8},"end":{"line":102,"column":9}},{"start":{"line":88,"column":8},"end":{"line":102,"column":9}}],"line":88},"10":{"loc":{"start":{"line":88,"column":12},"end":{"line":88,"column":26}},"type":"binary-expr","locations":[{"start":{"line":88,"column":12},"end":{"line":88,"column":18}},{"start":{"line":88,"column":22},"end":{"line":88,"column":26}}],"line":88},"11":{"loc":{"start":{"line":91,"column":13},"end":{"line":102,"column":9}},"type":"if","locations":[{"start":{"line":91,"column":13},"end":{"line":102,"column":9}},{"start":{"line":91,"column":13},"end":{"line":102,"column":9}}],"line":91},"12":{"loc":{"start":{"line":94,"column":13},"end":{"line":102,"column":9}},"type":"if","locations":[{"start":{"line":94,"column":13},"end":{"line":102,"column":9}},{"start":{"line":94,"column":13},"end":{"line":102,"column":9}}],"line":94},"13":{"loc":{"start":{"line":97,"column":13},"end":{"line":102,"column":9}},"type":"if","locations":[{"start":{"line":97,"column":13},"end":{"line":102,"column":9}},{"start":{"line":97,"column":13},"end":{"line":102,"column":9}}],"line":97}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":419,"14":419,"15":419,"16":419,"17":419,"18":419,"19":29,"20":29,"21":1586301,"22":3,"23":1586298,"24":20295,"25":24,"26":3687773,"27":5001,"28":412832,"29":635008,"30":876416,"31":165164,"32":134688,"33":1174603,"34":1329894,"35":1170521,"36":4080,"37":284061,"38":636893,"39":7323,"40":276737,"41":0,"42":635008,"43":6,"44":635002,"45":635002,"46":635002,"47":635002,"48":635002,"49":635002,"50":2,"51":635000,"52":70075,"53":564925,"54":64612,"55":500313,"56":0,"57":500313,"58":0,"59":500313,"60":56,"61":7,"62":31,"63":25,"64":33,"65":14,"66":52,"67":15,"68":242,"69":1},"f":{"0":1,"1":419,"2":29,"3":3687773,"4":635008,"5":56,"6":7,"7":31,"8":25,"9":33,"10":14,"11":52,"12":15,"13":242},"b":{"0":[1,1],"1":[3,1586298],"2":[20295,1566001],"3":[5001,412832,635008,876416,165164,134688,1174603,284061,0],"4":[1170521,159371],"5":[7323,629569],"6":[6,635002],"7":[5001,630001],"8":[2,635000],"9":[70075,564925],"10":[635000,134687],"11":[64612,500313],"12":[0,500313],"13":[0,500313]},"inputSourceMap":{"version":3,"file":"/Users/fegicochen/Courses/CPSC 310/C1/project_team085/src/controller/Filter.ts","sources":["/Users/fegicochen/Courses/CPSC 310/C1/project_team085/src/controller/Filter.ts"],"names":[],"mappings":"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","sourcesContent":["import { Dataset, InsightFacadeKey, maxResults, Section } from \"./Dataset\";\nimport { InsightError, ResultTooLargeError } from \"./IInsightFacade\";\n\nenum FilterName {\n\tAnd,\n\tOr,\n\tLessThan,\n\tGreaterThan,\n\tEquals,\n\tIs,\n\tNot,\n\tAll,\n}\n\nexport interface FilterOperation {\n\tname: FilterName;\n\tapply: () => Section[];\n}\n\nexport interface FilterStrategy<FO extends FilterOperation> {\n\tor(children: FO[]): FO;\n\tand(children: FO[]): FO;\n\tlessThan(limit: number, mkey: InsightFacadeKey): FO;\n\tgreaterThan(limit: number, mkey: InsightFacadeKey): FO;\n\tequals(limit: number, mkey: InsightFacadeKey): FO;\n\tis(compare: string, skey: InsightFacadeKey): FO;\n\tnot(child: FO): FO;\n\tall(): FO;\n}\n\nclass FilterOperationBySection implements FilterOperation {\n\tprivate readonly dataset: Dataset;\n\tpublic readonly name: FilterName;\n\tprivate readonly children?: FilterOperationBySection[];\n\tprivate readonly num?: number;\n\tprivate readonly str?: string;\n\tprivate readonly key?: InsightFacadeKey;\n\n\t/**\n\t *\n\t * @param dataset the dataset to use for this query\n\t * @param name the name of the filter\n\t * @param children children if this filter has children (AND, OR)\n\t * @param num a number argument if this filter has one (EQ, LT, GT)\n\t * @param str a string argument if this filter has one (IS)\n\t * @param key a key argument if this filter has one (EQ, LT, GT, IS)\n\t */\n\tconstructor(params: {\n\t\tdataset: Dataset;\n\t\tname: FilterName;\n\t\tchildren?: FilterOperationBySection[];\n\t\tnum?: number;\n\t\tstr?: string;\n\t\tkey?: InsightFacadeKey;\n\t}) {\n\t\tthis.name = params.name;\n\t\tthis.dataset = params.dataset;\n\t\tthis.children = params.children;\n\t\tthis.num = params.num;\n\t\tthis.str = params.str;\n\t\tthis.key = params.key;\n\t}\n\n\tpublic apply(): Section[] {\n\t\tconst selected: Section[] = [];\n\t\tfor (const section of this.dataset.members) {\n\t\t\t// Early abort if too many\n\t\t\tif (selected.length > maxResults) {\n\t\t\t\tthrow new ResultTooLargeError();\n\t\t\t}\n\t\t\t// Check section valid under filter\n\t\t\tif (FilterOperationBySection.test(this, section)) {\n\t\t\t\tselected.push(section);\n\t\t\t}\n\t\t}\n\t\treturn selected;\n\t}\n\n\t/**\n\t *\n\t * @param operation the root filter operation to process\n\t * @param section the section to validate\n\t * @returns whether the given section is valid under the given filter operation\n\t */\n\tprivate static test(operation: FilterOperationBySection, section: Section): boolean {\n\t\tswitch (operation.name) {\n\t\t\tcase FilterName.All:\n\t\t\t\treturn true;\n\t\t\tcase FilterName.Equals:\n\t\t\t\treturn section[operation.key!!.field] === operation.num!!;\n\t\t\tcase FilterName.Is:\n\t\t\t\treturn this.validateFilterString(operation.str!!, section[operation.key!!.field] as string);\n\t\t\tcase FilterName.GreaterThan:\n\t\t\t\treturn (section[operation.key!!.field] as number) > operation.num!!;\n\t\t\tcase FilterName.LessThan:\n\t\t\t\treturn (section[operation.key!!.field] as number) < operation.num!!;\n\t\t\tcase FilterName.Not:\n\t\t\t\treturn !this.test(operation.children!![0], section);\n\t\t\tcase FilterName.And:\n\t\t\t\tfor (const child of operation.children!!) {\n\t\t\t\t\tif (!this.test(child, section)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\tcase FilterName.Or:\n\t\t\t\tfor (const child of operation.children!!) {\n\t\t\t\t\tif (this.test(child, section)) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\tdefault:\n\t\t\t\tthrow new InsightError(\"Unexpected filter name: \" + operation.name);\n\t\t}\n\t}\n\n\t/**\n\t * Takes care of asterisks in string to filter\n\t *\n\t * @param filterStr the string provided in the filter\n\t * @param sectionStr the section string to test against\n\t */\n\tprivate static validateFilterString(filterStr: string, sectionStr: string): boolean {\n\t\tif (filterStr === \"\") {\n\t\t\treturn \"\" === sectionStr;\n\t\t}\n\n\t\tconst aStart = filterStr.startsWith(\"*\");\n\t\tconst aEnd = filterStr.endsWith(\"*\");\n\t\tconst startCharRemoved = filterStr.substring(1, filterStr.length);\n\t\tconst endCharRemoved = filterStr.substring(0, filterStr.length - 1);\n\t\tconst startAndEndCharsRemoved = filterStr.length === 1 ? \"\" : filterStr.substring(1, filterStr.length - 1);\n\n\t\tif (startAndEndCharsRemoved.includes(\"*\")) {\n\t\t\tthrow new InsightError(\"Asterisk must occur at start or end of string\");\n\t\t}\n\n\t\tif (aStart && aEnd) {\n\t\t\treturn sectionStr.includes(startAndEndCharsRemoved);\n\t\t} else if (aStart) {\n\t\t\treturn sectionStr.endsWith(startCharRemoved);\n\t\t} else if (aEnd) {\n\t\t\treturn sectionStr.startsWith(endCharRemoved);\n\t\t} else if (filterStr.includes(\"*\")) {\n\t\t\tthrow new InsightError(\"Asterisk must occur at start or end of string\");\n\t\t} else {\n\t\t\treturn filterStr === sectionStr;\n\t\t}\n\t}\n}\n\nexport class FilterBySection implements FilterStrategy<FilterOperationBySection> {\n\tprivate dataset: Dataset;\n\n\t/**\n\t *\n\t * @param dp the datasets provider\n\t * @param options the options for the given query\n\t */\n\tconstructor(dataset: Dataset) {\n\t\tthis.dataset = dataset;\n\t}\n\n\tpublic or(children: FilterOperationBySection[]): FilterOperationBySection {\n\t\treturn new FilterOperationBySection({\n\t\t\tdataset: this.dataset,\n\t\t\tname: FilterName.Or,\n\t\t\tchildren: children,\n\t\t});\n\t}\n\n\tpublic and(children: FilterOperationBySection[]): FilterOperationBySection {\n\t\treturn new FilterOperationBySection({\n\t\t\tdataset: this.dataset,\n\t\t\tname: FilterName.And,\n\t\t\tchildren: children,\n\t\t});\n\t}\n\tpublic lessThan(limit: number, mkey: InsightFacadeKey): FilterOperationBySection {\n\t\treturn new FilterOperationBySection({\n\t\t\tdataset: this.dataset,\n\t\t\tname: FilterName.LessThan,\n\t\t\tkey: mkey,\n\t\t\tnum: limit,\n\t\t});\n\t}\n\tpublic greaterThan(limit: number, mkey: InsightFacadeKey): FilterOperationBySection {\n\t\treturn new FilterOperationBySection({\n\t\t\tdataset: this.dataset,\n\t\t\tname: FilterName.GreaterThan,\n\t\t\tkey: mkey,\n\t\t\tnum: limit,\n\t\t});\n\t}\n\n\tpublic equals(limit: number, mkey: InsightFacadeKey): FilterOperationBySection {\n\t\treturn new FilterOperationBySection({\n\t\t\tdataset: this.dataset,\n\t\t\tname: FilterName.Equals,\n\t\t\tkey: mkey,\n\t\t\tnum: limit,\n\t\t});\n\t}\n\n\tpublic is(compare: string, skey: InsightFacadeKey): FilterOperationBySection {\n\t\treturn new FilterOperationBySection({\n\t\t\tdataset: this.dataset,\n\t\t\tname: FilterName.Is,\n\t\t\tkey: skey,\n\t\t\tstr: compare,\n\t\t});\n\t}\n\n\tpublic not(child: FilterOperationBySection): FilterOperationBySection {\n\t\treturn new FilterOperationBySection({\n\t\t\tdataset: this.dataset,\n\t\t\tname: FilterName.Not,\n\t\t\tchildren: [child],\n\t\t});\n\t}\n\n\tpublic all(): FilterOperationBySection {\n\t\treturn new FilterOperationBySection({\n\t\t\tdataset: this.dataset,\n\t\t\tname: FilterName.All,\n\t\t});\n\t}\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"66f01693eeca2284cac1eca5df8c5d90ffd88f3a","contentHash":"43aa0515495524330b7dc56de1d1f108310510a78cb91606db5384e9657a7207"},"/Users/fegicochen/Courses/CPSC 310/C1/project_team085/src/controller/DatasetProcessor.ts":{"path":"/Users/fegicochen/Courses/CPSC 310/C1/project_team085/src/controller/DatasetProcessor.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":16},"end":{"line":6,"column":49}},"4":{"start":{"line":7,"column":18},"end":{"line":7,"column":38}},"5":{"start":{"line":8,"column":25},"end":{"line":8,"column":52}},"6":{"start":{"line":12,"column":8},"end":{"line":17,"column":9}},"7":{"start":{"line":13,"column":12},"end":{"line":13,"column":88}},"8":{"start":{"line":16,"column":12},"end":{"line":16,"column":82}},"9":{"start":{"line":18,"column":8},"end":{"line":20,"column":9}},"10":{"start":{"line":19,"column":12},"end":{"line":19,"column":74}},"11":{"start":{"line":21,"column":28},"end":{"line":21,"column":57}},"12":{"start":{"line":22,"column":33},"end":{"line":22,"column":108}},"13":{"start":{"line":22,"column":62},"end":{"line":22,"column":107}},"14":{"start":{"line":23,"column":35},"end":{"line":37,"column":10}},"15":{"start":{"line":24,"column":32},"end":{"line":24,"column":58}},"16":{"start":{"line":25,"column":12},"end":{"line":36,"column":13}},"17":{"start":{"line":26,"column":35},"end":{"line":26,"column":58}},"18":{"start":{"line":27,"column":41},"end":{"line":27,"column":99}},"19":{"start":{"line":28,"column":36},"end":{"line":28,"column":111}},"20":{"start":{"line":29,"column":43},"end":{"line":29,"column":122}},"21":{"start":{"line":30,"column":37},"end":{"line":30,"column":90}},"22":{"start":{"line":30,"column":67},"end":{"line":30,"column":89}},"23":{"start":{"line":31,"column":45},"end":{"line":31,"column":88}},"24":{"start":{"line":31,"column":72},"end":{"line":31,"column":87}},"25":{"start":{"line":32,"column":16},"end":{"line":32,"column":44}},"26":{"start":{"line":35,"column":16},"end":{"line":35,"column":26}},"27":{"start":{"line":38,"column":37},"end":{"line":38,"column":81}},"28":{"start":{"line":39,"column":25},"end":{"line":41,"column":46}},"29":{"start":{"line":40,"column":32},"end":{"line":40,"column":61}},"30":{"start":{"line":41,"column":33},"end":{"line":41,"column":45}},"31":{"start":{"line":42,"column":8},"end":{"line":44,"column":9}},"32":{"start":{"line":43,"column":12},"end":{"line":43,"column":91}},"33":{"start":{"line":45,"column":8},"end":{"line":45,"column":24}},"34":{"start":{"line":47,"column":25},"end":{"line":59,"column":5}},"35":{"start":{"line":61,"column":8},"end":{"line":74,"column":9}},"36":{"start":{"line":62,"column":40},"end":{"line":62,"column":100}},"37":{"start":{"line":63,"column":24},"end":{"line":63,"column":100}},"38":{"start":{"line":64,"column":12},"end":{"line":67,"column":13}},"39":{"start":{"line":65,"column":43},"end":{"line":65,"column":47}},"40":{"start":{"line":66,"column":16},"end":{"line":66,"column":52}},"41":{"start":{"line":68,"column":12},"end":{"line":68,"column":34}},"42":{"start":{"line":69,"column":31},"end":{"line":69,"column":117}},"43":{"start":{"line":69,"column":81},"end":{"line":69,"column":116}},"44":{"start":{"line":70,"column":12},"end":{"line":70,"column":50}},"45":{"start":{"line":73,"column":12},"end":{"line":73,"column":29}},"46":{"start":{"line":77,"column":24},"end":{"line":77,"column":57}},"47":{"start":{"line":78,"column":8},"end":{"line":100,"column":9}},"48":{"start":{"line":80,"column":12},"end":{"line":85,"column":13}},"49":{"start":{"line":81,"column":16},"end":{"line":81,"column":89}},"50":{"start":{"line":84,"column":16},"end":{"line":84,"column":110}},"51":{"start":{"line":86,"column":12},"end":{"line":86,"column":37}},"52":{"start":{"line":88,"column":13},"end":{"line":100,"column":9}},"53":{"start":{"line":90,"column":12},"end":{"line":95,"column":13}},"54":{"start":{"line":91,"column":16},"end":{"line":91,"column":89}},"55":{"start":{"line":94,"column":16},"end":{"line":94,"column":100}},"56":{"start":{"line":96,"column":12},"end":{"line":96,"column":37}},"57":{"start":{"line":99,"column":12},"end":{"line":99,"column":88}},"58":{"start":{"line":103,"column":33},"end":{"line":103,"column":42}},"59":{"start":{"line":104,"column":8},"end":{"line":104,"column":61}},"60":{"start":{"line":105,"column":8},"end":{"line":105,"column":63}},"61":{"start":{"line":106,"column":8},"end":{"line":106,"column":65}},"62":{"start":{"line":107,"column":8},"end":{"line":107,"column":74}},"63":{"start":{"line":108,"column":8},"end":{"line":108,"column":66}},"64":{"start":{"line":109,"column":8},"end":{"line":109,"column":63}},"65":{"start":{"line":110,"column":8},"end":{"line":110,"column":61}},"66":{"start":{"line":111,"column":8},"end":{"line":111,"column":63}},"67":{"start":{"line":112,"column":8},"end":{"line":112,"column":63}},"68":{"start":{"line":113,"column":8},"end":{"line":113,"column":65}},"69":{"start":{"line":114,"column":8},"end":{"line":116,"column":9}},"70":{"start":{"line":115,"column":12},"end":{"line":115,"column":97}},"71":{"start":{"line":117,"column":8},"end":{"line":117,"column":45}},"72":{"start":{"line":120,"column":0},"end":{"line":120,"column":35}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":10,"column":4},"end":{"line":10,"column":5}},"loc":{"start":{"line":10,"column":43},"end":{"line":46,"column":5}},"line":10},"2":{"name":"(anonymous_2)","decl":{"start":{"line":22,"column":52},"end":{"line":22,"column":53}},"loc":{"start":{"line":22,"column":62},"end":{"line":22,"column":107}},"line":22},"3":{"name":"(anonymous_3)","decl":{"start":{"line":23,"column":56},"end":{"line":23,"column":57}},"loc":{"start":{"line":23,"column":72},"end":{"line":37,"column":9}},"line":23},"4":{"name":"(anonymous_4)","decl":{"start":{"line":30,"column":60},"end":{"line":30,"column":61}},"loc":{"start":{"line":30,"column":67},"end":{"line":30,"column":89}},"line":30},"5":{"name":"(anonymous_5)","decl":{"start":{"line":31,"column":65},"end":{"line":31,"column":66}},"loc":{"start":{"line":31,"column":72},"end":{"line":31,"column":87}},"line":31},"6":{"name":"(anonymous_6)","decl":{"start":{"line":40,"column":20},"end":{"line":40,"column":21}},"loc":{"start":{"line":40,"column":32},"end":{"line":40,"column":61}},"line":40},"7":{"name":"(anonymous_7)","decl":{"start":{"line":41,"column":21},"end":{"line":41,"column":22}},"loc":{"start":{"line":41,"column":33},"end":{"line":41,"column":45}},"line":41},"8":{"name":"(anonymous_8)","decl":{"start":{"line":60,"column":4},"end":{"line":60,"column":5}},"loc":{"start":{"line":60,"column":39},"end":{"line":75,"column":5}},"line":60},"9":{"name":"(anonymous_9)","decl":{"start":{"line":69,"column":61},"end":{"line":69,"column":62}},"loc":{"start":{"line":69,"column":81},"end":{"line":69,"column":116}},"line":69},"10":{"name":"(anonymous_10)","decl":{"start":{"line":76,"column":4},"end":{"line":76,"column":5}},"loc":{"start":{"line":76,"column":42},"end":{"line":101,"column":5}},"line":76},"11":{"name":"(anonymous_11)","decl":{"start":{"line":102,"column":4},"end":{"line":102,"column":5}},"loc":{"start":{"line":102,"column":40},"end":{"line":118,"column":5}},"line":102}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":18,"column":8},"end":{"line":20,"column":9}},"type":"if","locations":[{"start":{"line":18,"column":8},"end":{"line":20,"column":9}},{"start":{"line":18,"column":8},"end":{"line":20,"column":9}}],"line":18},"4":{"loc":{"start":{"line":22,"column":62},"end":{"line":22,"column":107}},"type":"binary-expr","locations":[{"start":{"line":22,"column":62},"end":{"line":22,"column":94}},{"start":{"line":22,"column":98},"end":{"line":22,"column":107}}],"line":22},"5":{"loc":{"start":{"line":42,"column":8},"end":{"line":44,"column":9}},"type":"if","locations":[{"start":{"line":42,"column":8},"end":{"line":44,"column":9}},{"start":{"line":42,"column":8},"end":{"line":44,"column":9}}],"line":42},"6":{"loc":{"start":{"line":64,"column":12},"end":{"line":67,"column":13}},"type":"if","locations":[{"start":{"line":64,"column":12},"end":{"line":67,"column":13}},{"start":{"line":64,"column":12},"end":{"line":67,"column":13}}],"line":64},"7":{"loc":{"start":{"line":64,"column":16},"end":{"line":64,"column":70}},"type":"binary-expr","locations":[{"start":{"line":64,"column":16},"end":{"line":64,"column":34}},{"start":{"line":64,"column":38},"end":{"line":64,"column":70}}],"line":64},"8":{"loc":{"start":{"line":78,"column":8},"end":{"line":100,"column":9}},"type":"if","locations":[{"start":{"line":78,"column":8},"end":{"line":100,"column":9}},{"start":{"line":78,"column":8},"end":{"line":100,"column":9}}],"line":78},"9":{"loc":{"start":{"line":88,"column":13},"end":{"line":100,"column":9}},"type":"if","locations":[{"start":{"line":88,"column":13},"end":{"line":100,"column":9}},{"start":{"line":88,"column":13},"end":{"line":100,"column":9}}],"line":88},"10":{"loc":{"start":{"line":114,"column":8},"end":{"line":116,"column":9}},"type":"if","locations":[{"start":{"line":114,"column":8},"end":{"line":116,"column":9}},{"start":{"line":114,"column":8},"end":{"line":116,"column":9}}],"line":114}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":35,"7":35,"8":3,"9":32,"10":0,"11":32,"12":32,"13":29805,"14":32,"15":29771,"16":29771,"17":29771,"18":29766,"19":29766,"20":29766,"21":29766,"22":325232,"23":29766,"24":325232,"25":29766,"26":5,"27":32,"28":32,"29":29771,"30":29771,"31":32,"32":6,"33":26,"34":1,"35":325232,"36":325232,"37":325232,"38":325230,"39":123693,"40":123693,"41":325230,"42":325230,"43":3252300,"44":325230,"45":2,"46":3252300,"47":3252300,"48":1626150,"49":1626150,"50":201537,"51":1626150,"52":1626150,"53":1626150,"54":1626150,"55":325230,"56":1626150,"57":0,"58":3252300,"59":3252300,"60":3252300,"61":3252300,"62":3252300,"63":3252300,"64":3252300,"65":3252300,"66":3252300,"67":3252300,"68":3252300,"69":3252300,"70":0,"71":3252300,"72":1},"f":{"0":1,"1":35,"2":29805,"3":29771,"4":325232,"5":325232,"6":29771,"7":29771,"8":325232,"9":3252300,"10":3252300,"11":3252300},"b":{"0":[1,1,1],"1":[0,1],"2":[1,1],"3":[0,32],"4":[29805,29803],"5":[6,26],"6":[123693,201537],"7":[325230,325230],"8":[1626150,1626150],"9":[1626150,0],"10":[0,3252300]},"inputSourceMap":{"version":3,"file":"/Users/fegicochen/Courses/CPSC 310/C1/project_team085/src/controller/DatasetProcessor.ts","sources":["/Users/fegicochen/Courses/CPSC 310/C1/project_team085/src/controller/DatasetProcessor.ts"],"names":[],"mappings":";;;;;AAAA,kDAA0B;AAC1B,uCAA6D;AAC7D,qDAAgD;AAChD,MAAqB,gBAAgB;IAM7B,MAAM,CAAC,KAAK,CAAC,gBAAgB,CAAC,OAAe;QACnD,IAAI,QAAQ,CAAC;QACb,IAAI;YACH,QAAQ,GAAG,MAAM,IAAI,eAAK,EAAE,CAAC,SAAS,CAAC,OAAO,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;SAClE;QAAC,OAAO,CAAC,EAAE;YACX,MAAM,IAAI,6BAAY,CAAC,wBAAwB,GAAG,CAAC,CAAC,CAAC;SACrD;QAGD,IAAI,QAAQ,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK,IAAI,EAAE;YACxC,MAAM,IAAI,6BAAY,CAAC,oBAAoB,CAAC,CAAC;SAC7C;QAGD,MAAM,WAAW,GAAG,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QAElD,MAAM,gBAAgB,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAErG,MAAM,kBAAkB,GAAG,gBAAgB,CAAC,GAAG,CAAC,KAAK,EAAE,IAAI,EAAE,EAAE;YAC9D,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;YAC/C,IAAI;gBACH,MAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;gBAC3C,MAAM,gBAAgB,GAAG,sBAAY,CAAC,aAAa,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;gBAC1E,MAAM,WAAW,GAAG,sBAAY,CAAC,cAAc,CAAC,gBAAgB,EAAE,CAAC,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;gBACtF,MAAM,kBAAkB,GAAG,sBAAY,CAAC,YAAY,CAAC,eAAe,EAAE,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACjG,MAAM,YAAY,GAAG,kBAAkB,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC3E,MAAM,oBAAoB,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,KAAK,SAAS,CAAc,CAAC;gBAEtF,OAAO,oBAAoB,CAAC;aAC5B;YAAC,OAAO,EAAE,EAAE;gBACZ,OAAO,EAAE,CAAC;aACV;QACF,CAAC,CAAC,CAAC;QAEH,MAAM,oBAAoB,GAAG,MAAM,OAAO,CAAC,UAAU,CAAC,kBAAkB,CAAC,CAAC;QAC1E,MAAM,QAAQ,GAAG,oBAAoB;aACnC,MAAM,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,MAAM,KAAK,WAAW,CAAC;aACjD,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE,CAAE,MAA4C,CAAC,KAAK,CAAC,CAAC;QAG3E,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;YAC1B,MAAM,IAAI,6BAAY,CAAC,qCAAqC,CAAC,CAAC;SAC9D;QAED,OAAO,QAAQ,CAAC;IACjB,CAAC;IAEO,MAAM,CAAC,WAAW,GAAwB;QACjD,CAAC,IAAI,EAAE,IAAI,CAAC;QACZ,CAAC,QAAQ,EAAE,IAAI,CAAC;QAChB,CAAC,OAAO,EAAE,IAAI,CAAC;QACf,CAAC,WAAW,EAAE,IAAI,CAAC;QACnB,CAAC,SAAS,EAAE,IAAI,CAAC;QACjB,CAAC,MAAM,EAAE,IAAI,CAAC;QACd,CAAC,KAAK,EAAE,IAAI,CAAC;QACb,CAAC,MAAM,EAAE,IAAI,CAAC;QACd,CAAC,MAAM,EAAE,IAAI,CAAC;QACd,CAAC,OAAO,EAAE,IAAI,CAAC;QACf,CAAC,SAAS,EAAE,KAAK,CAAC;KAClB,CAAC;IAEK,MAAM,CAAC,cAAc,CAAC,WAAoB;QAChD,IAAI;YACH,MAAM,mBAAmB,GAAG,sBAAY,CAAC,aAAa,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;YAC/E,MAAM,GAAG,GAAG,sBAAY,CAAC,cAAc,CAAC,mBAAmB,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;YAG/E,IAAI,GAAG,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,GAAG,CAAC,GAAG,CAAC,SAAS,CAAC,KAAK,SAAS,EAAE;gBAC3D,MAAM,kBAAkB,GAAG,IAAI,CAAC;gBAChC,GAAG,CAAC,GAAG,CAAC,MAAM,EAAE,kBAAkB,CAAC,CAAC;aACpC;YACD,GAAG,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;YAEtB,MAAM,UAAU,GAAG,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,OAAO,EAAE,GAAG,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;YAE1G,OAAO,MAAM,CAAC,WAAW,CAAC,UAAU,CAAuB,CAAC;SAC5D;QAAC,OAAO,EAAE,EAAE;YACZ,OAAO,SAAS,CAAC;SACjB;IACF,CAAC;IAEO,MAAM,CAAC,gBAAgB,CAAC,OAAe,EAAE,GAAY;QAC5D,MAAM,OAAO,GAAG,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC;QAClD,IAAI,sBAAY,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE;YACjC,IAAI,MAAc,CAAC;YACnB,IAAI;gBACH,MAAM,GAAG,sBAAY,CAAC,aAAa,CAAC,UAAU,GAAG,OAAO,EAAE,GAAG,CAAC,CAAC;aAC/D;YAAC,OAAO,EAAE,EAAE;gBACZ,MAAM,GAAG,MAAM,CAAC,QAAQ,CAAC,sBAAY,CAAC,aAAa,CAAC,UAAU,GAAG,OAAO,EAAE,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC;aACpF;YACD,OAAO,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;SACzB;aAAM,IAAI,sBAAY,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE;YACxC,IAAI,MAAc,CAAC;YACnB,IAAI;gBACH,MAAM,GAAG,sBAAY,CAAC,aAAa,CAAC,UAAU,GAAG,OAAO,EAAE,GAAG,CAAC,CAAC;aAC/D;YAAC,OAAO,EAAE,EAAE;gBACZ,MAAM,GAAG,sBAAY,CAAC,aAAa,CAAC,UAAU,GAAG,OAAO,EAAE,GAAG,CAAC,CAAC,QAAQ,EAAE,CAAC;aAC1E;YACD,OAAO,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;SACzB;aAAM;YACN,MAAM,IAAI,6BAAY,CAAC,kCAAkC,CAAC,CAAC;SAC3D;IACF,CAAC;IAEO,MAAM,CAAC,mBAAmB,CAAC,OAAe;QACjD,MAAM,gBAAgB,GAAG,IAAI,GAAG,EAAqB,CAAC;QACtD,gBAAgB,CAAC,GAAG,CAAC,IAAI,EAAE,mBAAS,CAAC,IAAI,CAAC,CAAC;QAC3C,gBAAgB,CAAC,GAAG,CAAC,QAAQ,EAAE,mBAAS,CAAC,EAAE,CAAC,CAAC;QAC7C,gBAAgB,CAAC,GAAG,CAAC,OAAO,EAAE,mBAAS,CAAC,KAAK,CAAC,CAAC;QAC/C,gBAAgB,CAAC,GAAG,CAAC,WAAW,EAAE,mBAAS,CAAC,UAAU,CAAC,CAAC;QACxD,gBAAgB,CAAC,GAAG,CAAC,SAAS,EAAE,mBAAS,CAAC,IAAI,CAAC,CAAC;QAChD,gBAAgB,CAAC,GAAG,CAAC,MAAM,EAAE,mBAAS,CAAC,IAAI,CAAC,CAAC;QAC7C,gBAAgB,CAAC,GAAG,CAAC,KAAK,EAAE,mBAAS,CAAC,GAAG,CAAC,CAAC;QAC3C,gBAAgB,CAAC,GAAG,CAAC,MAAM,EAAE,mBAAS,CAAC,IAAI,CAAC,CAAC;QAC7C,gBAAgB,CAAC,GAAG,CAAC,MAAM,EAAE,mBAAS,CAAC,IAAI,CAAC,CAAC;QAC7C,gBAAgB,CAAC,GAAG,CAAC,OAAO,EAAE,mBAAS,CAAC,KAAK,CAAC,CAAC;QAC/C,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE;YACnC,MAAM,IAAI,6BAAY,CAAC,2CAA2C,CAAC,CAAC;SACpE;QACD,OAAO,gBAAgB,CAAC,GAAG,CAAC,OAAO,CAAG,CAAC;IACxC,CAAC;;AA9HF,mCA+HC","sourcesContent":["import JSZip from \"jszip\";\nimport { DatasetId, DatasetUtils, Section } from \"./Dataset\";\nimport { InsightError } from \"./IInsightFacade\";\nexport default class DatasetProcessor {\n\t/**\n\t *\n\t * @param content zip file\n\t * @returns Returns the valid sections from zip file\n\t */\n\tpublic static async getValidSections(content: string): Promise<Section[]> {\n\t\tlet unzipped;\n\t\ttry {\n\t\t\tunzipped = await new JSZip().loadAsync(content, { base64: true });\n\t\t} catch (e) {\n\t\t\tthrow new InsightError(\"Error parsing content \" + e);\n\t\t}\n\n\t\t// Check if unzipped file has courses folder\n\t\tif (unzipped.folder(\"courses\") === null) {\n\t\t\tthrow new InsightError(\"No courses folder!\");\n\t\t}\n\n\t\t// Go through files in courses folder\n\t\tconst courseFiles = Object.values(unzipped.files);\n\t\t// Filters for valid JSON files in courses folder\n\t\tconst validCourseFiles = courseFiles.filter((file) => file.name.startsWith(\"courses/\") && !file.dir);\n\t\t// Map over valid files to read content\n\t\tconst courseFilePromises = validCourseFiles.map(async (file) => {\n\t\t\tconst jsonContent = await file.async(\"string\");\n\t\t\ttry {\n\t\t\t\tconst parsedData = JSON.parse(jsonContent);\n\t\t\t\tconst parsedDataObject = DatasetUtils.checkIsObject(\"result\", parsedData);\n\t\t\t\tconst resultInMap = DatasetUtils.requireHasKeys(parsedDataObject, [[\"result\", true]]);\n\t\t\t\tconst arrayOfSectionLike = DatasetUtils.checkIsArray(\"section array\", resultInMap.get(\"result\"));\n\t\t\t\tconst sectionArray = arrayOfSectionLike.map((x) => this.checkIsSection(x));\n\t\t\t\tconst sectionFilteredArray = sectionArray.filter((x) => x !== undefined) as Section[];\n\n\t\t\t\treturn sectionFilteredArray; // Return the valid sections\n\t\t\t} catch (_e) {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t});\n\t\t// Wait for all promises to fulfill or reject, filter results for fulfilled promises and flatten the section arrays\n\t\tconst courseSectionsArrays = await Promise.allSettled(courseFilePromises);\n\t\tconst sections = courseSectionsArrays\n\t\t\t.filter((result) => result.status === \"fulfilled\")\n\t\t\t.flatMap((result) => (result as PromiseFulfilledResult<Section[]>).value);\n\n\t\t// Check if there's at least one valid section\n\t\tif (sections.length === 0) {\n\t\t\tthrow new InsightError(\"No valid sections found in content!\");\n\t\t}\n\n\t\treturn sections;\n\t}\n\n\tprivate static sectionKeys: [string, boolean][] = [\n\t\t[\"id\", true],\n\t\t[\"Course\", true],\n\t\t[\"Title\", true],\n\t\t[\"Professor\", true],\n\t\t[\"Subject\", true],\n\t\t[\"Year\", true],\n\t\t[\"Avg\", true],\n\t\t[\"Pass\", true],\n\t\t[\"Fail\", true],\n\t\t[\"Audit\", true],\n\t\t[\"Section\", false],\n\t];\n\n\tpublic static checkIsSection(sectionLike: unknown): Section | undefined {\n\t\ttry {\n\t\t\tconst sectionLikeIsObject = DatasetUtils.checkIsObject(\"section\", sectionLike);\n\t\t\tconst map = DatasetUtils.requireHasKeys(sectionLikeIsObject, this.sectionKeys);\n\n\t\t\t// Check for overall secton\n\t\t\tif (map.has(\"Section\") && map.get(\"Section\") === \"overall\") {\n\t\t\t\tconst overallSectionYear = 1900;\n\t\t\t\tmap.set(\"Year\", overallSectionYear);\n\t\t\t}\n\t\t\tmap.delete(\"Section\");\n\n\t\t\tconst sectionKVP = Array.from(map.entries()).map(([fileKey, val]) => this.parseSectionKeys(fileKey, val));\n\n\t\t\treturn Object.fromEntries(sectionKVP) as unknown as Section;\n\t\t} catch (_e) {\n\t\t\treturn undefined;\n\t\t}\n\t}\n\n\tprivate static parseSectionKeys(fileKey: string, val: unknown): [DatasetId, string | number] {\n\t\tconst dsetKey = this.mapFileToDatasetKey(fileKey);\n\t\tif (DatasetUtils.isMKey(dsetKey)) {\n\t\t\tlet numVal: number;\n\t\t\ttry {\n\t\t\t\tnumVal = DatasetUtils.checkIsNumber(\"section \" + dsetKey, val);\n\t\t\t} catch (_e) {\n\t\t\t\tnumVal = Number.parseInt(DatasetUtils.checkIsString(\"section \" + dsetKey, val), 10);\n\t\t\t}\n\t\t\treturn [dsetKey, numVal];\n\t\t} else if (DatasetUtils.isSKey(dsetKey)) {\n\t\t\tlet strVal: string;\n\t\t\ttry {\n\t\t\t\tstrVal = DatasetUtils.checkIsString(\"section \" + dsetKey, val);\n\t\t\t} catch (_e) {\n\t\t\t\tstrVal = DatasetUtils.checkIsNumber(\"section \" + dsetKey, val).toString();\n\t\t\t}\n\t\t\treturn [dsetKey, strVal];\n\t\t} else {\n\t\t\tthrow new InsightError(\"Key value not a number or string\");\n\t\t}\n\t}\n\n\tprivate static mapFileToDatasetKey(fileKey: string): DatasetId {\n\t\tconst fileToDatasetMap = new Map<string, DatasetId>();\n\t\tfileToDatasetMap.set(\"id\", DatasetId.Uuid);\n\t\tfileToDatasetMap.set(\"Course\", DatasetId.Id);\n\t\tfileToDatasetMap.set(\"Title\", DatasetId.Title);\n\t\tfileToDatasetMap.set(\"Professor\", DatasetId.Instructor);\n\t\tfileToDatasetMap.set(\"Subject\", DatasetId.Dept);\n\t\tfileToDatasetMap.set(\"Year\", DatasetId.Year);\n\t\tfileToDatasetMap.set(\"Avg\", DatasetId.Avg);\n\t\tfileToDatasetMap.set(\"Pass\", DatasetId.Pass);\n\t\tfileToDatasetMap.set(\"Fail\", DatasetId.Fail);\n\t\tfileToDatasetMap.set(\"Audit\", DatasetId.Audit);\n\t\tif (!fileToDatasetMap.has(fileKey)) {\n\t\t\tthrow new InsightError(\"File key does not correspond to DatasetId\");\n\t\t}\n\t\treturn fileToDatasetMap.get(fileKey)!!;\n\t}\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"66e6f187a9efc65f6d57da9438dd0cf0d3d1b306","contentHash":"e214bd070746c18194e58758f0008d5dff3914b637bd221c5e6f4b1493a57345"}}